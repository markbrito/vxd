<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>System.Xml</name>
	</assembly>
	<members>
		<member name="N:System.Xml">
			<summary>The <see cref="N:System.Xml"></see> namespace provides standards-based support for processing XML.</summary>
		</member>
		<member name="T:System.Xml.ConformanceLevel">
			<summary>Specifies the amount of input or output checking that the created <see cref="T:System.Xml.XmlReader"></see> and <see cref="T:System.Xml.XmlWriter"></see> objects perform.</summary>
		</member>
		<member name="F:System.Xml.ConformanceLevel.Auto">
			<summary>The <see cref="T:System.Xml.XmlReader"></see> or <see cref="T:System.Xml.XmlWriter"></see> object automatically detects whether document or fragment checking should be performed, and does the appropriate checking. In the case where you are wrapping another <see cref="T:System.Xml.XmlReader"></see> or <see cref="T:System.Xml.XmlWriter"></see> object, the outer object does not do any additional conformance checking. Conformance checking is left up to the underlying object.</summary>
		</member>
		<member name="F:System.Xml.ConformanceLevel.Document">
			<summary>The XML data is in conformance to the rules for a well-formed XML 1.0 document.</summary>
		</member>
		<member name="F:System.Xml.ConformanceLevel.Fragment">
			<summary>The XML data is a well-formed XML fragment.</summary>
		</member>
		<member name="T:System.Xml.EntityHandling">
			<summary>Specifies how the <see cref="T:System.Xml.XmlTextReader"></see> or <see cref="T:System.Xml.XmlValidatingReader"></see> handle entities.</summary>
		</member>
		<member name="F:System.Xml.EntityHandling.ExpandCharEntities">
			<summary>Expands character entities and returns general entities as <see cref="F:System.Xml.XmlNodeType.EntityReference"></see> nodes. </summary>
		</member>
		<member name="F:System.Xml.EntityHandling.ExpandEntities">
			<summary>Expands all entities and returns the expanded nodes.</summary>
		</member>
		<member name="T:System.Xml.Formatting">
			<summary>Specifies formatting options for the <see cref="T:System.Xml.XmlTextWriter"></see>.</summary>
		</member>
		<member name="F:System.Xml.Formatting.Indented">
			<summary>Causes child elements to be indented according to the <see cref="P:System.Xml.XmlTextWriter.Indentation"></see> and <see cref="P:System.Xml.XmlTextWriter.IndentChar"></see> settings. </summary>
		</member>
		<member name="F:System.Xml.Formatting.None">
			<summary>No special formatting is applied. This is the default.</summary>
		</member>
		<member name="T:System.Xml.IHasXmlNode">
			<summary>Enables a class to return an <see cref="T:System.Xml.XmlNode"></see> from the current context or position.</summary>
		</member>
		<member name="M:System.Xml.IHasXmlNode.GetNode">
			<summary>Returns the <see cref="T:System.Xml.XmlNode"></see> for the current position.</summary>
			<returns>The XmlNode for the current position.</returns>
		</member>
		<member name="T:System.Xml.IXmlLineInfo">
			<summary>Provides an interface to enable a class to return line and position information.</summary>
		</member>
		<member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
			<summary>Gets a value indicating whether the class can return line information.</summary>
			<returns>true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber"></see> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition"></see> can be provided; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.IXmlLineInfo.LineNumber">
			<summary>Gets the current line number.</summary>
			<returns>The current line number or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"></see> returns false).</returns>
		</member>
		<member name="P:System.Xml.IXmlLineInfo.LinePosition">
			<summary>Gets the current line position.</summary>
			<returns>The current line position or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"></see> returns false).</returns>
		</member>
		<member name="T:System.Xml.IXmlNamespaceResolver">
			<summary>Provides read-only access to a set of prefix and namespace mappings.</summary>
		</member>
		<member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
			<summary>Gets a collection of defined prefix-namespace mappings that are currently in scope.</summary>
			<returns>An <see cref="T:System.Collections.IDictionary"></see> that contains the current in-scope namespaces.</returns>
			<param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value that specifies the type of namespace nodes to return.</param>
		</member>
		<member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
			<summary>Gets the namespace URI mapped to the specified prefix.</summary>
			<returns>The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.</returns>
			<param name="prefix">The prefix whose namespace URI you wish to find.</param>
		</member>
		<member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
			<summary>Gets the prefix that is mapped to the specified namespace URI.</summary>
			<returns>The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.</returns>
			<param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
		</member>
		<member name="T:System.Xml.NameTable">
			<summary>Implements a single-threaded <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
		</member>
		<member name="M:System.Xml.NameTable.#ctor">
			<summary>Initializes a new instance of the NameTable class.</summary>
		</member>
		<member name="M:System.Xml.NameTable.Add(System.String)">
			<summary>Atomizes the specified string and adds it to the NameTable.</summary>
			<returns>The atomized string or the existing string if it already exists in the NameTable.</returns>
			<param name="key">The string to add. </param>
			<exception cref="T:System.ArgumentNullException">key is null. </exception>
		</member>
		<member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
			<summary>Atomizes the specified string and adds it to the NameTable.</summary>
			<returns>The atomized string or the existing string if one already exists in the NameTable. If len is zero, String.Empty is returned.</returns>
			<param name="len">The number of characters in the string. </param>
			<param name="key">The character array containing the string to add. </param>
			<param name="start">The zero-based index into the array specifying the first character of the string. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">len &lt; 0. </exception>
			<exception cref="T:System.IndexOutOfRangeException">0 &gt; start-or- start &gt;= key.Length -or- len &gt;= key.Length The above conditions do not cause an exception to be thrown if len =0. </exception>
		</member>
		<member name="M:System.Xml.NameTable.Get(System.String)">
			<summary>Gets the atomized string with the specified value.</summary>
			<returns>The atomized string object or null if the string has not already been atomized.</returns>
			<param name="value">The name to find. </param>
			<exception cref="T:System.ArgumentNullException">value is null. </exception>
		</member>
		<member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
			<summary>Gets the atomized string containing the same characters as the specified range of characters in the given array.</summary>
			<returns>The atomized string or null if the string has not already been atomized. If len is zero, String.Empty is returned.</returns>
			<param name="len">The number of characters in the name. </param>
			<param name="key">The character array containing the name to find. </param>
			<param name="start">The zero-based index into the array specifying the first character of the name. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">len &lt; 0. </exception>
			<exception cref="T:System.IndexOutOfRangeException">0 &gt; start-or- start &gt;= key.Length -or- len &gt;= key.Length The above conditions do not cause an exception to be thrown if len =0. </exception>
		</member>
		<member name="T:System.Xml.NewLineHandling">
			<summary>Specifies how to handle line breaks.</summary>
		</member>
		<member name="F:System.Xml.NewLineHandling.Entitize">
			<summary>New line characters are entitized. This setting preserves all characters when the output is read by a normalizing <see cref="T:System.Xml.XmlReader"></see>.</summary>
		</member>
		<member name="F:System.Xml.NewLineHandling.None">
			<summary>The new line characters are unchanged. The output is the same as the input.</summary>
		</member>
		<member name="F:System.Xml.NewLineHandling.Replace">
			<summary>New line characters are replaced to match the character specified in the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars"></see>  property.</summary>
		</member>
		<member name="T:System.Xml.ReadState">
			<summary>Specifies the state of the reader.</summary>
		</member>
		<member name="F:System.Xml.ReadState.Closed">
			<summary>The <see cref="M:System.Xml.XmlReader.Close"></see> method has been called.</summary>
		</member>
		<member name="F:System.Xml.ReadState.EndOfFile">
			<summary>The end of the file has been reached successfully.</summary>
		</member>
		<member name="F:System.Xml.ReadState.Error">
			<summary>An error occurred that prevents the read operation from continuing.</summary>
		</member>
		<member name="F:System.Xml.ReadState.Initial">
			<summary>The Read method has not been called.</summary>
		</member>
		<member name="F:System.Xml.ReadState.Interactive">
			<summary>The Read method has been called. Additional methods may be called on the reader.</summary>
		</member>
		<member name="T:System.Xml.ValidationType">
			<summary>Specifies the type of validation to perform.</summary>
		</member>
		<member name="F:System.Xml.ValidationType.Auto">
			<summary>Validates if DTD or schema information is found.</summary>
		</member>
		<member name="F:System.Xml.ValidationType.DTD">
			<summary>Validates according to the DTD.</summary>
		</member>
		<member name="F:System.Xml.ValidationType.None">
			<summary>No validation is performed. This setting creates an XML 1.0 compliant non-validating parser.</summary>
		</member>
		<member name="F:System.Xml.ValidationType.Schema">
			<summary>Validate according to XML Schema definition language (XSD) schemas, including inline XML Schemas. XML Schemas are associated with namespace URIs either by using the schemaLocation attribute or the provided Schemas property.</summary>
		</member>
		<member name="F:System.Xml.ValidationType.XDR">
			<summary>Validate according to XML-Data Reduced (XDR) schemas, including inline XDR schemas. XDR schemas are recognized using the x-schema namespace prefix or the <see cref="P:System.Xml.XmlValidatingReader.Schemas"></see> property.</summary>
		</member>
		<member name="T:System.Xml.WhitespaceHandling">
			<summary>Specifies how white space is handled.</summary>
		</member>
		<member name="F:System.Xml.WhitespaceHandling.All">
			<summary>Return Whitespace and SignificantWhitespace nodes. This is the default.</summary>
		</member>
		<member name="F:System.Xml.WhitespaceHandling.None">
			<summary>Return no Whitespace and no SignificantWhitespace nodes.</summary>
		</member>
		<member name="F:System.Xml.WhitespaceHandling.Significant">
			<summary>Return SignificantWhitespace nodes only.</summary>
		</member>
		<member name="T:System.Xml.WriteState">
			<summary>Specifies the state of the <see cref="T:System.Xml.XmlWriter"></see>.</summary>
		</member>
		<member name="F:System.Xml.WriteState.Attribute">
			<summary>An attribute value is being written.</summary>
		</member>
		<member name="F:System.Xml.WriteState.Closed">
			<summary>The <see cref="M:System.Xml.XmlWriter.Close"></see> method has been called.</summary>
		</member>
		<member name="F:System.Xml.WriteState.Content">
			<summary>The element content is being written.</summary>
		</member>
		<member name="F:System.Xml.WriteState.Element">
			<summary>An element start tag is being written.</summary>
		</member>
		<member name="F:System.Xml.WriteState.Error">
			<summary>An exception has been thrown, which has left the <see cref="T:System.Xml.XmlWriter"></see> in an invalid state. You may call the <see cref="M:System.Xml.XmlWriter.Close"></see> method to put the <see cref="T:System.Xml.XmlWriter"></see> in the <see cref="F:System.Xml.WriteState.Closed"></see> state. Any other <see cref="T:System.Xml.XmlWriter"></see> method calls results in an <see cref="T:System.InvalidOperationException"></see> being thrown.</summary>
		</member>
		<member name="F:System.Xml.WriteState.Prolog">
			<summary>The prolog is being written.</summary>
		</member>
		<member name="F:System.Xml.WriteState.Start">
			<summary>A Write method has not been called.</summary>
		</member>
		<member name="T:System.Xml.XmlAttribute">
			<summary>Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.</summary>
		</member>
		<member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
			<summary>Adds the specified node to the end of the list of child nodes, of this node.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> added.</returns>
			<param name="newChild">The <see cref="T:System.Xml.XmlNode"></see> to add.</param>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.This node is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
		</member>
		<member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The duplicate node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself </param>
		</member>
		<member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
			<summary>Inserts the specified node immediately after the specified reference node.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> inserted.</returns>
			<param name="newChild">The <see cref="T:System.Xml.XmlNode"></see> to insert. </param>
			<param name="refChild">The <see cref="T:System.Xml.XmlNode"></see> that is the reference node. The newChild is placed after the refChild.</param>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.The refChild is not a child of this node.This node is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
		</member>
		<member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
			<summary>Inserts the specified node immediately before the specified reference node.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> inserted.</returns>
			<param name="newChild">The <see cref="T:System.Xml.XmlNode"></see> to insert. </param>
			<param name="refChild">The <see cref="T:System.Xml.XmlNode"></see> that is the reference node. The newChild is placed before this node. </param>
			<exception cref="T:System.InvalidOperationException">The current node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.The refChild is not a child of this node.This node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
			<summary>Adds the specified node to the beginning of the list of child nodes for this node.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> added.</returns>
			<param name="newChild">The <see cref="T:System.Xml.XmlNode"></see> to add. If it is an <see cref="T:System.Xml.XmlDocumentFragment"></see>, the entire contents of the document fragment are moved into the child list of this node.</param>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.This node is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
		</member>
		<member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
			<summary>Removes the specified child node.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> removed.</returns>
			<param name="oldChild">The <see cref="T:System.Xml.XmlNode"></see> to remove.</param>
			<exception cref="T:System.ArgumentException">The oldChild is not a child of this node. Or this node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
			<summary>Replaces the child node specified with the new child node specified.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> replaced.</returns>
			<param name="newChild">The new child <see cref="T:System.Xml.XmlNode"></see>.</param>
			<param name="oldChild">The <see cref="T:System.Xml.XmlNode"></see> to replace. </param>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.This node is read-only.The oldChild is not a child of this node. </exception>
			<exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
		</member>
		<member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlAttribute.BaseURI">
			<summary>Gets the base Uniform Resource Identifier (URI) of the node.</summary>
			<returns>The location from which the node was loaded or String.Empty if the node has no base URI. Attribute nodes have the same base URI as their owner element. If an attribute node does not have an owner element, BaseURI returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.InnerText">
			<summary>Gets or sets the concatenated values of the node and all its children.</summary>
			<returns>The concatenated values of the node and all its children. For attribute nodes, this property has the same functionality as the <see cref="P:System.Xml.XmlAttribute.Value"></see> property.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.InnerXml">
			<summary>Gets or sets the value of the attribute.</summary>
			<returns>The attribute value.</returns>
			<exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
		</member>
		<member name="P:System.Xml.XmlAttribute.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>The name of the attribute node with the prefix removed. In the following example &lt;book bk:genre= 'novel'&gt;, the LocalName of the attribute is genre.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>The qualified name of the attribute node.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.NamespaceURI">
			<summary>Gets the namespace URI of this node.</summary>
			<returns>The namespace URI of this node. If the attribute is not explicitly given a namespace, this property returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>The node type for XmlAttribute nodes is XmlNodeType.Attribute.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.OwnerDocument">
			<summary>Gets the <see cref="T:System.Xml.XmlDocument"></see> to which this node belongs.</summary>
			<returns>An <see cref="T:System.Xml.XmlDocument"></see>.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.OwnerElement">
			<summary>Gets the <see cref="T:System.Xml.XmlElement"></see> to which the attribute belongs.</summary>
			<returns>The XmlElement that the attribute belongs to or null if this attribute is not part of an XmlElement.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.ParentNode">
			<summary>Gets the parent of this node. For XmlAttribute nodes, this property always returns null.</summary>
			<returns>For XmlAttribute nodes, this property always returns null.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.Prefix">
			<summary>Gets or sets the namespace prefix of this node.</summary>
			<returns>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</returns>
			<exception cref="T:System.ArgumentException">This node is read-only. </exception>
			<exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The namespaceURI of this node is null.The specified prefix is "xml", and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".This node is an attribute, the specified prefix is "xmlns", and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/".This node is an attribute, and the qualifiedName of this node is "xmlns" [Namespaces]. </exception>
		</member>
		<member name="P:System.Xml.XmlAttribute.SchemaInfo">
			<summary>Gets the post-schema-validation-infoset that has been assigned to this node as a result of schema validation.</summary>
			<returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo"></see> containing the post-schema-validation-infoset of this node.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.Specified">
			<summary>Gets a value indicating whether the attribute value was explicitly set.</summary>
			<returns>true if this attribute was explicitly given a value in the original instance document; otherwise, false. A value of false indicates that the value of the attribute came from the DTD.</returns>
		</member>
		<member name="P:System.Xml.XmlAttribute.Value">
			<summary>Gets or sets the value of the node.</summary>
			<returns>The value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType"></see> of the node. For XmlAttribute nodes, this property is the value of attribute.</returns>
			<exception cref="T:System.ArgumentException">The node is read-only and a set operation is called. </exception>
		</member>
		<member name="T:System.Xml.XmlAttributeCollection">
			<summary>Represents a collection of attributes that can be accessed by name or index.</summary>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
			<summary>Inserts the specified attribute as the last node in the collection.</summary>
			<returns>The XmlAttribute to append to the collection.</returns>
			<param name="node">The <see cref="T:System.Xml.XmlAttribute"></see> to insert. </param>
			<exception cref="T:System.ArgumentException">node was created from a document different from the one that created this collection. </exception>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
			<summary>Copies all the <see cref="T:System.Xml.XmlAttribute"></see> objects from this collection into the given array.</summary>
			<param name="array">The array that is the destination of the objects copied from this collection. </param>
			<param name="index">The index in the array where copying begins. </param>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
			<summary>Inserts the specified attribute immediately after the specified reference attribute.</summary>
			<returns>The XmlAttribute to insert into the collection.</returns>
			<param name="newNode">The <see cref="T:System.Xml.XmlAttribute"></see> to insert. </param>
			<param name="refNode">The <see cref="T:System.Xml.XmlAttribute"></see> that is the reference attribute. newNode is placed after the refNode. </param>
			<exception cref="T:System.ArgumentException">The newNode was created from a document different from the one that created this collection. Or the refNode is not a member of this collection. </exception>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
			<summary>Inserts the specified attribute immediately before the specified reference attribute.</summary>
			<returns>The XmlAttribute to insert into the collection.</returns>
			<param name="newNode">The <see cref="T:System.Xml.XmlAttribute"></see> to insert. </param>
			<param name="refNode">The <see cref="T:System.Xml.XmlAttribute"></see> that is the reference attribute. newNode is placed before the refNode. </param>
			<exception cref="T:System.ArgumentException">The newNode was created from a document different from the one that created this collection. Or the refNode is not a member of this collection. </exception>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
			<summary>Inserts the specified attribute as the first node in the collection.</summary>
			<returns>The XmlAttribute added to the collection.</returns>
			<param name="node">The <see cref="T:System.Xml.XmlAttribute"></see> to insert. </param>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
			<summary>Removes the specified attribute from the collection.</summary>
			<returns>The node removed or null if it is not found in the collection.</returns>
			<param name="node">The <see cref="T:System.Xml.XmlAttribute"></see> to remove. </param>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
			<summary>Removes all attributes from the collection.</summary>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
			<summary>Removes the attribute corresponding to the specified index from the collection.</summary>
			<returns>Returns null if there is no attribute at the specified index.</returns>
			<param name="i">The index of the node to remove. The first node has index 0. </param>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
			<summary>Adds a <see cref="T:System.Xml.XmlNode"></see> using its <see cref="P:System.Xml.XmlNode.Name"></see> property </summary>
			<returns>If the node replaces an existing node with the same name, the old node is returned; otherwise, the added node is returned.</returns>
			<param name="node">An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection. </param>
			<exception cref="T:System.ArgumentException">node was created from a different <see cref="T:System.Xml.XmlDocument"></see> than the one that created this collection.This XmlAttributeCollection is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">node is an <see cref="T:System.Xml.XmlAttribute"></see> that is already an attribute of another <see cref="T:System.Xml.XmlElement"></see> object. To re-use attributes in other elements, you must clone the XmlAttribute objects you want to re-use. </exception>
		</member>
		<member name="M:System.Xml.XmlAttributeCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>For a description of this member, see <see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)"></see>.</summary>
			<param name="array">The array that is the destination of the objects copied from this collection. </param>
			<param name="index">The index in the array where copying begins. </param>
		</member>
		<member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
			<summary>Gets the attribute with the specified index.</summary>
			<returns>The <see cref="T:System.Xml.XmlAttribute"></see> at the specified index.</returns>
			<param name="i">The index of the attribute. </param>
		</member>
		<member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
			<summary>Gets the attribute with the specified name.</summary>
			<returns>The <see cref="T:System.Xml.XmlAttribute"></see> with the specified name.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
			<summary>Gets the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
			<returns>The <see cref="T:System.Xml.XmlAttribute"></see> with the specified local name and namespace URI.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
		</member>
		<member name="T:System.Xml.XmlCDataSection">
			<summary>Represents a CDATA section.</summary>
		</member>
		<member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlCDataSection"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because CDATA nodes do not have children, regardless of the parameter setting, the cloned node will always include the data content. </param>
		</member>
		<member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlCDataSection.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For CDATA nodes, the local name is #cdata-section.</returns>
		</member>
		<member name="P:System.Xml.XmlCDataSection.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For CDATA nodes, the name is #cdata-section.</returns>
		</member>
		<member name="P:System.Xml.XmlCDataSection.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>The node type. For CDATA nodes, the value is XmlNodeType.CDATA.</returns>
		</member>
		<member name="T:System.Xml.XmlCharacterData">
			<summary>Provides text manipulation methods that are used by several classes.</summary>
		</member>
		<member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlCharacterData"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
			<summary>Appends the specified string to the end of the character data of the node.</summary>
			<param name="strData">The string to insert into the existing string. </param>
		</member>
		<member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
			<summary>Removes a range of characters from the node.</summary>
			<param name="offset">The position within the string to start deleting. </param>
			<param name="count">The number of characters to delete. </param>
		</member>
		<member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
			<summary>Inserts the specified string at the specified character offset.</summary>
			<param name="offset">The position within the string to insert the supplied string data. </param>
			<param name="strData">The string data that is to be inserted into the existing string. </param>
		</member>
		<member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
			<summary>Replaces the specified number of characters starting at the specified offset with the specified string.</summary>
			<param name="offset">The position within the string to start replacing. </param>
			<param name="count">The number of characters to replace. </param>
			<param name="strData">The new data that replaces the old string data. </param>
		</member>
		<member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
			<summary>Retrieves a substring of the full string from the specified range.</summary>
			<returns>The substring corresponding to the specified range.</returns>
			<param name="offset">The position within the string to start retrieving. An offset of zero indicates the starting point is at the start of the data. </param>
			<param name="count">The number of characters to retrieve. </param>
		</member>
		<member name="P:System.Xml.XmlCharacterData.Data">
			<summary>Contains the data of the node.</summary>
			<returns>The data of the node.</returns>
		</member>
		<member name="P:System.Xml.XmlCharacterData.InnerText">
			<summary>Gets or sets the concatenated values of the node and all the children of the node.</summary>
			<returns>The concatenated values of the node and all the children of the node.</returns>
		</member>
		<member name="P:System.Xml.XmlCharacterData.Length">
			<summary>Gets the length of the data, in characters.</summary>
			<returns>The length, in characters, of the string in the <see cref="P:System.Xml.XmlCharacterData.Data"></see> property. The length may be zero; that is, CharacterData nodes can be empty.</returns>
		</member>
		<member name="P:System.Xml.XmlCharacterData.Value">
			<summary>Gets or sets the value of the node.</summary>
			<returns>The value of the node.</returns>
			<exception cref="T:System.ArgumentException">Node is read-only. </exception>
		</member>
		<member name="T:System.Xml.XmlComment">
			<summary>Represents the content of an XML comment.</summary>
		</member>
		<member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because comment nodes do not have children, the cloned node always includes the text content, regardless of the parameter setting. </param>
		</member>
		<member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. Because comment nodes do not have children, this method has no effect.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlComment.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For comment nodes, the value is #comment.</returns>
		</member>
		<member name="P:System.Xml.XmlComment.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For comment nodes, the value is #comment.</returns>
		</member>
		<member name="P:System.Xml.XmlComment.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>For comment nodes, the value is XmlNodeType.Comment.</returns>
		</member>
		<member name="T:System.Xml.XmlConvert">
			<summary>Encodes and decodes XML names and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types the values returned are locale independent.</summary>
		</member>
		<member name="M:System.Xml.XmlConvert.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlConvert"></see> class. </summary>
		</member>
		<member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
			<summary>Decodes a name. This method does the reverse of the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)"></see> and <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)"></see> methods.</summary>
			<returns>The decoded name.</returns>
			<param name="name">The name to be transformed. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
			<summary>Converts the name to a valid XML local name.</summary>
			<returns>The encoded name.</returns>
			<param name="name">The name to be encoded. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
			<summary>Converts the name to a valid XML name.</summary>
			<returns>Returns the name with any invalid characters replaced by an escape string.</returns>
			<param name="name">A name to be translated. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
			<summary>Verifies the name is valid according to the XML specification.</summary>
			<returns>The encoded name.</returns>
			<param name="name">The name to be encoded. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Boolean"></see> equivalent.</summary>
			<returns>A Boolean value, that is, true or false.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.FormatException">s does not represent a Boolean value. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToByte(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Byte"></see> equivalent.</summary>
			<returns>A Byte equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.Byte.MinValue"></see> or greater than <see cref="F:System.Byte.MaxValue"></see>. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToChar(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Char"></see> equivalent.</summary>
			<returns>A Char representing the single character.</returns>
			<param name="s">The string containing a single character to convert. </param>
			<exception cref="T:System.FormatException">The s parameter contains more than one character. </exception>
			<exception cref="T:System.ArgumentNullException">The value of the s parameter is null. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.DateTime"></see> equivalent.</summary>
			<returns>A DateTime equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.FormatException">s is an empty string or is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.DateTime"></see> equivalent.</summary>
			<returns>A DateTime equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<param name="format">The format structure to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format. </param>
			<exception cref="T:System.FormatException">s or format is String.Empty -or- s does not contain a date and time that corresponds to format. </exception>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.DateTime"></see> equivalent.</summary>
			<returns>A DateTime equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<param name="formats">An array containing the format structures to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.FormatException">s or an element of formats is String.Empty -or- s does not contain a date and time that corresponds to any of the elements of formats. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.DateTime"></see> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode"></see> specified</summary>
			<returns>A <see cref="T:System.DateTime"></see> equivalent of the <see cref="T:System.String"></see>.</returns>
			<param name="s">The <see cref="T:System.String"></see> value to convert.</param>
			<param name="dateTimeOption">One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode"></see> values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.</param>
			<exception cref="T:System.ArgumentException">The dateTimeOption value is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">The s or dateTimeOption value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Decimal"></see> equivalent.</summary>
			<returns>A Decimal equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.Decimal.MinValue"></see> or greater than <see cref="F:System.Decimal.MaxValue"></see>. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Double"></see> equivalent.</summary>
			<returns>A Double equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.Double.MinValue"></see> or greater than <see cref="F:System.Double.MaxValue"></see>. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Guid"></see> equivalent.</summary>
			<returns>A Guid equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Int16"></see> equivalent.</summary>
			<returns>An Int16 equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.Int16.MinValue"></see> or greater than <see cref="F:System.Int16.MaxValue"></see>. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Int32"></see> equivalent.</summary>
			<returns>An Int32 equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.Int32.MinValue"></see> or greater than <see cref="F:System.Int32.MaxValue"></see>. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Int64"></see> equivalent.</summary>
			<returns>An Int64 equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.Int64.MinValue"></see> or greater than <see cref="F:System.Int64.MaxValue"></see>. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.SByte"></see> equivalent.</summary>
			<returns>An SByte equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.SByte.MinValue"></see> or greater than <see cref="F:System.SByte.MaxValue"></see>. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.Single"></see> equivalent.</summary>
			<returns>A Single equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.Single.MinValue"></see> or greater than <see cref="F:System.Single.MaxValue"></see>. </exception>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
			<summary>Converts the <see cref="T:System.Boolean"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Boolean, that is, "true" or "false".</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
			<summary>Converts the <see cref="T:System.Byte"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Byte.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Char)">
			<summary>Converts the <see cref="T:System.Char"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Char.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
			<summary>Converts the <see cref="T:System.DateTime"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the DateTime in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
			<summary>Converts the <see cref="T:System.Decimal"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Decimal.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Double)">
			<summary>Converts the <see cref="T:System.Double"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Double.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
			<summary>Converts the <see cref="T:System.Guid"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Guid.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
			<summary>Converts the <see cref="T:System.Int16"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Int16.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
			<summary>Converts the <see cref="T:System.Int32"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Int32.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
			<summary>Converts the <see cref="T:System.Int64"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Int64.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
			<summary>Converts the <see cref="T:System.SByte"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the SByte.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.Single)">
			<summary>Converts the <see cref="T:System.Single"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the Single.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
			<summary>Converts the <see cref="T:System.TimeSpan"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the TimeSpan.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
			<summary>Converts the <see cref="T:System.UInt16"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the UInt16.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
			<summary>Converts the <see cref="T:System.UInt32"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the UInt32.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
			<summary>Converts the <see cref="T:System.UInt64"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the UInt64.</returns>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
			<summary>Converts the <see cref="T:System.DateTime"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the DateTime in the specified format.</returns>
			<param name="format">The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
			<param name="value">The value to convert. </param>
		</member>
		<member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
			<summary>Converts the <see cref="T:System.DateTime"></see> to a <see cref="T:System.String"></see> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode"></see> specified.</summary>
			<returns>A <see cref="T:System.String"></see> equivalent of the <see cref="T:System.DateTime"></see>.</returns>
			<param name="dateTimeOption">One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode"></see> values that specify how to treat the <see cref="T:System.DateTime"></see> value.</param>
			<param name="value">The <see cref="T:System.DateTime"></see> value to convert.</param>
			<exception cref="T:System.ArgumentException">The dateTimeOption value is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">The value or dateTimeOption value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.TimeSpan"></see> equivalent.</summary>
			<returns>A TimeSpan equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.FormatException">s is not in correct format to represent a TimeSpan value. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.UInt16"></see> equivalent.</summary>
			<returns>A UInt16 equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.UInt16.MinValue"></see> or greater than <see cref="F:System.UInt16.MaxValue"></see>. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.UInt32"></see> equivalent.</summary>
			<returns>A UInt32 equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.UInt32.MinValue"></see> or greater than <see cref="F:System.UInt32.MaxValue"></see>. </exception>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
			<summary>Converts the <see cref="T:System.String"></see> to a <see cref="T:System.UInt64"></see> equivalent.</summary>
			<returns>A UInt64 equivalent of the string.</returns>
			<param name="s">The string to convert. </param>
			<exception cref="T:System.ArgumentNullException">s is null. </exception>
			<exception cref="T:System.FormatException">s is not in the correct format. </exception>
			<exception cref="T:System.OverflowException">s represents a number less than <see cref="F:System.UInt64.MinValue"></see> or greater than <see cref="F:System.UInt64.MaxValue"></see>. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
			<summary>Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.</summary>
			<returns>The name, if it is a valid XML name.</returns>
			<param name="name">The name to verify. </param>
			<exception cref="T:System.Xml.XmlException">name is not a valid XML name. </exception>
			<exception cref="T:System.ArgumentNullException">name is null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
			<summary>Verifies that the name is a valid NCName according to the W3C Extended Markup Language recommendation.</summary>
			<returns>The name, if it is a valid NCName.</returns>
			<param name="name">The name to verify. </param>
			<exception cref="T:System.Xml.XmlException">name is not a valid NCName. </exception>
			<exception cref="T:System.ArgumentNullException">name is null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
			<summary>Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation</summary>
			<returns>The name token, if it is a valid NMTOKEN.</returns>
			<param name="name">The string you wish to verify.</param>
			<exception cref="T:System.Xml.XmlException">The string is not a valid name token.</exception>
			<exception cref="T:System.ArgumentNullException">name is null.</exception>
		</member>
		<member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
			<summary>Verifies that the string is a valid token according to the W3C XML Schema Part2: Datatypes recommendation.</summary>
			<returns>The token, if it is a valid token.</returns>
			<param name="token">The string value you wish to verify.</param>
			<exception cref="T:System.Xml.XmlException">The string value is not a valid token.</exception>
		</member>
		<member name="T:System.Xml.XmlDateTimeSerializationMode">
			<summary>Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"></see>.</summary>
		</member>
		<member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
			<summary>Treat as local time. If the <see cref="T:System.DateTime"></see> object represents a Coordinated Universal Time (UTC), it is converted to the local time.</summary>
		</member>
		<member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
			<summary>Time zone information should be preserved when converting.</summary>
		</member>
		<member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
			<summary>Treat as a local time if a <see cref="T:System.DateTime"></see> is being converted to a string.</summary>
		</member>
		<member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
			<summary>Treat as a UTC. If the <see cref="T:System.DateTime"></see> object represents a local time, it is converted to a UTC.</summary>
		</member>
		<member name="T:System.Xml.XmlDeclaration">
			<summary>Represents the XML declaration node &lt;?xml version='1.0'...?&gt;.</summary>
		</member>
		<member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because XmlDeclaration nodes do not have children, the cloned node always includes the data value, regardless of the parameter setting. </param>
		</member>
		<member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. Because XmlDeclaration nodes do not have children, this method has no effect.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlDeclaration.Encoding">
			<summary>Gets or sets the encoding level of the XML document.</summary>
			<returns>The valid character encoding name. The most commonly supported character encoding names for XML are the following: Category Encoding Names Unicode UTF-8, UTF-16 ISO 10646 ISO-10646-UCS-2, ISO-10646-UCS-4 ISO 8859 ISO-8859-n (where "n" is a digit from 1 to 9) JIS X-0208-1997 ISO-2022-JP, Shift_JIS, EUC-JP This value is optional. If a value is not set, this property returns String.Empty.If an encoding attribute is not included, UTF-8 encoding is assumed when the document is written or saved out.</returns>
		</member>
		<member name="P:System.Xml.XmlDeclaration.InnerText">
			<summary>Gets or sets the concatenated values of the XmlDeclaration.</summary>
			<returns>The concatenated values of the XmlDeclaration (that is, everything between &lt;?xml and ?&gt;).</returns>
		</member>
		<member name="P:System.Xml.XmlDeclaration.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For XmlDeclaration nodes, the local name is xml.</returns>
		</member>
		<member name="P:System.Xml.XmlDeclaration.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For XmlDeclaration nodes, the name is xml.</returns>
		</member>
		<member name="P:System.Xml.XmlDeclaration.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>For XmlDeclaration nodes, this value is XmlNodeType.XmlDeclaration.</returns>
		</member>
		<member name="P:System.Xml.XmlDeclaration.Standalone">
			<summary>Gets or sets the value of the standalone attribute.</summary>
			<returns>Valid values are yes if all entity declarations required by the XML document are contained within the document or no if an external document type definition (DTD) is required. If a standalone attribute is not present in the XML declaration, this property returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlDeclaration.Value">
			<summary>Gets or sets the value of the XmlDeclaration.</summary>
			<returns>The contents of the XmlDeclaration (that is, everything between &lt;?xml and ?&gt;).</returns>
		</member>
		<member name="P:System.Xml.XmlDeclaration.Version">
			<summary>Gets the XML version of the document.</summary>
			<returns>The value is always 1.0.</returns>
		</member>
		<member name="T:System.Xml.XmlDocument">
			<summary>Represents an XML document.</summary>
		</member>
		<member name="M:System.Xml.XmlDocument.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDocument"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
			<summary>Initializes a new instance of the XmlDocument class with the specified <see cref="T:System.Xml.XmlImplementation"></see>.</summary>
			<param name="imp">The XmlImplementation to use. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the XmlDocument class with the specified <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="nt">The XmlNameTable to use. </param>
		</member>
		<member name="E:System.Xml.XmlDocument.NodeChanged">
			<summary>Occurs when the <see cref="P:System.Xml.XmlNode.Value"></see> of a node belonging to this document has been changed.</summary>
		</member>
		<member name="E:System.Xml.XmlDocument.NodeChanging">
			<summary>Occurs when the <see cref="P:System.Xml.XmlNode.Value"></see> of a node belonging to this document is about to be changed.</summary>
		</member>
		<member name="E:System.Xml.XmlDocument.NodeInserted">
			<summary>Occurs when a node belonging to this document has been inserted into another node.</summary>
		</member>
		<member name="E:System.Xml.XmlDocument.NodeInserting">
			<summary>Occurs when a node belonging to this document is about to be inserted into another node.</summary>
		</member>
		<member name="E:System.Xml.XmlDocument.NodeRemoved">
			<summary>Occurs when a node belonging to this document has been removed from its parent.</summary>
		</member>
		<member name="E:System.Xml.XmlDocument.NodeRemoving">
			<summary>Occurs when a node belonging to this document is about to be removed from the document.</summary>
		</member>
		<member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned XmlDocument node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlAttribute"></see> with the specified <see cref="P:System.Xml.XmlDocument.Name"></see>.</summary>
			<returns>The new XmlAttribute.</returns>
			<param name="name">The qualified name of the attribute. If the name contains a colon, the <see cref="P:System.Xml.XmlNode.Prefix"></see> property reflects the part of the name preceding the first colon and the <see cref="P:System.Xml.XmlDocument.LocalName"></see> property reflects the part of the name following the first colon. The <see cref="P:System.Xml.XmlNode.NamespaceURI"></see> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlAttribute"></see> with the specified qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The new XmlAttribute.</returns>
			<param name="qualifiedName">The qualified name of the attribute. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix"></see> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName"></see> property will reflect the part of the name after the colon. </param>
			<param name="namespaceURI">The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlAttribute"></see> with the specified <see cref="P:System.Xml.XmlNode.Prefix"></see>, <see cref="P:System.Xml.XmlDocument.LocalName"></see>, and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The new XmlAttribute.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute (if any). String.Empty and null are equivalent. If prefix is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown. </param>
			<param name="prefix">The prefix of the attribute (if any). String.Empty and null are equivalent. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlCDataSection"></see> containing the specified data.</summary>
			<returns>The new XmlCDataSection.</returns>
			<param name="data">The content of the new XmlCDataSection. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlComment"></see> containing the specified data.</summary>
			<returns>The new XmlComment.</returns>
			<param name="data">The content of the new XmlComment. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
			<summary>Creates a default attribute with the specified prefix, local name and namespace URI.</summary>
			<returns>The new <see cref="T:System.Xml.XmlAttribute"></see>.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute (if any). </param>
			<param name="prefix">The prefix of the attribute (if any). </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
			<summary>Creates an <see cref="T:System.Xml.XmlDocumentFragment"></see>.</summary>
			<returns>The new XmlDocumentFragment.</returns>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
			<summary>Returns a new <see cref="T:System.Xml.XmlDocumentType"></see> object.</summary>
			<returns>The new XmlDocumentType.</returns>
			<param name="systemId">The system identifier of the document type or null. Specifies the URL of the file location for the external DTD subset.</param>
			<param name="publicId">The public identifier of the document type or null. You can specify a public URI and also a system identifier to identify the location of the external DTD subset.</param>
			<param name="name">Name of the document type. </param>
			<param name="internalSubset">The DTD internal subset of the document type or null. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
			<summary>Creates an element with the specified name.</summary>
			<returns>The new XmlElement.</returns>
			<param name="name">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix"></see> property reflects the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName"></see> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlElement"></see> with the qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The new XmlElement.</returns>
			<param name="qualifiedName">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix"></see> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName"></see> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
			<param name="namespaceURI">The namespace URI of the element. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
			<summary>Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix"></see>, <see cref="P:System.Xml.XmlDocument.LocalName"></see>, and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The new <see cref="T:System.Xml.XmlElement"></see>.</returns>
			<param name="localName">The local name of the new element. </param>
			<param name="namespaceURI">The namespace URI of the new element (if any). String.Empty and null are equivalent. </param>
			<param name="prefix">The prefix of the new element (if any). String.Empty and null are equivalent. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlEntityReference"></see> with the specified name.</summary>
			<returns>The new XmlEntityReference.</returns>
			<param name="name">The name of the entity reference. </param>
			<exception cref="T:System.ArgumentException">The name is invalid (for example, names starting with'#' are invalid.) </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateNavigator">
			<summary>Creates a new <see cref="T:System.Xml.XPath.XPathNavigator"></see> object for navigating this document.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object.</returns>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
			<summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator"></see> object for navigating this document positioned on the <see cref="T:System.Xml.XmlNode"></see> specified.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object.</returns>
			<param name="node">The <see cref="T:System.Xml.XmlNode"></see> you want the navigator initially positioned on. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlNode"></see> with the specified node type, <see cref="P:System.Xml.XmlDocument.Name"></see>, and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The new XmlNode.</returns>
			<param name="nodeTypeString">String version of the <see cref="T:System.Xml.XmlNodeType"></see> of the new node. This parameter must be one of the values listed in the table below. </param>
			<param name="namespaceURI">The namespace URI of the new node. </param>
			<param name="name">The qualified name of the new node. If the name contains a colon, it is parsed into <see cref="P:System.Xml.XmlNode.Prefix"></see> and <see cref="P:System.Xml.XmlDocument.LocalName"></see> components. </param>
			<exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name; or nodeTypeString is not one of the strings listed below. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlNode"></see> with the specified <see cref="T:System.Xml.XmlNodeType"></see>, <see cref="P:System.Xml.XmlDocument.Name"></see>, and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The new XmlNode.</returns>
			<param name="type">The XmlNodeType of the new node. </param>
			<param name="namespaceURI">The namespace URI of the new node. </param>
			<param name="name">The qualified name of the new node. If the name contains a colon then it is parsed into <see cref="P:System.Xml.XmlNode.Prefix"></see> and <see cref="P:System.Xml.XmlDocument.LocalName"></see> components. </param>
			<exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
			<summary>Creates a <see cref="T:System.Xml.XmlNode"></see> with the specified <see cref="T:System.Xml.XmlNodeType"></see>, <see cref="P:System.Xml.XmlNode.Prefix"></see>, <see cref="P:System.Xml.XmlDocument.Name"></see>, and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The new XmlNode.</returns>
			<param name="type">The XmlNodeType of the new node. </param>
			<param name="namespaceURI">The namespace URI of the new node. </param>
			<param name="name">The local name of the new node. </param>
			<param name="prefix">The prefix of the new node. </param>
			<exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlProcessingInstruction"></see> with the specified name and data.</summary>
			<returns>The new XmlProcessingInstruction.</returns>
			<param name="data">The data for the processing instruction. </param>
			<param name="target">The name of the processing instruction. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlSignificantWhitespace"></see> node.</summary>
			<returns>A new XmlSignificantWhitespace node.</returns>
			<param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlText"></see> with the specified text.</summary>
			<returns>The new XmlText node.</returns>
			<param name="text">The text for the Text node. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlWhitespace"></see> node.</summary>
			<returns>A new XmlWhitespace node.</returns>
			<param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
		</member>
		<member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlDeclaration"></see> node with the specified values.</summary>
			<returns>The new XmlDeclaration node.</returns>
			<param name="standalone">The value must be either "yes" or "no". If this is null or String.Empty, the Save method does not write a standalone attribute on the XML declaration. </param>
			<param name="version">The version must be "1.0". </param>
			<param name="encoding">The value of the encoding attribute. This is the encoding that is used when you save the <see cref="T:System.Xml.XmlDocument"></see> to a file or a stream; therefore, it must be set to a string supported by the <see cref="T:System.Text.Encoding"></see> class, otherwise <see cref="M:System.Xml.XmlDocument.Save(System.String)"></see> fails. If this is null or String.Empty, the Save method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.Note: If the XmlDocument is saved to either a <see cref="T:System.IO.TextWriter"></see> or an <see cref="T:System.Xml.XmlTextWriter"></see>, this encoding value is discarded. Instead, the encoding of the TextWriter or the XmlTextWriter is used. This ensures that the XML written out can be read back using the correct encoding. </param>
			<exception cref="T:System.ArgumentException">The values of version or standalone are something other than the ones specified above. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
			<summary>Gets the <see cref="T:System.Xml.XmlElement"></see> with the specified ID.</summary>
			<returns>The XmlElement with the matching ID or null if no matching element is found.</returns>
			<param name="elementId">The attribute ID to match. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
			<summary>Returns an <see cref="T:System.Xml.XmlNodeList"></see> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.Name"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlNodeList"></see> containing a list of all matching nodes.</returns>
			<param name="name">The qualified name to match. It is matched against the Name property of the matching node. The special value "*" matches all tags. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
			<summary>Returns an <see cref="T:System.Xml.XmlNodeList"></see> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.LocalName"></see> and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlNodeList"></see> containing a list of all matching nodes.</returns>
			<param name="localName">The LocalName to match. The special value "*" matches all tags. </param>
			<param name="namespaceURI">NamespaceURI to match. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
			<summary>Imports a node from another document to the current document.</summary>
			<returns>The imported <see cref="T:System.Xml.XmlNode"></see>.</returns>
			<param name="node">The node being imported. </param>
			<param name="deep">true to perform a deep clone; otherwise, false. </param>
			<exception cref="T:System.InvalidOperationException">Calling this method on a node type which cannot be imported. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
			<summary>Loads the XML document from the specified stream.</summary>
			<param name="inStream">The stream containing the XML document to load. </param>
			<exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Load(System.String)">
			<summary>Loads the XML document from the specified URL.</summary>
			<param name="filename">URL for the file containing the XML document to load. </param>
			<exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
			<summary>Loads the XML document from the specified <see cref="T:System.IO.TextReader"></see>.</summary>
			<param name="txtReader">The TextReader used to feed the XML data into the document. </param>
			<exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
			<summary>Loads the XML document from the specified <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="reader">The XmlReader used to feed the XML data into the document. </param>
			<exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
			<summary>Loads the XML document from the specified string.</summary>
			<param name="xml">String containing the XML document to load. </param>
			<exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
			<summary>Creates an <see cref="T:System.Xml.XmlNode"></see> object based on the information in the <see cref="T:System.Xml.XmlReader"></see>. The reader must be positioned on a node or attribute.</summary>
			<returns>The new XmlNode or null if no more nodes exist.</returns>
			<param name="reader">The XML source </param>
			<exception cref="T:System.InvalidOperationException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
			<summary>Saves the XML document to the specified stream.</summary>
			<param name="outStream">The stream to which you want to save. </param>
			<exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Save(System.String)">
			<summary>Saves the XML document to the specified file.</summary>
			<param name="filename">The location of the file where you want to save the document. </param>
			<exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
			<summary>Saves the XML document to the specified <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="writer">The TextWriter to which you want to save. </param>
			<exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
			<summary>Saves the XML document to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
			<exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
			<summary>Validates the <see cref="T:System.Xml.XmlDocument"></see> against the XML Schema Definition Language (XSD) schemas contained in the <see cref="P:System.Xml.XmlDocument.Schemas"></see> property.</summary>
			<param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> object that receives information about schema validation warnings and errors.</param>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation event occurred and no <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> object was specified.</exception>
		</member>
		<member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
			<summary>Validates the <see cref="T:System.Xml.XmlNode"></see> object specified against the XML Schema Definition Language (XSD) schemas in the <see cref="P:System.Xml.XmlDocument.Schemas"></see> property.</summary>
			<param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> object that receives information about schema validation warnings and errors.</param>
			<param name="nodeToValidate">The <see cref="T:System.Xml.XmlNode"></see> object created from an <see cref="T:System.Xml.XmlDocument"></see> to validate.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlNode"></see> object parameter was not created from an <see cref="T:System.Xml.XmlDocument"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation event occurred and no <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> object was specified.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlNode"></see> object parameter is not an element, attribute, document fragment, or the root node.</exception>
		</member>
		<member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="xw">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlDocument.BaseURI">
			<summary>Gets the base URI of the current node.</summary>
			<returns>The location from which the node was loaded.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.DocumentElement">
			<summary>Gets the root <see cref="T:System.Xml.XmlElement"></see> for the document.</summary>
			<returns>The XmlElement that represents the root of the XML document tree. If no root exists, null is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.DocumentType">
			<summary>Gets the node containing the DOCTYPE declaration.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> containing the DocumentType (DOCTYPE declaration).</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.Implementation">
			<summary>Gets the <see cref="T:System.Xml.XmlImplementation"></see> object for the current document.</summary>
			<returns>The XmlImplementation object for the current document.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.InnerXml">
			<summary>Gets or sets the markup representing the children of the current node.</summary>
			<returns>The markup of the children of the current node.</returns>
			<exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
		</member>
		<member name="P:System.Xml.XmlDocument.IsReadOnly">
			<summary>Gets a value indicating whether the current node is read-only.</summary>
			<returns>true if the current node is read-only; otherwise false. XmlDocument nodes always return false.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For XmlDocument nodes, the local name is #document.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For XmlDocument nodes, the name is #document.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.NameTable">
			<summary>Gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.</summary>
			<returns>An XmlNameTable enabling you to get the atomized version of a string within the document.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>The node type. For XmlDocument nodes, this value is XmlNodeType.Document.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.OwnerDocument">
			<summary>Gets the <see cref="T:System.Xml.XmlDocument"></see> to which the current node belongs.</summary>
			<returns>For XmlDocument nodes (<see cref="P:System.Xml.XmlDocument.NodeType"></see> equals XmlNodeType.Document), this property always returns null.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.ParentNode">
			<summary>Gets the parent node of this node (for nodes that can have parents).</summary>
			<returns>Always returns null.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.PreserveWhitespace">
			<summary>Gets or sets a value indicating whether to preserve white space in element content.</summary>
			<returns>true to preserve white space; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.SchemaInfo">
			<summary>Returns the Post-Schema-Validation-Infoset (PSVI) of the node.</summary>
			<returns>The <see cref="T:System.Xml.Schema.IXmlSchemaInfo"></see> object representing the PSVI of the node.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.Schemas">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object associated with this <see cref="T:System.Xml.XmlDocument"></see>.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object containing the XML Schema Definition Language (XSD) schemas associated with this <see cref="T:System.Xml.XmlDocument"></see>; otherwise, an empty <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object.</returns>
		</member>
		<member name="P:System.Xml.XmlDocument.XmlResolver">
			<summary>Sets the <see cref="T:System.Xml.XmlResolver"></see> to use for resolving external resources.</summary>
			<returns>The XmlResolver to use.In version 1.1 of the.NET Framework, the caller must be fully trusted in order to specify an XmlResolver.</returns>
			<exception cref="T:System.Xml.XmlException">This property is set to null and an external DTD or entity is encountered. </exception>
		</member>
		<member name="T:System.Xml.XmlDocumentFragment">
			<summary>Represents a lightweight object that is useful for tree insert operations.</summary>
		</member>
		<member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
		</member>
		<member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlDocumentFragment.InnerXml">
			<summary>Gets or sets the markup representing the children of this node.</summary>
			<returns>The markup of the children of this node.</returns>
			<exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
		</member>
		<member name="P:System.Xml.XmlDocumentFragment.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For XmlDocumentFragment nodes, the local name is #document-fragment.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentFragment.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For XmlDocumentFragment, the name is #document-fragment.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentFragment.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>For XmlDocumentFragment nodes, this value is XmlNodeType.DocumentFragment.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
			<summary>Gets the <see cref="T:System.Xml.XmlDocument"></see> to which this node belongs.</summary>
			<returns>The XmlDocument to which this node belongs.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentFragment.ParentNode">
			<summary>Gets the parent of this node (for nodes that can have parents).</summary>
			<returns>The parent of this node.For XmlDocumentFragment nodes, this property is always null.</returns>
		</member>
		<member name="T:System.Xml.XmlDocumentType">
			<summary>Represents the document type declaration.</summary>
		</member>
		<member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting. </param>
		</member>
		<member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. For XmlDocumentType nodes, this method has no effect.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlDocumentType.Entities">
			<summary>Gets the collection of <see cref="T:System.Xml.XmlEntity"></see> nodes declared in the document type declaration.</summary>
			<returns>An <see cref="T:System.Xml.XmlNamedNodeMap"></see> containing the XmlEntity nodes. The returned XmlNamedNodeMap is read-only.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentType.InternalSubset">
			<summary>Gets the value of the document type definition (DTD) internal subset on the DOCTYPE declaration.</summary>
			<returns>The DTD internal subset on the DOCTYPE. If there is no DTD internal subset, String.Empty is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentType.IsReadOnly">
			<summary>Gets a value indicating whether the node is read-only.</summary>
			<returns>true if the node is read-only; otherwise false.Because DocumentType nodes are read-only, this property always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentType.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For DocumentType nodes, this property returns the name of the document type.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentType.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For DocumentType nodes, this property returns the name of the document type.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentType.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>For DocumentType nodes, this value is XmlNodeType.DocumentType.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentType.Notations">
			<summary>Gets the collection of <see cref="T:System.Xml.XmlNotation"></see> nodes present in the document type declaration.</summary>
			<returns>An <see cref="T:System.Xml.XmlNamedNodeMap"></see> containing the XmlNotation nodes. The returned XmlNamedNodeMap is read-only.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentType.PublicId">
			<summary>Gets the value of the public identifier on the DOCTYPE declaration.</summary>
			<returns>The public identifier on the DOCTYPE. If there is no public identifier, String.Empty is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlDocumentType.SystemId">
			<summary>Gets the value of the system identifier on the DOCTYPE declaration.</summary>
			<returns>The system identifier on the DOCTYPE. If there is no system identifier, String.Empty is returned.</returns>
		</member>
		<member name="T:System.Xml.XmlElement">
			<summary>Represents an element.</summary>
		</member>
		<member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself (and its attributes if the node is an XmlElement). </param>
		</member>
		<member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
			<summary>Returns the value for the attribute with the specified name.</summary>
			<returns>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</returns>
			<param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the Name property of the matching node. </param>
		</member>
		<member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
			<summary>Returns the value for the attribute with the specified local name and namespace URI.</summary>
			<returns>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</returns>
			<param name="localName">The local name of the attribute to retrieve. </param>
			<param name="namespaceURI">The namespace URI of the attribute to retrieve. </param>
		</member>
		<member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
			<summary>Returns the XmlAttribute with the specified name.</summary>
			<returns>The specified XmlAttribute or null if a matching attribute was not found.</returns>
			<param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the Name property of the matching node. </param>
		</member>
		<member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
			<summary>Returns the <see cref="T:System.Xml.XmlAttribute"></see> with the specified local name and namespace URI.</summary>
			<returns>The specified XmlAttribute or null if a matching attribute was not found.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
			<summary>Returns an <see cref="T:System.Xml.XmlNodeList"></see> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlElement.Name"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlNodeList"></see> containing a list of all matching nodes.</returns>
			<param name="name">The name tag to match. This is a qualified name. It is matched against the Name property of the matching node. The asterisk (*) is a special value that matches all tags. </param>
		</member>
		<member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
			<summary>Returns an <see cref="T:System.Xml.XmlNodeList"></see> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlElement.LocalName"></see> and <see cref="P:System.Xml.XmlElement.NamespaceURI"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlNodeList"></see> containing a list of all matching nodes.</returns>
			<param name="localName">The local name to match. The asterisk (*) is a special value that matches all tags. </param>
			<param name="namespaceURI">The namespace URI to match. </param>
		</member>
		<member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
			<summary>Determines whether the current node has an attribute with the specified name.</summary>
			<returns>true if the current node has the specified attribute; otherwise, false.</returns>
			<param name="name">The name of the attribute to find. This is a qualified name. It is matched against the Name property of the matching node. </param>
		</member>
		<member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
			<summary>Determines whether the current node has an attribute with the specified local name and namespace URI.</summary>
			<returns>true if the current node has the specified attribute; otherwise, false.</returns>
			<param name="localName">The local name of the attribute to find. </param>
			<param name="namespaceURI">The namespace URI of the attribute to find. </param>
		</member>
		<member name="M:System.Xml.XmlElement.RemoveAll">
			<summary>Removes all specified attributes and children of the current node. Default attributes are not removed.</summary>
		</member>
		<member name="M:System.Xml.XmlElement.RemoveAllAttributes">
			<summary>Removes all specified attributes from the element. Default attributes are not removed.</summary>
		</member>
		<member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
			<summary>Removes an attribute by name.</summary>
			<param name="name">The name of the attribute to remove.This is a qualified name. It is matched against the Name property of the matching node. </param>
			<exception cref="T:System.ArgumentException">The node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
			<summary>Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</summary>
			<param name="localName">The local name of the attribute to remove. </param>
			<param name="namespaceURI">The namespace URI of the attribute to remove. </param>
			<exception cref="T:System.ArgumentException">The node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
			<summary>Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).</summary>
			<returns>The attribute node removed or null if there is no node at the given index.</returns>
			<param name="i">The index of the node to remove. The first node has index 0. </param>
		</member>
		<member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
			<summary>Removes the specified <see cref="T:System.Xml.XmlAttribute"></see>.</summary>
			<returns>The removed XmlAttribute or null if oldAttr is not an attribute node of the XmlElement.</returns>
			<param name="oldAttr">The XmlAttribute node to remove. If the removed attribute has a default value, it is immediately replaced. </param>
			<exception cref="T:System.ArgumentException">This node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
			<summary>Removes the <see cref="T:System.Xml.XmlAttribute"></see> specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</summary>
			<returns>The removed XmlAttribute or null if the XmlElement does not have a matching attribute node.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
			<exception cref="T:System.ArgumentException">This node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
			<summary>Sets the value of the attribute with the specified name.</summary>
			<param name="name">The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components. </param>
			<param name="value">The value to set for the attribute. </param>
			<exception cref="T:System.Xml.XmlException">The specified name contains an invalid character. </exception>
			<exception cref="T:System.ArgumentException">The node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
			<summary>Sets the value of the attribute with the specified local name and namespace URI.</summary>
			<returns>The attribute value.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
			<param name="value">The value to set for the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
			<summary>Adds the specified <see cref="T:System.Xml.XmlAttribute"></see>.</summary>
			<returns>If the attribute replaces an existing attribute with the same name, the old XmlAttribute is returned; otherwise, null is returned.</returns>
			<param name="newAttr">The XmlAttribute node to add to the attribute collection for this element. </param>
			<exception cref="T:System.ArgumentException">The newAttr was created from a different document than the one that created this node. Or this node is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">The newAttr is already an attribute of another XmlElement object. You must explicitly clone XmlAttribute nodes to re-use them in other XmlElement objects. </exception>
		</member>
		<member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
			<summary>Adds the specified <see cref="T:System.Xml.XmlAttribute"></see>.</summary>
			<returns>The XmlAttribute to add.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the current node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlElement.Attributes">
			<summary>Gets an <see cref="T:System.Xml.XmlAttributeCollection"></see> containing the list of attributes for this node.</summary>
			<returns><see cref="T:System.Xml.XmlAttributeCollection"></see> containing the list of attributes for this node.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.HasAttributes">
			<summary>Gets a boolean value indicating whether the current node has any attributes.</summary>
			<returns>true if the current node has attributes; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.InnerText">
			<summary>Gets or sets the concatenated values of the node and all its children.</summary>
			<returns>The concatenated values of the node and all its children.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.InnerXml">
			<summary>Gets or sets the markup representing just the children of this node.</summary>
			<returns>The markup of the children of this node.</returns>
			<exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
		</member>
		<member name="P:System.Xml.XmlElement.IsEmpty">
			<summary>Gets or sets the tag format of the element.</summary>
			<returns>Returns true if the element is to be serialized in the short tag format "&lt;item/&gt;"; false for the long format "&lt;item&gt;&lt;/item&gt;".When setting this property, if set to true, the children of the element are removed and the element is serialized in the short tag format. If set to false, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.This property is a Microsoft extension to the Document Object Model (DOM).</returns>
		</member>
		<member name="P:System.Xml.XmlElement.LocalName">
			<summary>Gets the local name of the current node.</summary>
			<returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>The qualified name of the node. For XmlElement nodes, this is the tag name of the element.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.NamespaceURI">
			<summary>Gets the namespace URI of this node.</summary>
			<returns>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.NextSibling">
			<summary>Gets the <see cref="T:System.Xml.XmlNode"></see> immediately following this element.</summary>
			<returns>The XmlNode immediately following this element.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>The node type. For XmlElement nodes, this value is XmlNodeType.Element.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.OwnerDocument">
			<summary>Gets the <see cref="T:System.Xml.XmlDocument"></see> to which this node belongs.</summary>
			<returns>The XmlDocument to which this element belongs.</returns>
		</member>
		<member name="P:System.Xml.XmlElement.Prefix">
			<summary>Gets or sets the namespace prefix of this node.</summary>
			<returns>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</returns>
			<exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The namespaceURI of this node is null.The specified prefix is "xml" and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace. </exception>
			<exception cref="T:System.ArgumentException">This node is read-only </exception>
		</member>
		<member name="P:System.Xml.XmlElement.SchemaInfo">
			<summary>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</summary>
			<returns>An T:System.Xml.Schema.IXmlSchemaInfoms-help://AstroNS2/cpref/html/T_System_Xml_Schema_IXmlSchemaInfo.htmobject containing the post schema validation infoset of this node.</returns>
		</member>
		<member name="T:System.Xml.XmlEntity">
			<summary>Represents an entity declaration, such as &lt;!ENTITY... &gt;.</summary>
		</member>
		<member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node. Entity nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlEntity"></see> object throws an exception.</summary>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
			<exception cref="T:System.InvalidOperationException">Entity nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlEntity"></see> object throws an exception.</exception>
		</member>
		<member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. For XmlEntity nodes, this method has no effect.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. For XmlEntity nodes, this method has no effect.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlEntity.BaseURI">
			<summary>Gets the base Uniform Resource Identifier (URI) of the current node.</summary>
			<returns>The location from which the node was loaded.</returns>
		</member>
		<member name="P:System.Xml.XmlEntity.InnerText">
			<summary>Gets the concatenated values of the entity node and all its children.</summary>
			<returns>The concatenated values of the node and all its children.</returns>
			<exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
		</member>
		<member name="P:System.Xml.XmlEntity.InnerXml">
			<summary>Gets the markup representing the children of this node.</summary>
			<returns>For XmlEntity nodes, String.Empty is returned.</returns>
			<exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
		</member>
		<member name="P:System.Xml.XmlEntity.IsReadOnly">
			<summary>Gets a value indicating whether the node is read-only.</summary>
			<returns>true if the node is read-only; otherwise false.Because XmlEntity nodes are read-only, this property always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlEntity.LocalName">
			<summary>Gets the name of the node without the namespace prefix.</summary>
			<returns>For XmlEntity nodes, this property returns the name of the entity.</returns>
		</member>
		<member name="P:System.Xml.XmlEntity.Name">
			<summary>Gets the name of the node.</summary>
			<returns>The name of the entity.</returns>
		</member>
		<member name="P:System.Xml.XmlEntity.NodeType">
			<summary>Gets the type of the node.</summary>
			<returns>The node type. For XmlEntity nodes, the value is XmlNodeType.Entity.</returns>
		</member>
		<member name="P:System.Xml.XmlEntity.NotationName">
			<summary>Gets the name of the optional NDATA attribute on the entity declaration.</summary>
			<returns>The name of the NDATA attribute. If there is no NDATA, null is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlEntity.OuterXml">
			<summary>Gets the markup representing this node and all its children.</summary>
			<returns>For XmlEntity nodes, String.Empty is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlEntity.PublicId">
			<summary>Gets the value of the public identifier on the entity declaration.</summary>
			<returns>The public identifier on the entity. If there is no public identifier, null is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlEntity.SystemId">
			<summary>Gets the value of the system identifier on the entity declaration.</summary>
			<returns>The system identifier on the entity. If there is no system identifier, null is returned.</returns>
		</member>
		<member name="T:System.Xml.XmlEntityReference">
			<summary>Represents an entity reference node.</summary>
		</member>
		<member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For XmlEntityReference nodes, this method always returns an entity reference node with no children. The replacement text is set when the node is inserted into a parent. </param>
		</member>
		<member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlEntityReference.BaseURI">
			<summary>Gets the base Uniform Resource Identifier (URI) of the current node.</summary>
			<returns>The location from which the node was loaded.</returns>
		</member>
		<member name="P:System.Xml.XmlEntityReference.IsReadOnly">
			<summary>Gets a value indicating whether the node is read-only.</summary>
			<returns>true if the node is read-only; otherwise false.Because XmlEntityReference nodes are read-only, this property always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlEntityReference.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For XmlEntityReference nodes, this property returns the name of the entity referenced.</returns>
		</member>
		<member name="P:System.Xml.XmlEntityReference.Name">
			<summary>Gets the name of the node.</summary>
			<returns>The name of the entity referenced.</returns>
		</member>
		<member name="P:System.Xml.XmlEntityReference.NodeType">
			<summary>Gets the type of the node.</summary>
			<returns>The node type. For XmlEntityReference nodes, the value is XmlNodeType.EntityReference.</returns>
		</member>
		<member name="P:System.Xml.XmlEntityReference.Value">
			<summary>Gets or sets the value of the node.</summary>
			<returns>The value of the node. For XmlEntityReference nodes, this property returns null.</returns>
			<exception cref="T:System.ArgumentException">Node is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">Setting the property. </exception>
		</member>
		<member name="T:System.Xml.XmlException">
			<summary>Returns detailed information about the last exception.</summary>
		</member>
		<member name="M:System.Xml.XmlException.#ctor">
			<summary>Initializes a new instance of the XmlException class.</summary>
		</member>
		<member name="M:System.Xml.XmlException.#ctor(System.String)">
			<summary>Initializes a new instance of the XmlException class with a specified error message.</summary>
			<param name="message">The error description. </param>
		</member>
		<member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the XmlException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects.</summary>
			<param name="context">The StreamingContext object containing the context information. </param>
			<param name="info">The SerializationInfo object containing all the properties of an XmlException. </param>
		</member>
		<member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the XmlException class.</summary>
			<param name="message">The description of the error condition. </param>
			<param name="innerException">The <see cref="T:System.Exception"></see> that threw the XmlException, if any. This value can be null. </param>
		</member>
		<member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
			<summary>Initializes a new instance of the XmlException class with the specified message, inner exception, line number, and line position.</summary>
			<param name="message">The error description. </param>
			<param name="linePosition">The line position indicating where the error occurred. </param>
			<param name="innerException">The exception that is the cause of the current exception. This value can be null. </param>
			<param name="lineNumber">The line number indicating where the error occurred. </param>
		</member>
		<member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Streams all the XmlException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
			<param name="context">The StreamingContext object. </param>
			<param name="info">The SerializationInfo object. </param>
		</member>
		<member name="P:System.Xml.XmlException.LineNumber">
			<summary>Gets the line number indicating where the error occurred.</summary>
			<returns>The line number indicating where the error occurred.</returns>
		</member>
		<member name="P:System.Xml.XmlException.LinePosition">
			<summary>Gets the line position indicating where the error occurred.</summary>
			<returns>The line position indicating where the error occurred.</returns>
		</member>
		<member name="P:System.Xml.XmlException.Message">
			<summary>Gets a message describing the current exception.</summary>
			<returns>The error message that explains the reason for the exception.</returns>
		</member>
		<member name="P:System.Xml.XmlException.SourceUri">
			<summary>Gets the location of the XML file.</summary>
			<returns>The source URI for the XML data. If there is no source URI, this property returns an empty string.</returns>
		</member>
		<member name="T:System.Xml.XmlImplementation">
			<summary>Defines the context for a set of <see cref="T:System.Xml.XmlDocument"></see> objects.</summary>
		</member>
		<member name="M:System.Xml.XmlImplementation.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlImplementation"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlImplementation"></see> class with the <see cref="T:System.Xml.XmlNameTable"></see> specified.</summary>
			<param name="nt">An <see cref="T:System.Xml.XmlNameTable"></see> object.</param>
		</member>
		<member name="M:System.Xml.XmlImplementation.CreateDocument">
			<summary>Creates a new <see cref="T:System.Xml.XmlDocument"></see>.</summary>
			<returns>The new XmlDocument object.</returns>
		</member>
		<member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
			<summary>Tests if the Document Object Model (DOM) implementation implements a specific feature.</summary>
			<returns>true if the feature is implemented in the specified version; otherwise, false.The following table shows the combinations that cause HasFeature to return true.strFeature strVersion XML 1.0 XML 2.0 </returns>
			<param name="strFeature">The package name of the feature to test. This name is not case-sensitive. </param>
			<param name="strVersion">This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </param>
		</member>
		<member name="T:System.Xml.XmlLinkedNode">
			<summary>Gets the node immediately preceding or following this node.</summary>
		</member>
		<member name="P:System.Xml.XmlLinkedNode.NextSibling">
			<summary>Gets the node immediately following this node.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> immediately following this node or null if one does not exist.</returns>
		</member>
		<member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
			<summary>Gets the node immediately preceding this node.</summary>
			<returns>The preceding <see cref="T:System.Xml.XmlNode"></see> or null if one does not exist.</returns>
		</member>
		<member name="T:System.Xml.XmlNamedNodeMap">
			<summary>Represents a collection of nodes that can be accessed by name or index.</summary>
		</member>
		<member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
			<summary>Provides support for the "foreach" style iteration over the collection of nodes in the XmlNamedNodeMap.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
			<summary>Retrieves an <see cref="T:System.Xml.XmlNode"></see> specified by name.</summary>
			<returns>An XmlNode with the specified name or null if a matching node is not found.</returns>
			<param name="name">The qualified name of the node to retrieve. It is matched against the <see cref="P:System.Xml.XmlNode.Name"></see> property of the matching node. </param>
		</member>
		<member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
			<summary>Retrieves a node with the matching <see cref="P:System.Xml.XmlNode.LocalName"></see> and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlNode"></see> with the matching local name and namespace URI or null if a matching node was not found.</returns>
			<param name="localName">The local name of the node to retrieve. </param>
			<param name="namespaceURI">The namespace Uniform Resource Identifier (URI) of the node to retrieve. </param>
		</member>
		<member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
			<summary>Retrieves the node at the specified index in the XmlNamedNodeMap.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> at the specified index. If index is less than 0 or greater than or equal to the <see cref="P:System.Xml.XmlNamedNodeMap.Count"></see> property, null is returned.</returns>
			<param name="index">The index position of the node to retrieve from the XmlNamedNodeMap. The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is <see cref="P:System.Xml.XmlNamedNodeMap.Count"></see> -1. </param>
		</member>
		<member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
			<summary>Removes the node from the XmlNamedNodeMap.</summary>
			<returns>The XmlNode removed from this XmlNamedNodeMap or null if a matching node was not found.</returns>
			<param name="name">The qualified name of the node to remove. The name is matched against the <see cref="P:System.Xml.XmlNode.Name"></see> property of the matching node. </param>
		</member>
		<member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
			<summary>Removes a node with the matching <see cref="P:System.Xml.XmlNode.LocalName"></see> and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> removed or null if a matching node was not found.</returns>
			<param name="localName">The local name of the node to remove. </param>
			<param name="namespaceURI">The namespace URI of the node to remove. </param>
		</member>
		<member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
			<summary>Adds an <see cref="T:System.Xml.XmlNode"></see> using its <see cref="P:System.Xml.XmlNode.Name"></see> property </summary>
			<returns>If the node replaces an existing node with the same name, the old node is returned; otherwise, null is returned.</returns>
			<param name="node">An XmlNode to store in the XmlNamedNodeMap. If a node with that name is already present in the map, it is replaced by the new one. </param>
			<exception cref="T:System.ArgumentException">The node was created from a different <see cref="T:System.Xml.XmlDocument"></see> than the one that created the XmlNamedNodeMap; or the XmlNamedNodeMap is read-only. </exception>
		</member>
		<member name="P:System.Xml.XmlNamedNodeMap.Count">
			<summary>Gets the number of nodes in the XmlNamedNodeMap.</summary>
			<returns>The number of nodes.</returns>
		</member>
		<member name="T:System.Xml.XmlNamespaceManager">
			<summary>Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces. </summary>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNamespaceManager"></see> class with the specified <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="nameTable">The <see cref="T:System.Xml.XmlNameTable"></see> to use. </param>
			<exception cref="T:System.NullReferenceException">null is passed to the constructor </exception>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
			<summary>Adds the given namespace to the collection.</summary>
			<param name="uri">The namespace to add. </param>
			<param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.If the <see cref="T:System.Xml.XmlNamespaceManager"></see> will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the <see cref="T:System.Xml.XmlNamespaceManager"></see>, refer to the <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)"></see> and <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)"></see> methods.</param>
			<exception cref="T:System.ArgumentException">The value for prefix is "xml" or "xmlns". </exception>
			<exception cref="T:System.ArgumentNullException">The value for prefix or uri is null. </exception>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
			<summary>Returns an enumerator to use to iterate through the namespaces in the <see cref="T:System.Xml.XmlNamespaceManager"></see>.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see> containing the prefixes stored by the <see cref="T:System.Xml.XmlNamespaceManager"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
			<summary>Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.</summary>
			<returns>A <see cref="T:System.Collections.Specialized.StringDictionary"></see> object containing a collection of namespace and prefix pairs currently in scope.</returns>
			<param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value that specifies the type of namespace nodes to return.</param>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
			<summary>Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.</summary>
			<returns>true if there is a namespace defined; otherwise, false.</returns>
			<param name="prefix">The prefix of the namespace you want to find. </param>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
			<summary>Gets the namespace URI for the specified prefix.</summary>
			<returns>Returns the namespace URI for prefix or null if there is no mapped namespace. The returned string is atomized.For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable"></see>.</returns>
			<param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty. </param>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
			<summary>Finds the prefix declared for the given namespace URI.</summary>
			<returns>The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then null is returned.</returns>
			<param name="uri">The namespace to resolve for the prefix. </param>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.PopScope">
			<summary>Pops a namespace scope off the stack.</summary>
			<returns>true if there are namespace scopes left on the stack; false if there are no more namespaces to pop.</returns>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.PushScope">
			<summary>Pushes a namespace scope onto the stack.</summary>
		</member>
		<member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
			<summary>Removes the given namespace for the given prefix.</summary>
			<param name="uri">The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. </param>
			<param name="prefix">The prefix for the namespace </param>
			<exception cref="T:System.ArgumentNullException">The value of prefix or uri is null. </exception>
		</member>
		<member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
			<summary>Gets the namespace URI for the default namespace.</summary>
			<returns>Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.</returns>
		</member>
		<member name="P:System.Xml.XmlNamespaceManager.NameTable">
			<summary>Gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this object.</summary>
			<returns>The <see cref="T:System.Xml.XmlNameTable"></see> used by this object.</returns>
		</member>
		<member name="T:System.Xml.XmlNamespaceScope">
			<summary>Defines the namespace scope.</summary>
		</member>
		<member name="F:System.Xml.XmlNamespaceScope.All">
			<summary>All namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
		</member>
		<member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
			<summary>All namespaces defined in the scope of the current node, excluding the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
		</member>
		<member name="F:System.Xml.XmlNamespaceScope.Local">
			<summary>All namespaces that are defined locally at the current node.</summary>
		</member>
		<member name="T:System.Xml.XmlNameTable">
			<summary>Table of atomized string objects.</summary>
		</member>
		<member name="M:System.Xml.XmlNameTable.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNameTable"></see> class. </summary>
		</member>
		<member name="M:System.Xml.XmlNameTable.Add(System.String)">
			<summary>When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.</summary>
			<returns>The new atomized string or the existing one if it already exists.</returns>
			<param name="array">The name to add. </param>
			<exception cref="T:System.ArgumentNullException">array is null. </exception>
		</member>
		<member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
			<summary>When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.</summary>
			<returns>The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.</returns>
			<param name="offset">Zero-based index into the array specifying the first character of the name. </param>
			<param name="array">The character array containing the name to add. </param>
			<param name="length">The number of characters in the name. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">length &lt; 0. </exception>
			<exception cref="T:System.IndexOutOfRangeException">0 &gt; offset-or- offset &gt;= array.Length -or- length &gt; array.Length The above conditions do not cause an exception to be thrown if length =0. </exception>
		</member>
		<member name="M:System.Xml.XmlNameTable.Get(System.String)">
			<summary>When overridden in a derived class, gets the atomized string containing the same value as the specified string.</summary>
			<returns>The atomized string or null if the string has not already been atomized.</returns>
			<param name="array">The name to look up. </param>
			<exception cref="T:System.ArgumentNullException">array is null. </exception>
		</member>
		<member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
			<summary>When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.</summary>
			<returns>The atomized string or null if the string has not already been atomized. If length is zero, String.Empty is returned.</returns>
			<param name="offset">The zero-based index into the array specifying the first character of the name. </param>
			<param name="array">The character array containing the name to look up. </param>
			<param name="length">The number of characters in the name. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">length &lt; 0. </exception>
			<exception cref="T:System.IndexOutOfRangeException">0 &gt; offset-or- offset &gt;= array.Length -or- length &gt; array.Length The above conditions do not cause an exception to be thrown if length =0. </exception>
		</member>
		<member name="T:System.Xml.XmlNode">
			<summary>Represents a single node in the XML document.</summary>
		</member>
		<member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
			<summary>Adds the specified node to the end of the list of child nodes, of this node.</summary>
			<returns>The node added.</returns>
			<param name="newChild">The node to add. If it is a <see cref="T:System.Xml.XmlDocumentFragment"></see>, the entire contents of the document fragment are moved into the child list of this node. </param>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.This node is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.Clone">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
		</member>
		<member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
			<summary>When overridden in a derived class, creates a duplicate of the node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
			<exception cref="T:System.InvalidOperationException">Calling this method on a node type that cannot be cloned. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.CreateNavigator">
			<summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator"></see> for navigating this object.</summary>
			<returns>An XPathNavigator object. The XPathNavigator is positioned on the node from which the method was called. It is not positioned on the root of the document.</returns>
		</member>
		<member name="M:System.Xml.XmlNode.GetEnumerator">
			<summary>Provides support for the for each style iteration over the nodes in the XmlNode.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
			<summary>Looks up the closest xmlns declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration.</summary>
			<returns>The namespace URI of the specified prefix.</returns>
			<param name="prefix">Prefix whose namespace URI you want to find. </param>
		</member>
		<member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
			<summary>Looks up the closest xmlns declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration.</summary>
			<returns>The prefix for the specified namespace URI.</returns>
			<param name="namespaceURI">Namespace URI whose prefix you want to find. </param>
		</member>
		<member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
			<summary>Inserts the specified node immediately after the specified reference node.</summary>
			<returns>The node being inserted.</returns>
			<param name="newChild">The XmlNode to insert. </param>
			<param name="refChild">The XmlNode that is the reference node. The newNode is placed after the refNode. </param>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.The refChild is not a child of this node.This node is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
			<summary>Inserts the specified node immediately before the specified reference node.</summary>
			<returns>The node being inserted.</returns>
			<param name="newChild">The XmlNode to insert. </param>
			<param name="refChild">The XmlNode that is the reference node. The newChild is placed before this node. </param>
			<exception cref="T:System.InvalidOperationException">The current node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.The refChild is not a child of this node.This node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.Normalize">
			<summary>Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a "normal" form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes.</summary>
		</member>
		<member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
			<summary>Adds the specified node to the beginning of the list of child nodes for this node.</summary>
			<returns>The node added.</returns>
			<param name="newChild">The node to add. If it is an <see cref="T:System.Xml.XmlDocumentFragment"></see>, the entire contents of the document fragment are moved into the child list of this node. </param>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.This node is read-only. </exception>
			<exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.RemoveAll">
			<summary>Removes all the child nodes and/or attributes of the current node.</summary>
		</member>
		<member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
			<summary>Removes specified child node.</summary>
			<returns>The node removed.</returns>
			<param name="oldChild">The node being removed. </param>
			<exception cref="T:System.ArgumentException">The oldChild is not a child of this node. Or this node is read-only. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
			<summary>Replaces the child node oldChild with newChild node.</summary>
			<returns>The node replaced.</returns>
			<param name="newChild">The new node to put in the child list. </param>
			<param name="oldChild">The node being replaced in the list. </param>
			<exception cref="T:System.ArgumentException">The newChild was created from a different document than the one that created this node.This node is read-only.The oldChild is not a child of this node. </exception>
			<exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the newChild node.The newChild is an ancestor of this node. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
			<summary>Selects a list of nodes matching the XPath expression.</summary>
			<returns>An <see cref="T:System.Xml.XmlNodeList"></see> containing a collection of nodes matching the XPath query. The XmlNodeList should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNodeList, and vice versa.</returns>
			<param name="xpath">The XPath expression. </param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
			<summary>Selects a list of nodes matching the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlNodeList"></see> containing a collection of nodes matching the XPath query. The XmlNodeList should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNodeList, and vice versa.</returns>
			<param name="nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager"></see> to use for resolving namespaces for prefixes in the XPath expression. </param>
			<param name="xpath">The XPath expression. </param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the XmlNamespaceManager. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
			<summary>Selects the first XmlNode that matches the XPath expression.</summary>
			<returns>The first XmlNode that matches the XPath query or null if no matching node is found. The XmlNode should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNode, and vice versa.</returns>
			<param name="xpath">The XPath expression. </param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
			<summary>Selects the first XmlNode that matches the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager"></see>.</summary>
			<returns>The first XmlNode that matches the XPath query or null if no matching node is found. The XmlNode should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNode, and vice versa.</returns>
			<param name="nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager"></see> to use for resolving namespaces for prefixes in the XPath expression. </param>
			<param name="xpath">The XPath expression. </param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the XmlNamespaceManager. </exception>
		</member>
		<member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
			<summary>Test if the DOM implementation implements a specific feature.</summary>
			<returns>true if the feature is implemented in the specified version; otherwise, false. The following table describes the combinations that return true.Feature Version XML 1.0 XML 2.0 </returns>
			<param name="feature">The package name of the feature to test. This name is not case-sensitive. </param>
			<param name="version">This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </param>
		</member>
		<member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
			<summary>When overridden in a derived class, saves all the child nodes of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
			<summary>When overridden in a derived class, saves the current node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlNode.Attributes">
			<summary>Gets an <see cref="T:System.Xml.XmlAttributeCollection"></see> containing the attributes of this node.</summary>
			<returns>An XmlAttributeCollection containing the attributes of the node.If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns null.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.BaseURI">
			<summary>Gets the base URI of the current node.</summary>
			<returns>The location from which the node was loaded or String.Empty if the node has no base URI.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.ChildNodes">
			<summary>Gets all the child nodes of the node.</summary>
			<returns>An <see cref="T:System.Xml.XmlNodeList"></see> that contains all the child nodes of the node.If there are no child nodes, this property returns an empty <see cref="T:System.Xml.XmlNodeList"></see>.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.FirstChild">
			<summary>Gets the first child of the node.</summary>
			<returns>The first child of the node. If there is no such node, null is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.HasChildNodes">
			<summary>Gets a value indicating whether this node has any child nodes.</summary>
			<returns>true if the node has child nodes; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.InnerText">
			<summary>Gets or sets the concatenated values of the node and all its child nodes.</summary>
			<returns>The concatenated values of the node and all its child nodes.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.InnerXml">
			<summary>Gets or sets the markup representing only the child nodes of this node.</summary>
			<returns>The markup of the child nodes of this node.</returns>
			<exception cref="T:System.InvalidOperationException">Setting this property on a node that cannot have child nodes. </exception>
			<exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
		</member>
		<member name="P:System.Xml.XmlNode.IsReadOnly">
			<summary>Gets a value indicating whether the node is read-only.</summary>
			<returns>true if the node is read-only; otherwise false.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.Item(System.String)">
			<summary>Gets the first child element with the specified <see cref="P:System.Xml.XmlNode.Name"></see>.</summary>
			<returns>The first <see cref="T:System.Xml.XmlElement"></see> that matches the specified name.</returns>
			<param name="name">The qualified name of the element to retrieve. </param>
		</member>
		<member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
			<summary>Gets the first child element with the specified <see cref="P:System.Xml.XmlNode.LocalName"></see> and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.</summary>
			<returns>The first <see cref="T:System.Xml.XmlElement"></see> with the matching localname and ns.</returns>
			<param name="localname">The local name of the element. </param>
			<param name="ns">The namespace URI of the element. </param>
		</member>
		<member name="P:System.Xml.XmlNode.LastChild">
			<summary>Gets the last child of the node.</summary>
			<returns>The last child of the node. If there is no such node, null is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.LocalName">
			<summary>When overridden in a derived class, gets the local name of the node.</summary>
			<returns>The name of the node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlNode.NodeType"></see> of the node: Type Name Attribute The local name of the attribute. CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType The document type name. Element The local name of the element. Entity The name of the entity. EntityReference The name of the entity referenced. Notation The notation name. ProcessingInstruction The target of the processing instruction. Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
		</member>
		<member name="P:System.Xml.XmlNode.Name">
			<summary>When overridden in a derived class, gets the qualified name of the node.</summary>
			<returns>The qualified name of the node. The name returned is dependent on the <see cref="P:System.Xml.XmlNode.NodeType"></see> of the node: Type Name Attribute The qualified name of the attribute. CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType The document type name. Element The qualified name of the element. Entity The name of the entity. EntityReference The name of the entity referenced. Notation The notation name. ProcessingInstruction The target of the processing instruction. Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
		</member>
		<member name="P:System.Xml.XmlNode.NamespaceURI">
			<summary>Gets the namespace URI of this node.</summary>
			<returns>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.NextSibling">
			<summary>Gets the node immediately following this node.</summary>
			<returns>The next XmlNode. If there is no next node, null is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.NodeType">
			<summary>When overridden in a derived class, gets the type of the current node.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlNodeType"></see> values.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.OuterXml">
			<summary>Gets the markup representing this node and all its child nodes.</summary>
			<returns>The markup containing this node and all its child nodes.OuterXml does not return default attributes.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.OwnerDocument">
			<summary>Gets the <see cref="T:System.Xml.XmlDocument"></see> to which this node belongs.</summary>
			<returns>The <see cref="T:System.Xml.XmlDocument"></see> to which this node belongs.If the node is an <see cref="T:System.Xml.XmlDocument"></see> (NodeType equals XmlNodeType.Document), this property returns null.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.ParentNode">
			<summary>Gets the parent of this node (for nodes that can have parents).</summary>
			<returns>The XmlNode that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is null. For all other nodes, the value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType"></see> of the node. The following table describes the possible return values for the ParentNode property.NodeType Return Value of ParentNode Attribute, Document, DocumentFragment, Entity, Notation Returns null; these nodes do not have parents. CDATA Returns the element or entity reference containing the CDATA section. Comment Returns the element, entity reference, document type, or document containing the comment. DocumentType Returns the document node. Element Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node. EntityReference Returns the element, attribute, or entity reference containing the entity reference. ProcessingInstruction Returns the document, element, document type, or entity reference containing the processing instruction. Text Returns the parent element, attribute, or entity reference containing the text node. </returns>
		</member>
		<member name="P:System.Xml.XmlNode.Prefix">
			<summary>Gets or sets the namespace prefix of this node.</summary>
			<returns>The namespace prefix of this node. For example, Prefix is bk for the element &lt;bk:book&gt;. If there is no prefix, this property returns String.Empty.</returns>
			<exception cref="T:System.ArgumentException">This node is read-only. </exception>
			<exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The specified prefix is "xml" and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".This node is an attribute and the specified prefix is "xmlns" and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/ ".This node is an attribute and the qualifiedName of this node is "xmlns". </exception>
		</member>
		<member name="P:System.Xml.XmlNode.PreviousSibling">
			<summary>Gets the node immediately preceding this node.</summary>
			<returns>The preceding XmlNode. If there is no preceding node, null is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlNode.SchemaInfo">
			<summary>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</summary>
			<returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo"></see> object containing the post schema validation infoset of this node</returns>
		</member>
		<member name="P:System.Xml.XmlNode.Value">
			<summary>Gets or sets the value of the node.</summary>
			<returns>The value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType"></see> of the node: Type Value Attribute The value of the attribute. CDATASection The content of the CDATA Section. Comment The content of the comment. Document null. DocumentFragment null. DocumentType null. Element null. You can use the <see cref="P:System.Xml.XmlElement.InnerText"></see> or <see cref="P:System.Xml.XmlElement.InnerXml"></see> properties to access the value of the element node. Entity null. EntityReference null. Notation null. ProcessingInstruction The entire content excluding the target. Text The content of the text node. SignificantWhitespace The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs. Whitespace The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs. XmlDeclaration The content of the declaration (that is, everything between &lt;?xml and ?&gt;). </returns>
			<exception cref="T:System.InvalidOperationException">Setting the value of a node that is not supposed to have a value (for example, an Element node). </exception>
			<exception cref="T:System.ArgumentException">Setting the value of a node that is read-only. </exception>
		</member>
		<member name="T:System.Xml.XmlNodeChangedAction">
			<summary>Specifies the type of node change.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeChangedAction.Change">
			<summary>A node value is being changed.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeChangedAction.Insert">
			<summary>A node is being inserted in the tree.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeChangedAction.Remove">
			<summary>A node is being removed from the tree.</summary>
		</member>
		<member name="T:System.Xml.XmlNodeChangedEventArgs">
			<summary>Provides data for the <see cref="E:System.Xml.XmlDocument.NodeChanged"></see>, <see cref="E:System.Xml.XmlDocument.NodeChanging"></see>, <see cref="E:System.Xml.XmlDocument.NodeInserted"></see>, <see cref="E:System.Xml.XmlDocument.NodeInserting"></see>, <see cref="E:System.Xml.XmlDocument.NodeRemoved"></see> and <see cref="E:System.Xml.XmlDocument.NodeRemoving"></see> events.</summary>
		</member>
		<member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNodeChangedEventArgs"></see> class.</summary>
			<param name="oldValue">The old value of the <see cref="T:System.Xml.XmlNode"></see> that generated the event.</param>
			<param name="oldParent">The old parent <see cref="T:System.Xml.XmlNode"></see> of the <see cref="T:System.Xml.XmlNode"></see> that generated the event.</param>
			<param name="node">The <see cref="T:System.Xml.XmlNode"></see> that generated the event.</param>
			<param name="newValue">The new value of the <see cref="T:System.Xml.XmlNode"></see> that generated the event.</param>
			<param name="newParent">The new parent <see cref="T:System.Xml.XmlNode"></see> of the <see cref="T:System.Xml.XmlNode"></see> that generated the event.</param>
			<param name="action">The <see cref="T:System.Xml.XmlNodeChangedAction"></see>.</param>
		</member>
		<member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
			<summary>Gets a value indicating what type of node change event is occurring.</summary>
			<returns>An XmlNodeChangedAction value describing the node change event.XmlNodeChangedAction Value Description Insert A node has been or will be inserted. Remove A node has been or will be removed. Change A node has been or will be changed. The Action value does not differentiate between when the event occurred (before or after). You can create separate event handlers to handle both instances.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
			<summary>Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode"></see> after the operation completes.</summary>
			<returns>The value of the ParentNode after the operation completes. This property returns null if the node is being removed.For attribute nodes this property returns the <see cref="P:System.Xml.XmlAttribute.OwnerElement"></see>.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
			<summary>Gets the new value of the node.</summary>
			<returns>The new value of the node. This property returns null if the node is neither an attribute nor a text node, or if the node is being removed.If called in a <see cref="E:System.Xml.XmlDocument.NodeChanging"></see> event, NewValue returns the value of the node if the change is successful. If called in a <see cref="E:System.Xml.XmlDocument.NodeChanged"></see> event, NewValue returns the current value of the node.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
			<summary>Gets the <see cref="T:System.Xml.XmlNode"></see> that is being added, removed or changed.</summary>
			<returns>The XmlNode that is being added, removed or changed; this property never returns null.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
			<summary>Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode"></see> before the operation began.</summary>
			<returns>The value of the ParentNode before the operation began. This property returns null if the node did not have a parent.For attribute nodes this property returns the <see cref="P:System.Xml.XmlAttribute.OwnerElement"></see>.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
			<summary>Gets the original value of the node.</summary>
			<returns>The original value of the node. This property returns null if the node is neither an attribute nor a text node, or if the node is being inserted.If called in a <see cref="E:System.Xml.XmlDocument.NodeChanging"></see> event, OldValue returns the current value of the node that will be replaced if the change is successful. If called in a <see cref="E:System.Xml.XmlDocument.NodeChanged"></see> event, OldValue returns the value of node prior to the change.</returns>
		</member>
		<member name="T:System.Xml.XmlNodeChangedEventHandler">
			<summary>Represents the method that handles <see cref="E:System.Xml.XmlDocument.NodeChanged"></see>, <see cref="E:System.Xml.XmlDocument.NodeChanging"></see>, <see cref="E:System.Xml.XmlDocument.NodeInserted"></see>, <see cref="E:System.Xml.XmlDocument.NodeInserting"></see>, <see cref="E:System.Xml.XmlDocument.NodeRemoved"></see> and <see cref="E:System.Xml.XmlDocument.NodeRemoving"></see> events.</summary>
		</member>
		<member name="T:System.Xml.XmlNodeList">
			<summary>Represents an ordered collection of nodes.</summary>
		</member>
		<member name="M:System.Xml.XmlNodeList.GetEnumerator">
			<summary>Provides a simple "foreach" style iteration over the collection of nodes in the XmlNodeList.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
			<summary>Retrieves a node at the given index.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.</returns>
			<param name="index">Zero-based index into the list of nodes. </param>
		</member>
		<member name="P:System.Xml.XmlNodeList.Count">
			<summary>Gets the number of nodes in the XmlNodeList.</summary>
			<returns>The number of nodes.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
			<summary>Retrieves a node at the given index.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.</returns>
			<param name="i">Zero-based index into the list of nodes. </param>
		</member>
		<member name="T:System.Xml.XmlNodeOrder">
			<summary>Describes the document order of a node compared to a second node.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeOrder.After">
			<summary>The current node of this navigator is after the current node of the supplied navigator.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeOrder.Before">
			<summary>The current node of this navigator is before the current node of the supplied navigator.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeOrder.Same">
			<summary>The two navigators are positioned on the same node.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeOrder.Unknown">
			<summary>The node positions cannot be determined in document order, relative to each other. This could occur if the two nodes reside in different trees.</summary>
		</member>
		<member name="T:System.Xml.XmlNodeReader">
			<summary>Represents a reader that provides fast, non-cached forward only access to XML data in an <see cref="T:System.Xml.XmlNode"></see>.</summary>
		</member>
		<member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
			<summary>Creates an instance of the XmlNodeReader class using the specified <see cref="T:System.Xml.XmlNode"></see>.</summary>
			<param name="node">The XmlNode you want to read. </param>
		</member>
		<member name="M:System.Xml.XmlNodeReader.Close">
			<summary>Changes the <see cref="P:System.Xml.XmlNodeReader.ReadState"></see> to Closed.</summary>
		</member>
		<member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
			<summary>Gets the value of the attribute with the specified index.</summary>
			<returns>The value of the specified attribute.</returns>
			<param name="attributeIndex">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
			<exception cref="T:System.ArgumentOutOfRangeException">The i parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlNodeReader.AttributeCount"></see>. </exception>
		</member>
		<member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
			<summary>Gets the value of the attribute with the specified name.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
			<summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
			<param name="name">The local name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
			<summary>Resolves a namespace prefix in the current element's scope.</summary>
			<returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
			<param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
		</member>
		<member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
			<summary>Moves to the attribute with the specified index.</summary>
			<param name="attributeIndex">The index of the attribute. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">The i parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount"></see>. </exception>
		</member>
		<member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
			<summary>Moves to the attribute with the specified name.</summary>
			<returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
			<summary>Moves to the attribute with the specified local name and namespace URI.</summary>
			<returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
			<param name="name">The local name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlNodeReader.MoveToElement">
			<summary>Moves to the element that contains the current attribute node.</summary>
			<returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
		</member>
		<member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
			<summary>Moves to the first attribute.</summary>
			<returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
		</member>
		<member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
			<summary>Moves to the next attribute.</summary>
			<returns>true if there is a next attribute; false if there are no more attributes.</returns>
		</member>
		<member name="M:System.Xml.XmlNodeReader.Read">
			<summary>Reads the next node from the stream.</summary>
			<returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
		</member>
		<member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
			<summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
			<returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
		</member>
		<member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)"></see> is not supported on the current node.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)"></see>  is not supported on the current node.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the element and decodes the Base64 content.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.Xml.XmlException">The element contains mixed content.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the element and decodes the BinHex content.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.Xml.XmlException">The element contains mixed content.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlNodeReader.ReadString">
			<summary>Reads the contents of an element or text node as a string.</summary>
			<returns>The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.Note: The text node can be either an element or an attribute text node.</returns>
		</member>
		<member name="M:System.Xml.XmlNodeReader.ResolveEntity">
			<summary>Resolves the entity reference for EntityReference nodes.</summary>
			<exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node. </exception>
		</member>
		<member name="M:System.Xml.XmlNodeReader.Skip">
			<summary>Skips the children of the current node.</summary>
		</member>
		<member name="P:System.Xml.XmlNodeReader.AttributeCount">
			<summary>Gets the number of attributes on the current node.</summary>
			<returns>The number of attributes on the current node. This number includes default attributes.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.BaseURI">
			<summary>Gets the base URI of the current node.</summary>
			<returns>The base URI of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
			<summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlNodeReader"></see> implements the binary content read methods.</summary>
			<returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlNodeReader"></see> class always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
			<summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
			<returns>true if the reader can parse and resolve entities; otherwise, false. XmlNodeReader always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.Depth">
			<summary>Gets the depth of the current node in the XML document.</summary>
			<returns>The depth of the current node in the XML document.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.EOF">
			<summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
			<returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.HasAttributes">
			<summary>Gets a value indicating whether the current node has any attributes.</summary>
			<returns>true if the current node has attributes; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.HasValue">
			<summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlNodeReader.Value"></see>.</summary>
			<returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.IsDefault">
			<summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</summary>
			<returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
			<summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
			<returns>true if the current node is an element (<see cref="P:System.Xml.XmlNodeReader.NodeType"></see> equals XmlNodeType.Element) and it ends with /&gt;; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.LocalName">
			<summary>Gets the local name of the current node.</summary>
			<returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.Name">
			<summary>Gets the qualified name of the current node.</summary>
			<returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlNodeReader.NodeType"></see> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.NamespaceURI">
			<summary>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
			<returns>The namespace URI of the current node; otherwise an empty string.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.NameTable">
			<summary>Gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.</summary>
			<returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlNodeType"></see> values representing the type of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.Prefix">
			<summary>Gets the namespace prefix associated with the current node.</summary>
			<returns>The namespace prefix associated with the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.ReadState">
			<summary>Gets the state of the reader.</summary>
			<returns>One of the <see cref="T:System.Xml.ReadState"></see> values.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.SchemaInfo">
			<summary>Gets the schema information that has been assigned to the current node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo"></see> object containing the schema information for the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.Value">
			<summary>Gets the text value of the current node.</summary>
			<returns>The value returned depends on the <see cref="P:System.Xml.XmlNodeReader.NodeType"></see> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.XmlLang">
			<summary>Gets the current xml:lang scope.</summary>
			<returns>The current xml:lang scope.</returns>
		</member>
		<member name="P:System.Xml.XmlNodeReader.XmlSpace">
			<summary>Gets the current xml:space scope.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlSpace"></see> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
		</member>
		<member name="T:System.Xml.XmlNodeType">
			<summary>Specifies the type of node.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.Attribute">
			<summary>An attribute (for example, id='123' ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.CDATA">
			<summary>A CDATA section (for example, &lt;![CDATA[my escaped text]]&gt; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.Comment">
			<summary>A comment (for example, &lt;!-- my comment --&gt; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.Document">
			<summary>A document object that, as the root of the document tree, provides access to the entire XML document.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.DocumentFragment">
			<summary>A document fragment.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.DocumentType">
			<summary>The document type declaration, indicated by the following tag (for example, &lt;!DOCTYPE...&gt; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.Element">
			<summary>An element (for example, &lt;item&gt; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.EndElement">
			<summary>An end element tag (for example, &lt;/item&gt; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.EndEntity">
			<summary>Returned when XmlReader gets to the end of the entity replacement as a result of a call to <see cref="M:System.Xml.XmlReader.ResolveEntity"></see>.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.Entity">
			<summary>An entity declaration (for example, &lt;!ENTITY...&gt; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.EntityReference">
			<summary>A reference to an entity (for example, &amp;num; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.None">
			<summary>This is returned by the <see cref="T:System.Xml.XmlReader"></see> if a Read method has not been called.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.Notation">
			<summary>A notation in the document type declaration (for example, &lt;!NOTATION...&gt; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
			<summary>A processing instruction (for example, &lt;?pi test?&gt; ).</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
			<summary>White space between markup in a mixed content model or white space within the xml:space="preserve" scope.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.Text">
			<summary>The text content of a node.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.Whitespace">
			<summary>White space between markup.</summary>
		</member>
		<member name="F:System.Xml.XmlNodeType.XmlDeclaration">
			<summary>The XML declaration (for example, &lt;?xml version='1.0'?&gt; ).</summary>
		</member>
		<member name="T:System.Xml.XmlNotation">
			<summary>Represents a notation declaration, such as &lt;!NOTATION... &gt;.</summary>
		</member>
		<member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node. Notation nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlNotation"></see> object throws an exception.</summary>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
			<exception cref="T:System.InvalidOperationException">Notation nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlNotation"></see> object throws an exception.</exception>
		</member>
		<member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. This method has no effect on XmlNotation nodes.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. This method has no effect on XmlNotation nodes.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlNotation.InnerXml">
			<summary>Gets the markup representing the children of this node.</summary>
			<returns>For XmlNotation nodes, String.Empty is returned.</returns>
			<exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
		</member>
		<member name="P:System.Xml.XmlNotation.IsReadOnly">
			<summary>Gets a value indicating whether the node is read-only.</summary>
			<returns>true if the node is read-only; otherwise false.Because XmlNotation nodes are read-only, this property always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlNotation.LocalName">
			<summary>Gets the name of the current node without the namespace prefix.</summary>
			<returns>For XmlNotation nodes, this property returns the name of the notation.</returns>
		</member>
		<member name="P:System.Xml.XmlNotation.Name">
			<summary>Gets the name of the current node.</summary>
			<returns>The name of the notation.</returns>
		</member>
		<member name="P:System.Xml.XmlNotation.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>The node type. For XmlNotation nodes, the value is XmlNodeType.Notation.</returns>
		</member>
		<member name="P:System.Xml.XmlNotation.OuterXml">
			<summary>Gets the markup representing this node and all its children.</summary>
			<returns>For XmlNotation nodes, String.Empty is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlNotation.PublicId">
			<summary>Gets the value of the public identifier on the notation declaration.</summary>
			<returns>The public identifier on the notation. If there is no public identifier, null is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlNotation.SystemId">
			<summary>Gets the value of the system identifier on the notation declaration.</summary>
			<returns>The system identifier on the notation. If there is no system identifier, null is returned.</returns>
		</member>
		<member name="T:System.Xml.XmlOutputMethod">
			<summary>Specifies the method used to serialize the <see cref="T:System.Xml.XmlWriter"></see> output.</summary>
		</member>
		<member name="F:System.Xml.XmlOutputMethod.AutoDetect">
			<summary>Use the XSLT rules to choose between the <see cref="F:System.Xml.XmlOutputMethod.Xml"></see> and <see cref="F:System.Xml.XmlOutputMethod.Html"></see> output methods at runtime.</summary>
		</member>
		<member name="F:System.Xml.XmlOutputMethod.Html">
			<summary>Serialize according to the HTML rules specified by XSLT.</summary>
		</member>
		<member name="F:System.Xml.XmlOutputMethod.Text">
			<summary>Serialize text blocks only.</summary>
		</member>
		<member name="F:System.Xml.XmlOutputMethod.Xml">
			<summary>Serialize according to the XML 1.0 rules.</summary>
		</member>
		<member name="T:System.Xml.XmlParserContext">
			<summary>Provides all the context information required by the <see cref="T:System.Xml.XmlReader"></see> to parse an XML fragment.</summary>
		</member>
		<member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
			<summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable"></see>, <see cref="T:System.Xml.XmlNamespaceManager"></see>, xml:lang, and xml:space values.</summary>
			<param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace"></see> value indicating the xml:space scope. </param>
			<param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager"></see> to use for looking up namespace information, or null. </param>
			<param name="nt">The <see cref="T:System.Xml.XmlNameTable"></see> to use to atomize strings. If this is null, the name table used to construct the nsMgr is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable"></see>. </param>
			<param name="xmlLang">The xml:lang scope. </param>
			<exception cref="T:System.Xml.XmlException">nt is not the same XmlNameTable used to construct nsMgr. </exception>
		</member>
		<member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
			<summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable"></see>, <see cref="T:System.Xml.XmlNamespaceManager"></see>, xml:lang, xml:space, and encoding.</summary>
			<param name="enc">An <see cref="T:System.Text.Encoding"></see> object indicating the encoding setting. </param>
			<param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace"></see> value indicating the xml:space scope. </param>
			<param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager"></see> to use for looking up namespace information, or null. </param>
			<param name="nt">The <see cref="T:System.Xml.XmlNameTable"></see> to use to atomize strings. If this is null, the name table used to construct the nsMgr is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable"></see>. </param>
			<param name="xmlLang">The xml:lang scope. </param>
			<exception cref="T:System.Xml.XmlException">nt is not the same XmlNameTable used to construct nsMgr. </exception>
		</member>
		<member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
			<summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable"></see>, <see cref="T:System.Xml.XmlNamespaceManager"></see>, base URI, xml:lang, xml:space, and document type values.</summary>
			<param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded). </param>
			<param name="pubId">The public identifier. </param>
			<param name="sysId">The system identifier. </param>
			<param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace"></see> value indicating the xml:space scope. </param>
			<param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager"></see> to use for looking up namespace information, or null. </param>
			<param name="nt">The <see cref="T:System.Xml.XmlNameTable"></see> to use to atomize strings. If this is null, the name table used to construct the nsMgr is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable"></see>. </param>
			<param name="docTypeName">The name of the document type declaration. </param>
			<param name="internalSubset">The internal DTD subset. </param>
			<param name="xmlLang">The xml:lang scope. </param>
			<exception cref="T:System.Xml.XmlException">nt is not the same XmlNameTable used to construct nsMgr. </exception>
		</member>
		<member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
			<summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable"></see>, <see cref="T:System.Xml.XmlNamespaceManager"></see>, base URI, xml:lang, xml:space, encoding, and document type values.</summary>
			<param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded). </param>
			<param name="enc">An <see cref="T:System.Text.Encoding"></see> object indicating the encoding setting. </param>
			<param name="pubId">The public identifier. </param>
			<param name="sysId">The system identifier. </param>
			<param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace"></see> value indicating the xml:space scope. </param>
			<param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager"></see> to use for looking up namespace information, or null. </param>
			<param name="nt">The <see cref="T:System.Xml.XmlNameTable"></see> to use to atomize strings. If this is null, the name table used to construct the nsMgr is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable"></see>. </param>
			<param name="docTypeName">The name of the document type declaration. </param>
			<param name="internalSubset">The internal DTD subset. </param>
			<param name="xmlLang">The xml:lang scope. </param>
			<exception cref="T:System.Xml.XmlException">nt is not the same XmlNameTable used to construct nsMgr. </exception>
		</member>
		<member name="P:System.Xml.XmlParserContext.BaseURI">
			<summary>Gets or sets the base URI.</summary>
			<returns>The base URI to use to resolve the DTD file.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.DocTypeName">
			<summary>Gets or sets the name of the document type declaration.</summary>
			<returns>The name of the document type declaration.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.Encoding">
			<summary>Gets or sets the encoding type.</summary>
			<returns>An <see cref="T:System.Text.Encoding"></see> object indicating the encoding type.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.InternalSubset">
			<summary>Gets or sets the internal DTD subset.</summary>
			<returns>The internal DTD subset. For example, this property returns everything between the square brackets &lt;!DOCTYPE doc [...]&gt;.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.NamespaceManager">
			<summary>Gets or sets the <see cref="T:System.Xml.XmlNamespaceManager"></see>.</summary>
			<returns>The XmlNamespaceManager.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.NameTable">
			<summary>Gets the <see cref="T:System.Xml.XmlNameTable"></see> used to atomize strings. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<returns>The XmlNameTable.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.PublicId">
			<summary>Gets or sets the public identifier.</summary>
			<returns>The public identifier.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.SystemId">
			<summary>Gets or sets the system identifier.</summary>
			<returns>The system identifier.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.XmlLang">
			<summary>Gets or sets the current xml:lang scope.</summary>
			<returns>The current xml:lang scope. If there is no xml:lang in scope, String.Empty is returned.</returns>
		</member>
		<member name="P:System.Xml.XmlParserContext.XmlSpace">
			<summary>Gets or sets the current xml:space scope.</summary>
			<returns>An <see cref="T:System.Xml.XmlSpace"></see> value indicating the xml:space scope.</returns>
		</member>
		<member name="T:System.Xml.XmlProcessingInstruction">
			<summary>Represents a processing instruction, which XML defines to keep processor-specific information in the text of the document.</summary>
		</member>
		<member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The duplicate node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
		</member>
		<member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. Because ProcessingInstruction nodes do not have children, this method has no effect.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlProcessingInstruction.Data">
			<summary>Gets or sets the content of the processing instruction, excluding the target.</summary>
			<returns>The content of the processing instruction, excluding the target.</returns>
		</member>
		<member name="P:System.Xml.XmlProcessingInstruction.InnerText">
			<summary>Gets or sets the concatenated values of the node and all its children.</summary>
			<returns>The concatenated values of the node and all its children.</returns>
		</member>
		<member name="P:System.Xml.XmlProcessingInstruction.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For processing instruction nodes, this property returns the target of the processing instruction.</returns>
		</member>
		<member name="P:System.Xml.XmlProcessingInstruction.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For processing instruction nodes, this property returns the target of the processing instruction.</returns>
		</member>
		<member name="P:System.Xml.XmlProcessingInstruction.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>For XmlProcessingInstruction nodes, this value is XmlNodeType.ProcessingInstruction.</returns>
		</member>
		<member name="P:System.Xml.XmlProcessingInstruction.Target">
			<summary>Gets the target of the processing instruction.</summary>
			<returns>The target of the processing instruction.</returns>
		</member>
		<member name="P:System.Xml.XmlProcessingInstruction.Value">
			<summary>Gets or sets the value of the node.</summary>
			<returns>The entire content of the processing instruction, excluding the target.</returns>
			<exception cref="T:System.ArgumentException">Node is read-only. </exception>
		</member>
		<member name="T:System.Xml.XmlQualifiedName">
			<summary>Represents an XML qualified name.</summary>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName"></see> class with the specified name.</summary>
			<param name="name">The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName"></see> object. </param>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName"></see> class with the specified name and namespace.</summary>
			<param name="name">The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName"></see> object. </param>
			<param name="ns">The namespace for the <see cref="T:System.Xml.XmlQualifiedName"></see> object. </param>
		</member>
		<member name="F:System.Xml.XmlQualifiedName.Empty">
			<summary>Provides an empty <see cref="T:System.Xml.XmlQualifiedName"></see>.</summary>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
			<summary>Determines whether the specified <see cref="T:System.Xml.XmlQualifiedName"></see> object is equal to the current <see cref="T:System.Xml.XmlQualifiedName"></see> object. </summary>
			<returns>true if the two are the same instance object; otherwise, false.</returns>
			<param name="other">The <see cref="T:System.Xml.XmlQualifiedName"></see> to compare. </param>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.GetHashCode">
			<summary>Returns the hash code for the <see cref="T:System.Xml.XmlQualifiedName"></see>.</summary>
			<returns>A hash code for this object.</returns>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
			<summary>Compares two <see cref="T:System.Xml.XmlQualifiedName"></see> objects.</summary>
			<returns>true if the two objects have the same name and namespace values; otherwise, false.</returns>
			<param name="a">An <see cref="T:System.Xml.XmlQualifiedName"></see> to compare. </param>
			<param name="b">An <see cref="T:System.Xml.XmlQualifiedName"></see> to compare. </param>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
			<summary>Compares two <see cref="T:System.Xml.XmlQualifiedName"></see> objects.</summary>
			<returns>true if the name and namespace values for the two objects differ; otherwise, false.</returns>
			<param name="a">An <see cref="T:System.Xml.XmlQualifiedName"></see> to compare. </param>
			<param name="b">An <see cref="T:System.Xml.XmlQualifiedName"></see> to compare. </param>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.ToString">
			<summary>Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName"></see>.</summary>
			<returns>The string value of the <see cref="T:System.Xml.XmlQualifiedName"></see> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.</returns>
		</member>
		<member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
			<summary>Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName"></see>.</summary>
			<returns>The string value of the <see cref="T:System.Xml.XmlQualifiedName"></see> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.</returns>
			<param name="name">The name of the object. </param>
			<param name="ns">The namespace of the object. </param>
		</member>
		<member name="P:System.Xml.XmlQualifiedName.IsEmpty">
			<summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlQualifiedName"></see> is empty.</summary>
			<returns>true if name and namespace are empty strings; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlQualifiedName.Name">
			<summary>Gets a string representation of the qualified name of the <see cref="T:System.Xml.XmlQualifiedName"></see>.</summary>
			<returns>A string representation of the qualified name or String.Empty if a name is not defined for the object.</returns>
		</member>
		<member name="P:System.Xml.XmlQualifiedName.Namespace">
			<summary>Gets a string representation of the namespace of the <see cref="T:System.Xml.XmlQualifiedName"></see>.</summary>
			<returns>A string representation of the namespace or String.Empty if a namespace is not defined for the object.</returns>
		</member>
		<member name="T:System.Xml.XmlReader">
			<summary>Represents a reader that provides fast, non-cached, forward-only access to XML data.</summary>
		</member>
		<member name="M:System.Xml.XmlReader.#ctor">
			<summary>Initializes a new instance of the XmlReader class.</summary>
		</member>
		<member name="M:System.Xml.XmlReader.Close">
			<summary>When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState"></see> to Closed.</summary>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance using the specified stream.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object used to read the data contained in the stream. </returns>
			<param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader"></see> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
			<exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader"></see> does not have sufficient permissions to access the location of the XML data.</exception>
			<exception cref="T:System.ArgumentNullException">The input value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.String)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance with specified URI.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read the XML data. </returns>
			<param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlUrlResolver"></see> class is used to convert the path to a canonical data representation.</param>
			<exception cref="T:System.IO.FileNotFoundException">The file identified by the URI does not exist.</exception>
			<exception cref="T:System.ArgumentNullException">The inputUri value is null.</exception>
			<exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader"></see> does not have sufficient permissions to access the location of the XML data.</exception>
			<exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance with the specified <see cref="T:System.IO.TextReader"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read the XML data.</returns>
			<param name="input">The <see cref="T:System.IO.TextReader"></see> from which to read the XML data. Because a <see cref="T:System.IO.TextReader"></see> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader"></see> to decode the data stream.</param>
			<exception cref="T:System.ArgumentNullException">The input value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance with the specified stream and <see cref="T:System.Xml.XmlReaderSettings"></see> object.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read the XML data.</returns>
			<param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader"></see> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see> instance. This value can be null.</param>
			<exception cref="T:System.ArgumentNullException">The input value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
			<summary>Creates a new instance with the specified URI and <see cref="T:System.Xml.XmlReaderSettings"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read XML data.</returns>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see> instance. This value can be null.</param>
			<param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver"></see> object on the <see cref="T:System.Xml.XmlReaderSettings"></see> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver"></see> is null, a new <see cref="T:System.Xml.XmlUrlResolver"></see> object is used.</param>
			<exception cref="T:System.ArgumentNullException">The inputUri value is null.</exception>
			<exception cref="T:System.IO.FileNotFoundException">The file specified by the URI cannot be found.</exception>
			<exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance using the specified <see cref="T:System.IO.TextReader"></see> and <see cref="T:System.Xml.XmlReaderSettings"></see> objects.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read XML data.</returns>
			<param name="input">The <see cref="T:System.IO.TextReader"></see> from which to read the XML data. Because a <see cref="T:System.IO.TextReader"></see> returns a stream of Unicode characters, he encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader"></see> to decode the data stream</param>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see>. This value can be null.</param>
			<exception cref="T:System.ArgumentNullException">The input value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance with the specified <see cref="T:System.Xml.XmlReader"></see> and <see cref="T:System.Xml.XmlReaderSettings"></see> objects.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object that is wrapped around the specified <see cref="T:System.Xml.XmlReader"></see> object.</returns>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> object that you wish to use as the underlying reader.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see> instance.The conformance level of the <see cref="T:System.Xml.XmlReaderSettings"></see> object must either match the conformance level of the underlying reader, or it must be set to <see cref="F:System.Xml.ConformanceLevel.Auto"></see>.</param>
			<exception cref="T:System.InvalidOperationException">If the <see cref="T:System.Xml.XmlReaderSettings"></see> object specifies a conformance level that is not consistent with conformance level of the underlying reader.-or-The underlying <see cref="T:System.Xml.XmlReader"></see> is in an <see cref="F:System.Xml.ReadState.Error"></see> or <see cref="F:System.Xml.ReadState.Closed"></see> state.</exception>
			<exception cref="T:System.ArgumentNullException">The reader value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance using the specified stream, base URI, and <see cref="T:System.Xml.XmlReaderSettings"></see> object.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read XML data.</returns>
			<param name="baseUri">The base URI for the entity or document being read. This value can be null.The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</param>
			<param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader"></see> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see> instance. This value can be null.</param>
			<exception cref="T:System.ArgumentNullException">The input value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance using the specified stream, <see cref="T:System.Xml.XmlReaderSettings"></see>, and <see cref="T:System.Xml.XmlParserContext"></see> objects.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read XML data.</returns>
			<param name="inputContext">The <see cref="T:System.Xml.XmlParserContext"></see> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable"></see> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
			<param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader"></see> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see> instance. This value can be null.</param>
			<exception cref="T:System.ArgumentNullException">The input value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance using the specified URI, <see cref="T:System.Xml.XmlReaderSettings"></see>, and <see cref="T:System.Xml.XmlParserContext"></see> objects.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read XML data.</returns>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see> instance. This value can be null.</param>
			<param name="inputContext">The <see cref="T:System.Xml.XmlParserContext"></see> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable"></see> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
			<param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver"></see> object on the <see cref="T:System.Xml.XmlReaderSettings"></see> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver"></see> is null, a new <see cref="T:System.Xml.XmlUrlResolver"></see> object is used.</param>
			<exception cref="T:System.ArgumentNullException">The inputUri value is null.</exception>
			<exception cref="T:System.IO.FileNotFoundException">The file specified by the URI cannot be found.</exception>
			<exception cref="T:System.ArgumentException">The <see cref="P:System.Xml.XmlReaderSettings.NameTable"></see>  and <see cref="P:System.Xml.XmlParserContext.NameTable"></see> properties both contain values. (Only one of these NameTable properties can be set and used).</exception>
			<exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader"></see> does not have sufficient permissions to access the location of the XML data.</exception>
			<exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance using the specified <see cref="T:System.IO.TextReader"></see>, <see cref="T:System.Xml.XmlReaderSettings"></see>, and base URI.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read XML data.</returns>
			<param name="baseUri">The base URI for the entity or document being read. This value can be null.The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</param>
			<param name="input">The <see cref="T:System.IO.TextReader"></see> from which to read the XML data. Because a <see cref="T:System.IO.TextReader"></see> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader"></see> to decode the data stream.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see> instance. This value can be null.</param>
			<exception cref="T:System.ArgumentNullException">The input value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
			<summary>Creates a new <see cref="T:System.Xml.XmlReader"></see> instance using the specified <see cref="T:System.IO.TextReader"></see>, <see cref="T:System.Xml.XmlReaderSettings"></see>, and <see cref="T:System.Xml.XmlParserContext"></see> objects.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object to read XML data.</returns>
			<param name="inputContext">The <see cref="T:System.Xml.XmlParserContext"></see> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable"></see> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
			<param name="input">The <see cref="T:System.IO.TextReader"></see> from which to read the XML data. Because a <see cref="T:System.IO.TextReader"></see> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader"></see> to decode the data stream.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlReader"></see> instance. This value can be null.</param>
			<exception cref="T:System.ArgumentException">The <see cref="P:System.Xml.XmlReaderSettings.NameTable"></see>  and <see cref="P:System.Xml.XmlParserContext.NameTable"></see> properties both contain values. (Only one of these NameTable properties can be set and used).</exception>
			<exception cref="T:System.ArgumentNullException">The input value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
			<summary>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlReader"></see> and optionally releases the managed resources. </summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
			<summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
			<returns>The value of the specified attribute. This method does not move the reader.</returns>
			<param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
		</member>
		<member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
			<summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
			<summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.</returns>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
			<param name="name">The local name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlReader.IsName(System.String)">
			<summary>Gets a value indicating whether the string argument is a valid XML name.</summary>
			<returns>true if the name is valid; otherwise, false.</returns>
			<param name="str">The name to validate. </param>
		</member>
		<member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
			<summary>Gets a value indicating whether or not the string argument is a valid XML name token.</summary>
			<returns>true if it is a valid name token; otherwise false.</returns>
			<param name="str">The name token to validate. </param>
		</member>
		<member name="M:System.Xml.XmlReader.IsStartElement">
			<summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent"></see> and tests if the current content node is a start tag or empty element tag.</summary>
			<returns>true if <see cref="M:System.Xml.XmlReader.MoveToContent"></see> finds a start tag or empty element tag; false if a node type other than XmlNodeType.Element was found.</returns>
			<exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
			<summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent"></see> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.Name"></see> property of the element found matches the given argument.</summary>
			<returns>true if the resulting node is an element and the Name property matches the specified string. false if a node type other than XmlNodeType.Element was found or if the element Name property does not match the specified string.</returns>
			<param name="name">The string matched against the Name property of the element found. </param>
			<exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
			<summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent"></see> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see> properties of the element found match the given strings.</summary>
			<returns>true if the resulting node is an element. false if a node type other than XmlNodeType.Element was found or if the LocalName and NamespaceURI properties of the element do not match the specified strings.</returns>
			<param name="localname">The string to match against the LocalName property of the element found. </param>
			<param name="ns">The string to match against the NamespaceURI property of the element found. </param>
			<exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
			<summary>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</summary>
			<returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
			<param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
		</member>
		<member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
			<summary>When overridden in a derived class, moves to the attribute with the specified index.</summary>
			<param name="i">The index of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
			<summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.</summary>
			<returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
			<summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.</summary>
			<returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
			<param name="name">The local name of the attribute. </param>
			<param name="ns">The namespace URI of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlReader.MoveToContent">
			<summary>Checks whether the current node is a content (non-white space text, CDATA, Element, EndElement, EntityReference, or EndEntity) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: ProcessingInstruction, DocumentType, Comment, Whitespace, or SignificantWhitespace.</summary>
			<returns>The <see cref="P:System.Xml.XmlReader.NodeType"></see> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.</returns>
			<exception cref="T:System.Xml.XmlException">Incorrect XML encountered in the input stream. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.MoveToElement">
			<summary>When overridden in a derived class, moves to the element that contains the current attribute node.</summary>
			<returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
		</member>
		<member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
			<summary>When overridden in a derived class, moves to the first attribute.</summary>
			<returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
		</member>
		<member name="M:System.Xml.XmlReader.MoveToNextAttribute">
			<summary>When overridden in a derived class, moves to the next attribute.</summary>
			<returns>true if there is a next attribute; false if there are no more attributes.</returns>
		</member>
		<member name="M:System.Xml.XmlReader.Read">
			<summary>When overridden in a derived class, reads the next node from the stream.</summary>
			<returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
			<exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadAttributeValue">
			<summary>When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
			<returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
			<summary>Reads the content as an object of the type specified.</summary>
			<returns>The concatenated text content or attribute value converted to the requested type.</returns>
			<param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName"></see> object to an xs:string.This value can be null.</param>
			<param name="returnType">The type of the value to be returned.</param>
			<exception cref="T:System.ArgumentNullException">The returnType value is null.</exception>
			<exception cref="T:System.FormatException">The content is not in the correct format for the target type.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not a supported node type. See the table below for details.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
			<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)"></see>  is not supported on the current node.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)"></see> is not supported on the current node.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
			<summary>Reads the text content at the current position as a Boolean.</summary>
			<returns>The text content as a <see cref="T:System.Boolean"></see> object.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
			<summary>Reads the text content at the current position as a <see cref="T:System.DateTime"></see> object.</summary>
			<returns>The text content as a <see cref="T:System.DateTime"></see> object.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
			<summary>Reads the text content at the current position as a <see cref="T:System.Decimal"></see> object.</summary>
			<returns>The text content at the current position as a <see cref="T:System.Decimal"></see> object.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsDouble">
			<summary>Reads the text content at the current position as a double-precision floating-point number.</summary>
			<returns>The text content as a double-precision floating-point number.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsFloat">
			<summary>Reads the text content at the current position as a single-precision floating point number.</summary>
			<returns>The text content at the current position as a single-precision floating point number.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsInt">
			<summary>Reads the text content at the current position as a 32-bit signed integer.</summary>
			<returns>The text content as a 32-bit signed integer.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsLong">
			<summary>Reads the text content at the current position as a 64-bit signed integer.</summary>
			<returns>The text content as a 64-bit signed integer.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsObject">
			<summary>Reads the text content at the current position as an <see cref="T:System.Object"></see>.</summary>
			<returns>The text content as the most appropriate common language runtime (CLR) object.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadContentAsString">
			<summary>Reads the text content at the current position as a <see cref="T:System.String"></see> object.</summary>
			<returns>The text content as a <see cref="T:System.String"></see> object.</returns>
			<exception cref="T:System.FormatException">The string format is not valid.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
			<summary>Reads the element content as the requested type.</summary>
			<returns>The element content converted to the requested typed object.</returns>
			<param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object that is used to resolve any namespace prefixes related to type conversion.</param>
			<param name="returnType">The type of the value to be returned.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</summary>
			<returns>The element content converted to the requested typed object.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object that is used to resolve any namespace prefixes related to type conversion.</param>
			<param name="returnType">The type of the value to be returned.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the element and decodes the Base64 content.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the element and decodes the BinHex content.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
			<summary>Reads the current element and returns the contents as a <see cref="T:System.Boolean"></see> object.</summary>
			<returns>The element content as a <see cref="T:System.Boolean"></see> object.</returns>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Boolean"></see> object.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Boolean"></see> object.</summary>
			<returns>The element content as a <see cref="T:System.Boolean"></see> object.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
			<summary>Reads the current element and returns the contents as a <see cref="T:System.DateTime"></see> object.</summary>
			<returns>The element content as a <see cref="T:System.DateTime"></see> object.</returns>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.DateTime"></see> object.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.DateTime"></see> object.</summary>
			<returns>The element contents as a <see cref="T:System.DateTime"></see> object.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
			<summary>Reads the current element and returns the contents as a <see cref="T:System.Decimal"></see> object.</summary>
			<returns>The element content as a <see cref="T:System.Decimal"></see> object.</returns>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal"></see>.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Decimal"></see> object.</summary>
			<returns>The element content as a <see cref="T:System.Decimal"></see> object.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal"></see>.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
			<summary>Reads the current element and returns the contents as a double-precision floating-point number.</summary>
			<returns>The element content as a double-precision floating-point number.</returns>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a double-precision floating-point number.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</summary>
			<returns>The element content as a double-precision floating-point number.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
			<summary>Reads the current element and returns the contents as single-precision floating-point number.</summary>
			<returns>The element content as a single-precision floating point number.</returns>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</summary>
			<returns>The element content as a single-precision floating point number.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
			<summary>Reads the current element and returns the contents as a 32-bit signed integer.</summary>
			<returns>The element content as a 32-bit signed integer.</returns>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</summary>
			<returns>The element content as a 32-bit signed integer.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
			<summary>Reads the current element and returns the contents as a 64-bit signed integer.</summary>
			<returns>The element content as a 64-bit signed integer.</returns>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</summary>
			<returns>The element content as a 64-bit signed integer.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
			<summary>Reads the current element and returns the contents as an <see cref="T:System.Object"></see>.</summary>
			<returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType"></see> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <see cref="T:System.Object"></see>.</summary>
			<returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType"></see> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsString">
			<summary>Reads the current element and returns the contents as a <see cref="T:System.String"></see> object.</summary>
			<returns>The element content as a <see cref="T:System.String"></see> object.</returns>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String"></see> object.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
			<summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.String"></see> object.</summary>
			<returns>The element content as a <see cref="T:System.String"></see> object.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String"></see> object.</exception>
			<exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
			<exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementString">
			<summary>Reads a text-only element.</summary>
			<returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
			<exception cref="T:System.Xml.XmlException">The next content node is not a start tag; or the element found does not contain a simple text value. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
			<summary>Checks that the <see cref="P:System.Xml.XmlReader.Name"></see> property of the element found matches the given string before reading a text-only element.</summary>
			<returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
			<param name="name">The name to check. </param>
			<exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element Name does not match the given argument; or if the element found does not contain a simple text value. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
			<summary>Checks that the <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see> properties of the element found matches the given strings before reading a text-only element.</summary>
			<returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
			<param name="localname">The local name to check. </param>
			<param name="ns">The namespace URI to check. </param>
			<exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element LocalName or NamespaceURI do not match the given arguments; or if the element found does not contain a simple text value. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadEndElement">
			<summary>Checks that the current content node is an end tag and advances the reader to the next node.</summary>
			<exception cref="T:System.Xml.XmlException">The current node is not an end tag or if incorrect XML is encountered in the input stream. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadInnerXml">
			<summary>When overridden in a derived class, reads all the content, including markup, as a string.</summary>
			<returns>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.If the current node is neither an element nor attribute, an empty string is returned.</returns>
			<exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadOuterXml">
			<summary>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</summary>
			<returns>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</returns>
			<exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadStartElement">
			<summary>Checks that the current node is an element and advances the reader to the next node.</summary>
			<exception cref="T:System.Xml.XmlException"><see cref="M:System.Xml.XmlReader.IsStartElement"></see> returns false. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
			<summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.Name"></see> and advances the reader to the next node.</summary>
			<param name="name">The qualified name of the element. </param>
			<exception cref="T:System.Xml.XmlException"><see cref="M:System.Xml.XmlReader.IsStartElement"></see> returns false or if the <see cref="P:System.Xml.XmlReader.Name"></see> of the element does not match the given name. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
			<summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see> and advances the reader to the next node.</summary>
			<param name="localname">The local name of the element. </param>
			<param name="ns">The namespace URI of the element. </param>
			<exception cref="T:System.Xml.XmlException"><see cref="M:System.Xml.XmlReader.IsStartElement"></see> returns false, or the <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see> properties of the element found do not match the given arguments. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadString">
			<summary>When overridden in a derived class, reads the contents of an element or text node as a string.</summary>
			<returns>The contents of the element or an empty string.</returns>
			<exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadSubtree">
			<summary>Returns a new XmlReader instance that can be used to read the current node, and all its descendants.</summary>
			<returns>A new XmlReader instance set to ReadState.Initial. A call to the <see cref="M:System.Xml.XmlReader.Read"></see> method positions the new XmlReader on the node that was current before the call to ReadSubtree method.</returns>
			<exception cref="T:System.InvalidOperationException">The XmlReader is not positioned on an element when this method is called.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
			<summary>Advances the <see cref="T:System.Xml.XmlReader"></see> to the next descendant element with the specified qualified name.</summary>
			<returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader"></see> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType"></see> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)"></see> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader"></see> is not changed.</returns>
			<param name="name">The qualified name of the element you wish to move to.</param>
		</member>
		<member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
			<summary>Advances the <see cref="T:System.Xml.XmlReader"></see> to the next descendant element with the specified local name and namespace URI.</summary>
			<returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader"></see> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType"></see> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader"></see> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)"></see> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader"></see> is not changed.</returns>
			<param name="localName">The local name of the element you wish to move to.</param>
			<param name="namespaceURI">The namespace URI of the element you wish to move to.</param>
		</member>
		<member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
			<summary>Reads until an element with the specified qualified name is found.</summary>
			<returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader"></see> is in an end of file state.</returns>
			<param name="name">The qualified name of the element.</param>
		</member>
		<member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
			<summary>Reads until an element with the specified local name and namespace URI is found.</summary>
			<returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader"></see> is in an end of file state.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
			<summary>Advances the XmlReader to the next sibling element with the specified qualified name.</summary>
			<returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType"></see> is XmlNodeType.EndElement) of the parent element.</returns>
			<param name="name">The qualified name of the sibling element you wish to move to.</param>
		</member>
		<member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
			<summary>Advances the XmlReader to the next sibling element with the specified local name and namespace URI.</summary>
			<returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType"></see> is XmlNodeType.EndElement) of the parent element.</returns>
			<param name="localName">The local name of the sibling element you wish to move to.</param>
			<param name="namespaceURI">The namespace URI of the sibling element you wish to move to</param>
		</member>
		<member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
			<summary>Reads large streams of text embedded in an XML document.</summary>
			<returns>The number of characters read into the buffer. The value zero is returned when there is no more text content.</returns>
			<param name="count">The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
			<param name="buffer">The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
			<param name="index">The offset within the buffer where the <see cref="T:System.Xml.XmlReader"></see> can start to copy the results.</param>
			<exception cref="T:System.InvalidOperationException">The current node does not have a value (<see cref="P:System.Xml.XmlReader.HasValue"></see> is false).</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.Xml.XmlException">The XML data is not well-formed.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer, or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlReader.ResolveEntity">
			<summary>When overridden in a derived class, resolves the entity reference for EntityReference nodes.</summary>
			<exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity"></see> returns false). </exception>
		</member>
		<member name="M:System.Xml.XmlReader.Skip">
			<summary>Skips the children of the current node.</summary>
		</member>
		<member name="M:System.Xml.XmlReader.System.IDisposable.Dispose">
			<summary>For a description of this member, see <see cref="M:System.IDisposable.Dispose"></see>.</summary>
		</member>
		<member name="P:System.Xml.XmlReader.AttributeCount">
			<summary>When overridden in a derived class, gets the number of attributes on the current node.</summary>
			<returns>The number of attributes on the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.BaseURI">
			<summary>When overridden in a derived class, gets the base URI of the current node.</summary>
			<returns>The base URI of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.CanReadBinaryContent">
			<summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader"></see> implements the binary content read methods.</summary>
			<returns>true if the binary content read methods are implemented; otherwise false.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.CanReadValueChunk">
			<summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader"></see> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"></see> method. </summary>
			<returns>true if the <see cref="T:System.Xml.XmlReader"></see> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"></see> method; otherwise false.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.CanResolveEntity">
			<summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
			<returns>true if the reader can parse and resolve entities; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.Depth">
			<summary>When overridden in a derived class, gets the depth of the current node in the XML document.</summary>
			<returns>The depth of the current node in the XML document.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.EOF">
			<summary>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</summary>
			<returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.HasAttributes">
			<summary>Gets a value indicating whether the current node has any attributes.</summary>
			<returns>true if the current node has attributes; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.HasValue">
			<summary>When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value"></see>.</summary>
			<returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.IsDefault">
			<summary>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</summary>
			<returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.IsEmptyElement">
			<summary>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
			<returns>true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType"></see> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.Item(System.Int32)">
			<summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
			<returns>The value of the specified attribute.</returns>
			<param name="i">The index of the attribute. </param>
		</member>
		<member name="P:System.Xml.XmlReader.Item(System.String)">
			<summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
			<summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
			<param name="name">The local name of the attribute. </param>
		</member>
		<member name="P:System.Xml.XmlReader.LocalName">
			<summary>When overridden in a derived class, gets the local name of the current node.</summary>
			<returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.Name">
			<summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
			<returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlReader.NodeType"></see> of the node. The following node types return the listed values. All other node types return an empty string.Node type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
		</member>
		<member name="P:System.Xml.XmlReader.NamespaceURI">
			<summary>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
			<returns>The namespace URI of the current node; otherwise an empty string.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.NameTable">
			<summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.</summary>
			<returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.NodeType">
			<summary>When overridden in a derived class, gets the type of the current node.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlNodeType"></see> values representing the type of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.Prefix">
			<summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
			<returns>The namespace prefix associated with the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.QuoteChar">
			<summary>When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.</summary>
			<returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.ReadState">
			<summary>When overridden in a derived class, gets the state of the reader.</summary>
			<returns>One of the <see cref="T:System.Xml.ReadState"></see> values.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.SchemaInfo">
			<summary>Gets the schema information that has been assigned to the current node as a result of schema validation.</summary>
			<returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo"></see> object containing the schema information for the current node. Schema information can be set on elements, attributes, or on text nodes with a non-null <see cref="P:System.Xml.XmlReader.ValueType"></see> (typed values). If the current node is not one of the above node types, or if the XmlReader instance does not report schema information, this property returns null.If this property is called from an <see cref="T:System.Xml.XmlTextReader"></see> or an <see cref="T:System.Xml.XmlValidatingReader"></see> object, this property always returns null. These XmlReader implementations do not expose schema information through the SchemaInfo property.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.Settings">
			<summary>Gets the <see cref="T:System.Xml.XmlReaderSettings"></see> object used to create this <see cref="T:System.Xml.XmlReader"></see> instance.</summary>
			<returns>The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to create this reader instance. If this reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create"></see> method, this property returns null.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.Value">
			<summary>When overridden in a derived class, gets the text value of the current node.</summary>
			<returns>The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType"></see> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
		</member>
		<member name="P:System.Xml.XmlReader.ValueType">
			<summary>Gets The Common Language Runtime (CLR) type for the current node.</summary>
			<returns>The CLR type that corresponds to the typed value of the node. The default is System.String.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.XmlLang">
			<summary>When overridden in a derived class, gets the current xml:lang scope.</summary>
			<returns>The current xml:lang scope.</returns>
		</member>
		<member name="P:System.Xml.XmlReader.XmlSpace">
			<summary>When overridden in a derived class, gets the current xml:space scope.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlSpace"></see> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
		</member>
		<member name="T:System.Xml.XmlReaderSettings">
			<summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlReader"></see> object created by the <see cref="Overload:System.Xml.XmlReader.Create"></see> method.</summary>
		</member>
		<member name="M:System.Xml.XmlReaderSettings.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlReaderSettings"></see> class.</summary>
		</member>
		<member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
			<summary>Occurs when the reader encounters validation errors.</summary>
		</member>
		<member name="M:System.Xml.XmlReaderSettings.Clone">
			<summary>Creates a copy of the <see cref="T:System.Xml.XmlReaderSettings"></see> instance.</summary>
			<returns>The cloned <see cref="T:System.Xml.XmlReaderSettings"></see> object.</returns>
		</member>
		<member name="M:System.Xml.XmlReaderSettings.Reset">
			<summary>Resets the members of the settings class to their default values.</summary>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
			<summary>Gets or sets a value indicating whether to do character checking.</summary>
			<returns>true to do character checking; otherwise false. The default is true.If the <see cref="T:System.Xml.XmlReader"></see> is processing text data, it always checks that the XML names and text content are valid, regardless of the property setting. Setting <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters"></see> to false turns off character checking for character entity references.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.CloseInput">
			<summary>Gets or sets a value indicating whether the underlying stream or <see cref="T:System.IO.TextReader"></see> should be closed when the reader is closed.</summary>
			<returns>true to close the underlying stream or <see cref="T:System.IO.TextReader"></see> when the reader is closed; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
			<summary>Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlReader"></see> will comply.</summary>
			<returns>One of the <see cref="T:System.Xml.ConformanceLevel"></see> values. The default is ConformanceLevel.Document.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
			<summary>Gets or sets a value indicating whether to ignore comments.</summary>
			<returns>true to ignore comments; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
			<summary>Gets or sets a value indicating whether to ignore processing instructions.</summary>
			<returns>true to ignore processing instructions; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
			<summary>Gets or sets a value indicating whether to ignore insignificant white space.</summary>
			<returns>true to ignore white space; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
			<summary>Gets or sets line number offset of the <see cref="T:System.Xml.XmlReader"></see> object.</summary>
			<returns>The line number offset. The default is 0.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
			<summary>Gets or sets line position offset of the <see cref="T:System.Xml.XmlReader"></see> object.</summary>
			<returns>The line number offset. The default is 0.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.NameTable">
			<summary>Gets or sets the <see cref="T:System.Xml.XmlNameTable"></see> used for atomized string comparisons.</summary>
			<returns>The <see cref="T:System.Xml.XmlNameTable"></see> that stores all the atomized strings used by all <see cref="T:System.Xml.XmlReader"></see> instances created using this <see cref="T:System.Xml.XmlReaderSettings"></see> object.The default is null. The created <see cref="T:System.Xml.XmlReader"></see> instance will use a new empty <see cref="T:System.Xml.NameTable"></see> if this value is null.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
			<summary>Gets or sets a value indicating whether to prohibit document type definition (DTD) processing.</summary>
			<returns>true to prohibit DTD processing; otherwise false. The default is true.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.Schemas">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to use when performing schema validation.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to use. The default is an empty <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
			<summary>Gets or sets a value indicating the schema validation settings. This setting applies to schema validating <see cref="T:System.Xml.XmlReader"></see> objects (<see cref="P:System.Xml.XmlReaderSettings.ValidationType"></see> property set to ValidationType.Schema).</summary>
			<returns>A set of <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags"></see> values. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints"></see> and <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes"></see> are enabled by default. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema"></see>, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation"></see>, and <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings"></see> are disabled by default.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.ValidationType">
			<summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlReader"></see> will perform validation or type assignment when reading.</summary>
			<returns>One of the <see cref="T:System.Xml.ValidationType"></see> values. The default is ValidationType.None.</returns>
		</member>
		<member name="P:System.Xml.XmlReaderSettings.XmlResolver">
			<summary>Sets the <see cref="T:System.Xml.XmlResolver"></see> used to access external documents.</summary>
			<returns>An <see cref="T:System.Xml.XmlResolver"></see> used to access external documents. If set to null, an <see cref="T:System.Xml.XmlException"></see> is thrown when the <see cref="T:System.Xml.XmlReader"></see> tries to access an external resource. The default is a new <see cref="T:System.Xml.XmlUrlResolver"></see> with no credentials.</returns>
		</member>
		<member name="T:System.Xml.XmlResolver">
			<summary>Resolves external XML resources named by a Uniform Resource Identifier (URI).</summary>
		</member>
		<member name="M:System.Xml.XmlResolver.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlResolver"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
			<summary>When overridden in a derived class, maps a URI to an object containing the actual resource.</summary>
			<returns>A System.IO.Stream object or null if a type other than stream is specified.</returns>
			<param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios. </param>
			<param name="ofObjectToReturn">The type of object to return. The current version only returns System.IO.Stream objects. </param>
			<param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"></see>. </param>
			<exception cref="T:System.NullReferenceException">absoluteUri is null. </exception>
			<exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
			<exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
			<exception cref="T:System.Xml.XmlException">ofObjectToReturn is neither null nor a Stream type. </exception>
		</member>
		<member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
			<summary>When overridden in a derived class, resolves the absolute URI from the base and relative URIs.</summary>
			<returns>A <see cref="T:System.Uri"></see> representing the absolute URI or null if the relative URI cannot be resolved.</returns>
			<param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the baseUri value. If relative, it combines with the baseUri to make an absolute URI. </param>
			<param name="baseUri">The base URI used to resolve the relative URI </param>
			<exception cref="T:System.ArgumentException">relativeUri is null</exception>
		</member>
		<member name="P:System.Xml.XmlResolver.Credentials">
			<summary>When overridden in a derived class, sets the credentials used to authenticate Web requests.</summary>
			<returns>An <see cref="T:System.Net.ICredentials"></see> object. If this property is not set, the value defaults to null; that is, the XmlResolver has no user credentials.</returns>
		</member>
		<member name="T:System.Xml.XmlSecureResolver">
			<summary>Helps to secure another implementation of <see cref="T:System.Xml.XmlResolver"></see> by wrapping the <see cref="T:System.Xml.XmlResolver"></see> object and restricting the resources that the underlying <see cref="T:System.Xml.XmlResolver"></see> has access to.</summary>
		</member>
		<member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver"></see> class with the <see cref="T:System.Xml.XmlResolver"></see> and <see cref="T:System.Security.Policy.Evidence"></see> specified.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> wrapped by the <see cref="T:System.Xml.XmlSecureResolver"></see>. </param>
			<param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> used to create the <see cref="T:System.Security.PermissionSet"></see> that will be applied to the underlying <see cref="T:System.Xml.XmlResolver"></see>. The <see cref="T:System.Xml.XmlSecureResolver"></see> calls <see cref="M:System.Security.PermissionSet.PermitOnly"></see> on the created <see cref="T:System.Security.PermissionSet"></see> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)"></see> on the underlying <see cref="T:System.Xml.XmlResolver"></see>. </param>
		</member>
		<member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver"></see> class with the <see cref="T:System.Xml.XmlResolver"></see> and <see cref="T:System.Security.PermissionSet"></see> specified.</summary>
			<param name="permissionSet">The <see cref="T:System.Security.PermissionSet"></see> to apply to the underlying <see cref="T:System.Xml.XmlResolver"></see>. The <see cref="T:System.Xml.XmlSecureResolver"></see> calls <see cref="M:System.Security.PermissionSet.PermitOnly"></see> on the <see cref="T:System.Security.PermissionSet"></see> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)"></see> on the underlying <see cref="T:System.Xml.XmlResolver"></see>. </param>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> wrapped by the <see cref="T:System.Xml.XmlSecureResolver"></see>. </param>
		</member>
		<member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver"></see> class with the <see cref="T:System.Xml.XmlResolver"></see> and URL provided.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> wrapped by the <see cref="T:System.Xml.XmlSecureResolver"></see>. </param>
			<param name="securityUrl">The URL used to create the <see cref="T:System.Security.PermissionSet"></see> that will be applied to the underlying <see cref="T:System.Xml.XmlResolver"></see>. The <see cref="T:System.Xml.XmlSecureResolver"></see> calls <see cref="M:System.Security.PermissionSet.PermitOnly"></see> on the created <see cref="T:System.Security.PermissionSet"></see> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)"></see> on the underlying <see cref="T:System.Xml.XmlResolver"></see>. </param>
		</member>
		<member name="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)">
			<summary>Creates <see cref="T:System.Security.Policy.Evidence"></see> using the supplied URL.</summary>
			<returns>The <see cref="T:System.Security.Policy.Evidence"></see> object generated from the supplied URL as defined by the default policy.</returns>
			<param name="securityUrl">The URL used to create the <see cref="T:System.Security.Policy.Evidence"></see> object. </param>
		</member>
		<member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
			<summary>Securely maps a URI to an object containing the actual resource. This method temporarily sets the <see cref="T:System.Security.PermissionSet"></see> created in the constructor by calling <see cref="M:System.Security.PermissionSet.PermitOnly"></see> before calling GetEntity on the underlying <see cref="T:System.Xml.XmlResolver"></see> to open the resource.</summary>
			<returns>A <see cref="T:System.IO.Stream"></see> object returned by calling GetEntity on the underlying <see cref="T:System.Xml.XmlResolver"></see>. If a type other than stream is specified, null is returned.</returns>
			<param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios. </param>
			<param name="ofObjectToReturn">The type of object to return. The current version only returns <see cref="T:System.IO.Stream"></see> objects. </param>
			<param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)"></see>. </param>
			<exception cref="T:System.NullReferenceException">absoluteUri is null. </exception>
			<exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
			<exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
			<exception cref="T:System.Xml.XmlException">ofObjectToReturn is neither null nor a <see cref="T:System.IO.Stream"></see> type. </exception>
		</member>
		<member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
			<summary>Resolves the absolute URI from the base and relative URIs by calling ResolveUri on the underlying <see cref="T:System.Xml.XmlResolver"></see>.</summary>
			<returns>A <see cref="T:System.Uri"></see> representing the absolute URI or null if the relative URI cannot be resolved (returned by calling ResolveUri on the underlying <see cref="T:System.Xml.XmlResolver"></see>).</returns>
			<param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the baseUri value. If relative, it combines with the baseUri to make an absolute URI. </param>
			<param name="baseUri">The base URI used to resolve the relative URI. </param>
			<exception cref="T:System.ArgumentException">relativeUri is null. </exception>
		</member>
		<member name="P:System.Xml.XmlSecureResolver.Credentials">
			<summary>Sets credentials used to authenticate Web requests.</summary>
			<returns>An <see cref="T:System.Net.ICredentials"></see> object. The <see cref="T:System.Xml.XmlSecureResolver"></see> sets the given credentials on the underlying <see cref="T:System.Xml.XmlResolver"></see>. If this property is not set, the value defaults to null; that is, the <see cref="T:System.Xml.XmlSecureResolver"></see> has no user credentials.</returns>
		</member>
		<member name="T:System.Xml.XmlSignificantWhitespace">
			<summary>Represents white space between markup in a mixed content node or white space within an xml:space= 'preserve' scope. This is also referred to as significant white space.</summary>
		</member>
		<member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSignificantWhitespace"></see> class.</summary>
			<param name="doc">The <see cref="T:System.Xml.XmlDocument"></see> object.</param>
			<param name="strData">The white space characters of the node.</param>
		</member>
		<member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For significant white space nodes, the cloned node always includes the data value, regardless of the parameter setting. </param>
		</member>
		<member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For XmlSignificantWhitespace nodes, this property returns #significant-whitespace.</returns>
		</member>
		<member name="P:System.Xml.XmlSignificantWhitespace.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For XmlSignificantWhitespace nodes, this property returns #significant-whitespace.</returns>
		</member>
		<member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>For XmlSignificantWhitespace nodes, this value is XmlNodeType.SignificantWhitespace.</returns>
		</member>
		<member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
			<summary>Gets the parent of the current node.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> parent node of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlSignificantWhitespace.Value">
			<summary>Gets or sets the value of the node.</summary>
			<returns>The white space characters found in the node.</returns>
			<exception cref="T:System.ArgumentException">Setting Value to invalid white space characters. </exception>
		</member>
		<member name="T:System.Xml.XmlSpace">
			<summary>Specifies the current xml:space scope.</summary>
		</member>
		<member name="F:System.Xml.XmlSpace.Default">
			<summary>The xml:space scope equals default.</summary>
		</member>
		<member name="F:System.Xml.XmlSpace.None">
			<summary>No xml:space scope.</summary>
		</member>
		<member name="F:System.Xml.XmlSpace.Preserve">
			<summary>The xml:space scope equals preserve.</summary>
		</member>
		<member name="T:System.Xml.XmlText">
			<summary>Represents the text content of an element or attribute.</summary>
		</member>
		<member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
		</member>
		<member name="M:System.Xml.XmlText.SplitText(System.Int32)">
			<summary>Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.</summary>
			<returns>The new node.</returns>
			<param name="offset">The offset at which to split the node. </param>
		</member>
		<member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>. XmlText nodes do not have children, so this method has no effect.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The XmlWriter to which you want to save. </param>
		</member>
		<member name="P:System.Xml.XmlText.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For text nodes, this property returns #text.</returns>
		</member>
		<member name="P:System.Xml.XmlText.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For text nodes, this property returns #text.</returns>
		</member>
		<member name="P:System.Xml.XmlText.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>For text nodes, this value is XmlNodeType.Text.</returns>
		</member>
		<member name="P:System.Xml.XmlText.Value">
			<summary>Gets or sets the value of the node.</summary>
			<returns>The content of the text node.</returns>
		</member>
		<member name="T:System.Xml.XmlTextReader">
			<summary>Represents a reader that provides fast, non-cached, forward-only access to XML data.</summary>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor">
			<summary>Initializes a new instance of the XmlTextReader.</summary>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified stream.</summary>
			<param name="input">The stream containing the XML data to read. </param>
			<exception cref="T:System.ArgumentNullException">input is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified file.</summary>
			<param name="url">The URL for the file containing the XML data. The <see cref="P:System.Xml.XmlTextReader.BaseURI"></see> is set to this value. </param>
			<exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
			<exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
			<exception cref="T:System.InvalidOperationException">url is an empty string.</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
			<exception cref="T:System.UriFormatException">url is not a valid URI.</exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified <see cref="T:System.IO.TextReader"></see>.</summary>
			<param name="input">The TextReader containing the XML data to read. </param>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="nt">The XmlNameTable to use. </param>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified stream and <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="nt">The XmlNameTable to use. </param>
			<param name="input">The stream containing the XML data to read. </param>
			<exception cref="T:System.NullReferenceException">The input or nt value is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified URL and stream.</summary>
			<param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI"></see> is set to this value. </param>
			<param name="input">The stream containing the XML data to read. </param>
			<exception cref="T:System.ArgumentNullException">input is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified URL and <see cref="T:System.IO.TextReader"></see>.</summary>
			<param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI"></see> is set to this value. </param>
			<param name="input">The TextReader containing the XML data to read. </param>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified file and <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="url">The URL for the file containing the XML data to read. </param>
			<param name="nt">The XmlNameTable to use. </param>
			<exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
			<exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
			<exception cref="T:System.NullReferenceException">The nt value is null.</exception>
			<exception cref="T:System.InvalidOperationException">url is an empty string.</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
			<exception cref="T:System.UriFormatException">url is not a valid URI.</exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified <see cref="T:System.IO.TextReader"></see> and <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="nt">The XmlNameTable to use. </param>
			<param name="input">The TextReader containing the XML data to read. </param>
			<exception cref="T:System.NullReferenceException">The nt value is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified stream, <see cref="T:System.Xml.XmlNodeType"></see>, and <see cref="T:System.Xml.XmlParserContext"></see>.</summary>
			<param name="context">The <see cref="T:System.Xml.XmlParserContext"></see> in which the xmlFragment is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable"></see> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
			<param name="xmlFragment">The stream containing the XML fragment to parse. </param>
			<param name="fragType">The <see cref="T:System.Xml.XmlNodeType"></see> of the XML fragment. This also determines what the fragment can contain. (See table below.) </param>
			<exception cref="T:System.Xml.XmlException">fragType is not an Element, Attribute, or Document XmlNodeType. </exception>
			<exception cref="T:System.ArgumentNullException">xmlFragment is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI"></see> is set to this value. If url is null, BaseURI is set to String.Empty. </param>
			<param name="nt">The XmlNameTable to use. </param>
			<param name="input">The stream containing the XML data to read. </param>
			<exception cref="T:System.NullReferenceException">The input or nt value is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified URL, <see cref="T:System.IO.TextReader"></see> and <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI"></see> is set to this value. If url is null, BaseURI is set to String.Empty. </param>
			<param name="nt">The XmlNameTable to use. </param>
			<param name="input">The TextReader containing the XML data to read. </param>
			<exception cref="T:System.NullReferenceException">The nt value is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified string, <see cref="T:System.Xml.XmlNodeType"></see>, and <see cref="T:System.Xml.XmlParserContext"></see>.</summary>
			<param name="context">The <see cref="T:System.Xml.XmlParserContext"></see> in which the xmlFragment is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable"></see> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
			<param name="xmlFragment">The string containing the XML fragment to parse. </param>
			<param name="fragType">The <see cref="T:System.Xml.XmlNodeType"></see> of the XML fragment. This also determines what the fragment string can contain. (See table below.) </param>
			<exception cref="T:System.Xml.XmlException">fragType is not an Element, Attribute, or DocumentXmlNodeType. </exception>
			<exception cref="T:System.ArgumentNullException">xmlFragment is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.Close">
			<summary>Changes the <see cref="P:System.Xml.XmlReader.ReadState"></see> to Closed.</summary>
		</member>
		<member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
			<summary>Gets the value of the attribute with the specified index.</summary>
			<returns>The value of the specified attribute.</returns>
			<param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
			<exception cref="T:System.ArgumentOutOfRangeException">The i parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount"></see>. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
			<summary>Gets the value of the attribute with the specified name.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
			<summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
			<summary>Gets a collection that contains all namespaces currently in-scope.</summary>
			<returns>An <see cref="T:System.Collections.IDictionary"></see> object that contains all the current in-scope namespaces. If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</returns>
			<param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value that specifies the type of namespace nodes to return.</param>
		</member>
		<member name="M:System.Xml.XmlTextReader.GetRemainder">
			<summary>Gets the remainder of the buffered XML.</summary>
			<returns>A <see cref="T:System.IO.TextReader"></see> containing the remainder of the buffered XML.</returns>
		</member>
		<member name="M:System.Xml.XmlTextReader.HasLineInfo">
			<summary>Gets a value indicating whether the class can return line information.</summary>
			<returns>true if the class can return line information; otherwise, false.</returns>
		</member>
		<member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
			<summary>Resolves a namespace prefix in the current element's scope.</summary>
			<returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
			<param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
			<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Xml.XmlTextReader.Namespaces"></see> property is set to true and the prefix value is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
			<summary>Moves to the attribute with the specified index.</summary>
			<param name="i">The index of the attribute. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">The i parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount"></see>. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
			<summary>Moves to the attribute with the specified name.</summary>
			<returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
			<summary>Moves to the attribute with the specified local name and namespace URI.</summary>
			<returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlTextReader.MoveToElement">
			<summary>Moves to the element that contains the current attribute node.</summary>
			<returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
		</member>
		<member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
			<summary>Moves to the first attribute.</summary>
			<returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
		</member>
		<member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
			<summary>Moves to the next attribute.</summary>
			<returns>true if there is a next attribute; false if there are no more attributes.</returns>
		</member>
		<member name="M:System.Xml.XmlTextReader.Read">
			<summary>Reads the next node from the stream.</summary>
			<returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
			<exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
			<summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
			<returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Decodes Base64 and returns the decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="offset">The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
			<param name="array">The array of characters that serves as the buffer to which the text contents are written. </param>
			<param name="len">The number of bytes to write into the buffer. </param>
			<exception cref="T:System.Xml.XmlException">The Base64 sequence is not valid. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset &lt; 0, or len &lt; 0, or len &gt; array.Length- offset. </exception>
			<exception cref="T:System.ArgumentNullException">The value of array is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Decodes BinHex and returns the decoded binary bytes.</summary>
			<returns>The number of bytes written to your buffer.</returns>
			<param name="offset">The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
			<param name="array">The byte array that serves as the buffer to which the decoded binary bytes are written. </param>
			<param name="len">The number of bytes to write into the buffer. </param>
			<exception cref="T:System.Xml.XmlException">The BinHex sequence is not valid. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset &lt; 0, or len &lt; 0, or len &gt; array.Length- offset. </exception>
			<exception cref="T:System.ArgumentNullException">The value of array is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
			<summary>Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.</summary>
			<returns>The number of characters read. This can be 0 if the reader is not positioned on an element or if there is no more text content to return in the current context.</returns>
			<param name="count">The number of characters to write into buffer. </param>
			<param name="buffer">The array of characters that serves as the buffer to which the text contents are written. </param>
			<param name="index">The position within buffer where the method can begin writing text contents. </param>
			<exception cref="T:System.ArgumentNullException">The buffer value is null. </exception>
			<exception cref="T:System.ArgumentException">count is greater than the space specified in the buffer (buffer size - index). </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index&lt; 0 or count&lt; 0. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)"></see>  is not supported in the current node.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)"></see>  is not supported on the current node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlTextReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the element and decodes the Base64 content.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlTextReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the element and decodes the BinHex content.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ReadString">
			<summary>Reads the contents of an element or a text node as a string.</summary>
			<returns>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.Note: The text node can be either an element or an attribute text node.</returns>
			<exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
			<exception cref="T:System.InvalidOperationException">An invalid operation was attempted. </exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ResetState">
			<summary>Resets the state of the reader to ReadState.Initial.</summary>
			<exception cref="T:System.InvalidOperationException">Calling ResetState if the reader was constructed using an <see cref="T:System.Xml.XmlParserContext"></see>. </exception>
			<exception cref="T:System.Xml.XmlException">Documents in a single stream do not share the same encoding.</exception>
		</member>
		<member name="M:System.Xml.XmlTextReader.ResolveEntity">
			<summary>Resolves the entity reference for EntityReference nodes.</summary>
		</member>
		<member name="M:System.Xml.XmlTextReader.Skip">
			<summary>Skips the children of the current node.</summary>
		</member>
		<member name="M:System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
			<summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)"></see>.</summary>
			<returns>An <see cref="T:System.Collections.IDictionary"></see> that contains the current in-scope namespaces.</returns>
			<param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value that specifies the type of namespace nodes to return.</param>
		</member>
		<member name="M:System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
			<summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)"></see>.</summary>
			<returns>The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.</returns>
			<param name="prefix">The prefix whose namespace URI you wish to find.</param>
		</member>
		<member name="M:System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
			<summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)"></see>.</summary>
			<returns>The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.</returns>
			<param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
		</member>
		<member name="P:System.Xml.XmlTextReader.AttributeCount">
			<summary>Gets the number of attributes on the current node.</summary>
			<returns>The number of attributes on the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.BaseURI">
			<summary>Gets the base URI of the current node.</summary>
			<returns>The base URI of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
			<summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader"></see> implements the binary content read methods.</summary>
			<returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlTextReader"></see> class always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
			<summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader"></see> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"></see> method.</summary>
			<returns>true if the <see cref="T:System.Xml.XmlTextReader"></see> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)"></see> method; otherwise false. The <see cref="T:System.Xml.XmlTextReader"></see> class always returns false.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.CanResolveEntity">
			<summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
			<returns>true if the reader can parse and resolve entities; otherwise, false. The XmlTextReader class always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.Depth">
			<summary>Gets the depth of the current node in the XML document.</summary>
			<returns>The depth of the current node in the XML document.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.Encoding">
			<summary>Gets the encoding of the document.</summary>
			<returns>The encoding value. If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.EntityHandling">
			<summary>Gets or sets a value that specifies how the reader handles entities.</summary>
			<returns>One of the <see cref="T:System.Xml.EntityHandling"></see> values. If no EntityHandling is specified, it defaults to EntityHandling.ExpandCharEntities.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.EOF">
			<summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
			<returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.HasValue">
			<summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value"></see> other than String.Empty.</summary>
			<returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.IsDefault">
			<summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</summary>
			<returns>This property always returns false. (<see cref="T:System.Xml.XmlTextReader"></see> does not expand default attributes.) </returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.IsEmptyElement">
			<summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
			<returns>true if the current node is an element (<see cref="P:System.Xml.XmlTextReader.NodeType"></see> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.LineNumber">
			<summary>Gets the current line number.</summary>
			<returns>The current line number.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.LinePosition">
			<summary>Gets the current line position.</summary>
			<returns>The current line position.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.LocalName">
			<summary>Gets the local name of the current node.</summary>
			<returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.Name">
			<summary>Gets the qualified name of the current node.</summary>
			<returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlTextReader.NodeType"></see> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.Namespaces">
			<summary>Gets or sets a value indicating whether to do namespace support.</summary>
			<returns>true to do namespace support; otherwise, false. The default is true.</returns>
			<exception cref="T:System.InvalidOperationException">Setting this property after a read operation has occurred (<see cref="P:System.Xml.XmlTextReader.ReadState"></see> is not ReadState.Initial). </exception>
		</member>
		<member name="P:System.Xml.XmlTextReader.NamespaceURI">
			<summary>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
			<returns>The namespace URI of the current node; otherwise an empty string.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.NameTable">
			<summary>Gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.</summary>
			<returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlNodeType"></see> values representing the type of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.Normalization">
			<summary>Gets or sets a value indicating whether to normalize white space and attribute values.</summary>
			<returns>true to normalize; otherwise, false. The default is false.</returns>
			<exception cref="T:System.InvalidOperationException">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState"></see> is ReadState.Closed). </exception>
		</member>
		<member name="P:System.Xml.XmlTextReader.Prefix">
			<summary>Gets the namespace prefix associated with the current node.</summary>
			<returns>The namespace prefix associated with the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.ProhibitDtd">
			<summary>Gets or sets a value indicating whether to allow DTD processing.</summary>
			<returns>true to disallow DTD processing; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.QuoteChar">
			<summary>Gets the quotation mark character used to enclose the value of an attribute node.</summary>
			<returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.ReadState">
			<summary>Gets the state of the reader.</summary>
			<returns>One of the <see cref="T:System.Xml.ReadState"></see> values.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.Settings">
			<summary>Gets the <see cref="T:System.Xml.XmlReaderSettings"></see> object used to create this <see cref="T:System.Xml.XmlTextReader"></see> instance.</summary>
			<returns>The <see cref="T:System.Xml.XmlReaderSettings"></see> object used to create this <see cref="T:System.Xml.XmlTextReader"></see> instance; null if the reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create"></see> method. </returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.Value">
			<summary>Gets the text value of the current node.</summary>
			<returns>The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType"></see> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space within an xml:space= 'preserve' scope. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
			<summary>Gets or sets a value that specifies how white space is handled.</summary>
			<returns>One of the <see cref="T:System.Xml.WhitespaceHandling"></see> values. The default is WhitespaceHandling.All (returns Whitespace and SignificantWhitespace nodes).</returns>
			<exception cref="T:System.InvalidOperationException">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState"></see> is ReadState.Closed). </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">Invalid value specified. </exception>
		</member>
		<member name="P:System.Xml.XmlTextReader.XmlLang">
			<summary>Gets the current xml:lang scope.</summary>
			<returns>The current xml:lang scope.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.XmlResolver">
			<summary>Sets the <see cref="T:System.Xml.XmlResolver"></see> used for resolving DTD references.</summary>
			<returns>The XmlResolver to use. If set to null, external resources are not resolved.In version 1.1 of the .NET Framework, the caller must be fully trusted in order to specify an XmlResolver.</returns>
		</member>
		<member name="P:System.Xml.XmlTextReader.XmlSpace">
			<summary>Gets the current xml:space scope.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlSpace"></see> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
		</member>
		<member name="T:System.Xml.XmlTextWriter">
			<summary>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</summary>
		</member>
		<member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
			<summary>Creates an instance of the XmlTextWriter class using the specified <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="w">The TextWriter to write to. It is assumed that the TextWriter is already set to the correct encoding. </param>
		</member>
		<member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
			<summary>Creates an instance of the XmlTextWriter class using the specified stream and encoding.</summary>
			<param name="encoding">The encoding to generate. If encoding is null it writes out the stream as UTF-8 and omits the encoding attribute from the ProcessingInstruction. </param>
			<param name="w">The stream to which you want to write. </param>
			<exception cref="T:System.ArgumentException">The encoding is not supported or the stream cannot be written to. </exception>
			<exception cref="T:System.ArgumentNullException">w is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
			<summary>Creates an instance of the <see cref="T:System.Xml.XmlTextWriter"></see> class using the specified file.</summary>
			<param name="encoding">The encoding to generate. If encoding is null it writes the file out as UTF-8, and omits the encoding attribute from the ProcessingInstruction. </param>
			<param name="filename">The filename to write to. If the file exists, it truncates it and overwrites it with the new content. </param>
			<exception cref="T:System.ArgumentNullException">The filename is null. </exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">The directory to write to is not found. </exception>
			<exception cref="T:System.ArgumentException">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters. </exception>
			<exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
			<exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
			<exception cref="T:System.IO.IOException">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.Close">
			<summary>Closes this stream and the underlying stream.</summary>
			<exception cref="T:System.InvalidOperationException">A call is made to write more output after Close has been called or the result of this call is an invalid XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.Flush">
			<summary>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</summary>
		</member>
		<member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
			<summary>Returns the closest prefix defined in the current namespace scope for the namespace URI.</summary>
			<returns>The matching prefix. Or null if no matching namespace URI is found in the current scope.</returns>
			<param name="ns">Namespace URI whose prefix you want to find. </param>
			<exception cref="T:System.ArgumentException">ns is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Encodes the specified binary bytes as base64 and writes out the resulting text.</summary>
			<param name="count">The number of bytes to write. </param>
			<param name="buffer">Byte array to encode. </param>
			<param name="index">The position within the buffer indicating the start of the bytes to write. </param>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState"></see> is Closed. </exception>
			<exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
			<exception cref="T:System.ArgumentNullException">buffer is null. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Encodes the specified binary bytes as binhex and writes out the resulting text.</summary>
			<param name="count">The number of bytes to write. </param>
			<param name="buffer">Byte array to encode. </param>
			<param name="index">The position in the buffer indicating the start of the bytes to write. </param>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState"></see> is Closed. </exception>
			<exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
			<exception cref="T:System.ArgumentNullException">buffer is null. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
			<summary>Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
			<param name="text">Text to place inside the CDATA block. </param>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState"></see> is Closed. </exception>
			<exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
			<summary>Forces the generation of a character entity for the specified Unicode character value.</summary>
			<param name="ch">Unicode character for which to generate a character entity. </param>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState"></see> is Closed. </exception>
			<exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff; or the text would result in a non-well formed XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
			<summary>Writes text one buffer at a time.</summary>
			<param name="count">The number of characters to write. </param>
			<param name="buffer">Character array containing the text to write. </param>
			<param name="index">The position in the buffer indicating the start of the text to write. </param>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState"></see> is Closed. </exception>
			<exception cref="T:System.ArgumentNullException">buffer is null. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. -or-The buffer length minus index is less than count; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
			<summary>Writes out a comment &lt;!--...--&gt; containing the specified text.</summary>
			<param name="text">Text to place inside the comment. </param>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState"></see> is Closed. </exception>
			<exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
			<summary>Writes the DOCTYPE declaration with the specified name and optional attributes.</summary>
			<param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments. </param>
			<param name="name">The name of the DOCTYPE. This must be non-empty. </param>
			<param name="sysid">If pubid is null and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument. </param>
			<param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument. </param>
			<exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
			<exception cref="T:System.ArgumentException">name is null or String.Empty-or- the value for name would result in invalid XML. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
			<summary>Closes the previous <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)"></see> call.</summary>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
			<summary>Closes any open elements or attributes and puts the writer back in the Start state.</summary>
			<exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteEndElement">
			<summary>Closes one element and pops the corresponding namespace scope.</summary>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
			<summary>Writes out an entity reference as &amp;name;.</summary>
			<param name="name">Name of the entity reference. </param>
			<exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document or name is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
			<summary>Closes one element and pops the corresponding namespace scope.</summary>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
			<summary>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
			<param name="name">Name to write. </param>
			<exception cref="T:System.ArgumentException">name is not a valid XML name; or name is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
			<summary>Writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
			<param name="name">Name to write. </param>
			<exception cref="T:System.ArgumentException">name is not a valid NmToken; or name is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
			<summary>Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</summary>
			<param name="name">Name of the processing instruction. </param>
			<param name="text">Text to include in the processing instruction. </param>
			<exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.name is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument"></see> has already been called. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
			<summary>Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
			<param name="localName">The local name to write. </param>
			<param name="ns">The namespace URI to associate with the name. </param>
			<exception cref="T:System.ArgumentException">localName is either null or String.Empty.localName is not a valid name according to the W3C Namespaces spec. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
			<summary>Writes raw markup manually from a string.</summary>
			<param name="data">String containing the text to write. </param>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
			<summary>Writes raw markup manually from a character buffer.</summary>
			<param name="count">The number of characters to write. </param>
			<param name="buffer">Character array containing the text to write. </param>
			<param name="index">The position within the buffer indicating the start of the text to write. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero.-or-The buffer length minus index is less than count. </exception>
			<exception cref="T:System.ArgumentNullException">buffer is null. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
			<summary>Writes the start of an attribute.</summary>
			<param name="localName">LocalName of the attribute. </param>
			<param name="prefix">Namespace prefix of the attribute. </param>
			<param name="ns">NamespaceURI of the attribute </param>
			<exception cref="T:System.ArgumentException">localName is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
			<summary>Writes the XML declaration with the version "1.0".</summary>
			<exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
			<summary>Writes the XML declaration with the version "1.0" and the standalone attribute.</summary>
			<param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
			<exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
			<summary>Writes the specified start tag and associates it with the given namespace and prefix.</summary>
			<param name="localName">The local name of the element. </param>
			<param name="prefix">The namespace prefix of the element. </param>
			<param name="ns">The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also. </param>
			<exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
			<summary>Writes the given text content.</summary>
			<param name="text">Text to write. </param>
			<exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
			<summary>Generates and writes the surrogate character entity for the surrogate character pair.</summary>
			<param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF. </param>
			<param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
			<exception cref="T:System.Exception">An invalid surrogate character pair was passed. </exception>
		</member>
		<member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
			<summary>Writes out the given white space.</summary>
			<param name="ws">The string of white space characters. </param>
			<exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
		</member>
		<member name="P:System.Xml.XmlTextWriter.BaseStream">
			<summary>Gets the underlying stream object.</summary>
			<returns>The stream to which the XmlTextWriter is writing or null if the XmlTextWriter was constructed using a <see cref="T:System.IO.TextWriter"></see> that does not inherit from the <see cref="T:System.IO.StreamWriter"></see> class.</returns>
		</member>
		<member name="P:System.Xml.XmlTextWriter.Formatting">
			<summary>Indicates how the output is formatted.</summary>
			<returns>One of the <see cref="T:System.Xml.Formatting"></see> values. The default is Formatting.None (no special formatting).</returns>
		</member>
		<member name="P:System.Xml.XmlTextWriter.Indentation">
			<summary>Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="P:System.Xml.XmlTextWriter.Formatting"></see> is set to Formatting.Indented.</summary>
			<returns>Number of IndentChars for each level. The default is 2.</returns>
			<exception cref="T:System.ArgumentException">Setting this property to a negative value. </exception>
		</member>
		<member name="P:System.Xml.XmlTextWriter.IndentChar">
			<summary>Gets or sets which character to use for indenting when <see cref="P:System.Xml.XmlTextWriter.Formatting"></see> is set to Formatting.Indented.</summary>
			<returns>The character to use for indenting. The default is space.The XmlTextWriter allows you to set this property to any character. To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</returns>
		</member>
		<member name="P:System.Xml.XmlTextWriter.Namespaces">
			<summary>Gets or sets a value indicating whether to do namespace support.</summary>
			<returns>true to support namespaces; otherwise, false.The default is true.</returns>
			<exception cref="T:System.InvalidOperationException">You can only change this property when in the WriteState.Start state. </exception>
		</member>
		<member name="P:System.Xml.XmlTextWriter.QuoteChar">
			<summary>Gets or sets which character to use to quote attribute values.</summary>
			<returns>The character to use to quote attribute values. This must be a single quote (&amp;#39;) or a double quote (&amp;#34;). The default is a double quote.</returns>
			<exception cref="T:System.ArgumentException">Setting this property to something other than either a single or double quote. </exception>
		</member>
		<member name="P:System.Xml.XmlTextWriter.WriteState">
			<summary>Gets the state of the writer.</summary>
			<returns>One of the <see cref="T:System.Xml.WriteState"></see> values.</returns>
		</member>
		<member name="P:System.Xml.XmlTextWriter.XmlLang">
			<summary>Gets the current xml:lang scope.</summary>
			<returns>The current xml:lang or null if there is no xml:lang in the current scope.</returns>
		</member>
		<member name="P:System.Xml.XmlTextWriter.XmlSpace">
			<summary>Gets an <see cref="T:System.Xml.XmlSpace"></see> representing the current xml:space scope.</summary>
			<returns>An XmlSpace representing the current xml:space scope.Value Meaning None This is the default if no xml:space scope exists. Default The current scope is xml:space="default". Preserve The current scope is xml:space="preserve". </returns>
		</member>
		<member name="T:System.Xml.XmlTokenizedType">
			<summary>Represents the XML type for the string. This allows the string to be read as a particular XML type, for example a CDATA section type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.CDATA">
			<summary>CDATA type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.ENTITIES">
			<summary>ENTITIES type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.ENTITY">
			<summary>ENTITY type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
			<summary>ENUMERATION type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.ID">
			<summary>ID type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.IDREF">
			<summary>IDREF type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.IDREFS">
			<summary>IDREFS type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.NCName">
			<summary>NCName type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
			<summary>NMTOKEN type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
			<summary>NMTOKENS type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.None">
			<summary>No type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.NOTATION">
			<summary>NOTATION type.</summary>
		</member>
		<member name="F:System.Xml.XmlTokenizedType.QName">
			<summary>QName type.</summary>
		</member>
		<member name="T:System.Xml.XmlUrlResolver">
			<summary>Resolves external XML resources named by a Uniform Resource Identifier (URI).</summary>
		</member>
		<member name="M:System.Xml.XmlUrlResolver.#ctor">
			<summary>Creates a new instance of the XmlUrlResolver class.</summary>
		</member>
		<member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
			<summary>Maps a URI to an object containing the actual resource.</summary>
			<returns>A System.IO.Stream object or null if a type other than stream is specified.</returns>
			<param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios. </param>
			<param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects. </param>
			<param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"></see></param>
			<exception cref="T:System.NullReferenceException">absoluteUri is null. </exception>
			<exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
			<exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
			<exception cref="T:System.Xml.XmlException">ofObjectToReturn is neither null nor a Stream type. </exception>
		</member>
		<member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
			<summary>Resolves the absolute URI from the base and relative URIs.</summary>
			<returns>A <see cref="T:System.Uri"></see> representing the absolute URI or null if the relative URI cannot be resolved.</returns>
			<param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the baseUri value. If relative, it combines with the baseUri to make an absolute URI.</param>
			<param name="baseUri">The base URI used to resolve the relative URI.</param>
			<exception cref="T:System.ArgumentException">relativeUri is null</exception>
		</member>
		<member name="P:System.Xml.XmlUrlResolver.Credentials">
			<summary>Sets credentials used to authenticate Web requests.</summary>
			<returns>An <see cref="T:System.Net.ICredentials"></see> object. If this property is not set, the value defaults to null; that is, the XmlUrlResolver has no user credentials.</returns>
		</member>
		<member name="T:System.Xml.XmlValidatingReader">
			<summary>Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.</summary>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
			<summary>Initializes a new instance of the XmlValidatingReader class that validates the content returned from the given <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="reader">The XmlReader to read from while validating. The current implementation supports only <see cref="T:System.Xml.XmlTextReader"></see>. </param>
			<exception cref="T:System.ArgumentException">The reader specified is not an XmlTextReader. </exception>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
			<summary>Initializes a new instance of the XmlValidatingReader class with the specified values.</summary>
			<param name="context">The <see cref="T:System.Xml.XmlParserContext"></see> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable"></see> to use, encoding, namespace scope, current xml:lang, and xml:space scope. </param>
			<param name="xmlFragment">The stream containing the XML fragment to parse. </param>
			<param name="fragType">The <see cref="T:System.Xml.XmlNodeType"></see> of the XML fragment. This determines what the fragment can contain (see table below). </param>
			<exception cref="T:System.Xml.XmlException">fragType is not one of the node types listed in the table below. </exception>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
			<summary>Initializes a new instance of the XmlValidatingReader class with the specified values.</summary>
			<param name="context">The <see cref="T:System.Xml.XmlParserContext"></see> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.NameTable"></see> to use, encoding, namespace scope, current xml:lang, and xml:space scope. </param>
			<param name="xmlFragment">The string containing the XML fragment to parse. </param>
			<param name="fragType">The <see cref="T:System.Xml.XmlNodeType"></see> of the XML fragment. This also determines what the fragment string can contain (see table below). </param>
			<exception cref="T:System.Xml.XmlException">fragType is not one of the node types listed in the table below. </exception>
		</member>
		<member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
			<summary>Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.</summary>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.Close">
			<summary>Changes the <see cref="P:System.Xml.XmlReader.ReadState"></see> to Closed.</summary>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
			<summary>Gets the value of the attribute with the specified index.</summary>
			<returns>The value of the specified attribute.</returns>
			<param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
			<exception cref="T:System.ArgumentOutOfRangeException">The i parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlValidatingReader.AttributeCount"></see>. </exception>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
			<summary>Gets the value of the attribute with the specified name.</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
			<summary>Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
			<returns>The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
			<summary>Gets a value indicating whether the class can return line information.</summary>
			<returns>true if the class can return line information; otherwise, false.</returns>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
			<summary>Resolves a namespace prefix in the current element's scope.</summary>
			<returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
			<param name="prefix">The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string. </param>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
			<summary>Moves to the attribute with the specified index.</summary>
			<param name="i">The index of the attribute. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">The i parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount"></see>. </exception>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
			<summary>Moves to the attribute with the specified name.</summary>
			<returns>true if the attribute is found; otherwise, false. If false, the position of the reader does not change.</returns>
			<param name="name">The qualified name of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
			<summary>Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
			<returns>true if the attribute is found; otherwise, false. If false, the position of the reader does not change.</returns>
			<param name="localName">The local name of the attribute. </param>
			<param name="namespaceURI">The namespace URI of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.MoveToElement">
			<summary>Moves to the element that contains the current attribute node.</summary>
			<returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
			<summary>Moves to the first attribute.</summary>
			<returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
			<summary>Moves to the next attribute.</summary>
			<returns>true if there is a next attribute; false if there are no more attributes.</returns>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.Read">
			<summary>Reads the next node from the stream.</summary>
			<returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
			<summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
			<returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)"></see>  is not supported on the current node.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)"></see>  is not supported on the current node.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the element and decodes the Base64 content.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>Reads the element and decodes the BinHex content.</summary>
			<returns>The number of bytes written to the buffer.</returns>
			<param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
			<param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
			<param name="index">The offset into the buffer where to start copying the result.</param>
			<exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
			<exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
			<exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader"></see> implementation does not support this method.</exception>
			<exception cref="T:System.ArgumentNullException">The buffer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.ReadString">
			<summary>Reads the contents of an element or text node as a string.</summary>
			<returns>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.The text node can be either an element or an attribute text node.</returns>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
			<summary>Gets the common language runtime type for the specified XML Schema definition language (XSD) type.</summary>
			<returns>The common language runtime type for the specified XML Schema type.</returns>
		</member>
		<member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
			<summary>Resolves the entity reference for EntityReference nodes.</summary>
			<exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node. </exception>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.AttributeCount">
			<summary>Gets the number of attributes on the current node.</summary>
			<returns>The number of attributes on the current node. This number includes default attributes.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.BaseURI">
			<summary>Gets the base URI of the current node.</summary>
			<returns>The base URI of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
			<summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlValidatingReader"></see> implements the binary content read methods.</summary>
			<returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlValidatingReader"></see> class returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
			<summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
			<returns>true if the reader can parse and resolve entities; otherwise, false. XmlValidatingReader always returns true.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Depth">
			<summary>Gets the depth of the current node in the XML document.</summary>
			<returns>The depth of the current node in the XML document.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Encoding">
			<summary>Gets the encoding attribute for the document.</summary>
			<returns>The encoding value. If no encoding attribute exists, and there is not byte-order mark, this defaults to UTF-8.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.EntityHandling">
			<summary>Gets or sets a value that specifies how the reader handles entities.</summary>
			<returns>One of the <see cref="T:System.Xml.EntityHandling"></see> values. If no EntityHandling is specified, it defaults to EntityHandling.ExpandEntities.</returns>
			<exception cref="T:System.ArgumentOutOfRangeException">Invalid value was specified. </exception>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.EOF">
			<summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
			<returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.HasValue">
			<summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlValidatingReader.Value"></see> other than String.Empty.</summary>
			<returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.IsDefault">
			<summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</summary>
			<returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
			<summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
			<returns>true if the current node is an element (<see cref="P:System.Xml.XmlValidatingReader.NodeType"></see> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.LineNumber">
			<summary>Gets the current line number.</summary>
			<returns>The current line number. The starting value for this property is 1.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.LinePosition">
			<summary>Gets the current line position.</summary>
			<returns>The current line position. The starting value for this property is 1.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.LocalName">
			<summary>Gets the local name of the current node.</summary>
			<returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Name">
			<summary>Gets the qualified name of the current node.</summary>
			<returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlValidatingReader.NodeType"></see> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Namespaces">
			<summary>Gets or sets a value indicating whether to do namespace support.</summary>
			<returns>true to do namespace support; otherwise, false. The default is true.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
			<summary>Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.</summary>
			<returns>The namespace URI of the current node; otherwise an empty string.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.NameTable">
			<summary>Gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.</summary>
			<returns>XmlNameTable that enables you to get the atomized version of a string within the node.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.NodeType">
			<summary>Gets the type of the current node.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlNodeType"></see> values representing the type of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Prefix">
			<summary>Gets the namespace prefix associated with the current node.</summary>
			<returns>The namespace prefix associated with the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.QuoteChar">
			<summary>Gets the quotation mark character used to enclose the value of an attribute node.</summary>
			<returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Reader">
			<summary>Gets the <see cref="T:System.Xml.XmlReader"></see> used to construct this XmlValidatingReader.</summary>
			<returns>The XmlReader specified in the constructor.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.ReadState">
			<summary>Gets the state of the reader.</summary>
			<returns>One of the <see cref="T:System.Xml.ReadState"></see> values.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Schemas">
			<summary>Gets a <see cref="T:System.Xml.Schema.XmlSchemaCollection"></see> to use for validation.</summary>
			<returns>The XmlSchemaCollection to use for validation.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.SchemaType">
			<summary>Gets a schema type object.</summary>
			<returns><see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see>, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaComplexType"></see> depending whether the node value is a built in XML Schema definition language (XSD) type or a user defined simpleType or complexType; null if the current node has no schema type.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Settings">
			<summary>Gets the <see cref="T:System.Xml.XmlReaderSettings"></see> object that was used to create this <see cref="T:System.Xml.XmlValidatingReader"></see> instance.</summary>
			<returns>null because <see cref="T:System.Xml.XmlValidatingReader"></see> objects are not instantiated using the <see cref="T:System.Xml.XmlReaderSettings"></see> class and the <see cref="Overload:System.Xml.XmlReader.Create"></see> method.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.ValidationType">
			<summary>Gets or sets a value indicating the type of validation to perform.</summary>
			<returns>One of the <see cref="T:System.Xml.ValidationType"></see> values. If this property is not set, it defaults to ValidationType.Auto.</returns>
			<exception cref="T:System.InvalidOperationException">Setting the property after a Read has been called. </exception>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.Value">
			<summary>Gets the text value of the current node.</summary>
			<returns>The value returned depends on the <see cref="P:System.Xml.XmlValidatingReader.NodeType"></see> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.XmlLang">
			<summary>Gets the current xml:lang scope.</summary>
			<returns>The current xml:lang scope.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.XmlResolver">
			<summary>Sets the <see cref="T:System.Xml.XmlResolver"></see> used for resolving external document type definition (DTD) and schema location references. The XmlResolver is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.</summary>
			<returns>The XmlResolver to use. If set to null, external resources are not resolved.In version 1.1 of the .NET Framework, the caller must be fully trusted to specify an XmlResolver.</returns>
		</member>
		<member name="P:System.Xml.XmlValidatingReader.XmlSpace">
			<summary>Gets the current xml:space scope.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlSpace"></see> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
		</member>
		<member name="T:System.Xml.XmlWhitespace">
			<summary>Represents white space in element content.</summary>
		</member>
		<member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWhitespace"></see> class.</summary>
			<param name="doc">The <see cref="T:System.Xml.XmlDocument"></see> object.</param>
			<param name="strData">The white space characters of the node.</param>
		</member>
		<member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
			<summary>Creates a duplicate of this node.</summary>
			<returns>The cloned node.</returns>
			<param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For white space nodes, the cloned node always includes the data value, regardless of the parameter setting. </param>
		</member>
		<member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
			<summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to save. </param>
		</member>
		<member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
			<summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="w">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to save.</param>
		</member>
		<member name="P:System.Xml.XmlWhitespace.LocalName">
			<summary>Gets the local name of the node.</summary>
			<returns>For XmlWhitespace nodes, this property returns #whitespace.</returns>
		</member>
		<member name="P:System.Xml.XmlWhitespace.Name">
			<summary>Gets the qualified name of the node.</summary>
			<returns>For XmlWhitespace nodes, this property returns #whitespace.</returns>
		</member>
		<member name="P:System.Xml.XmlWhitespace.NodeType">
			<summary>Gets the type of the node.</summary>
			<returns>For XmlWhitespace nodes, the value is <see cref="F:System.Xml.XmlNodeType.Whitespace"></see>.</returns>
		</member>
		<member name="P:System.Xml.XmlWhitespace.ParentNode">
			<summary>Gets the parent of the current node.</summary>
			<returns>The <see cref="T:System.Xml.XmlNode"></see> parent node of the current node.</returns>
		</member>
		<member name="P:System.Xml.XmlWhitespace.Value">
			<summary>Gets or sets the value of the node.</summary>
			<returns>The white space characters found in the node.</returns>
			<exception cref="T:System.ArgumentException">Setting <see cref="P:System.Xml.XmlWhitespace.Value"></see> to invalid white space characters. </exception>
		</member>
		<member name="T:System.Xml.XmlWriter">
			<summary>Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data.</summary>
		</member>
		<member name="M:System.Xml.XmlWriter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriter"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XmlWriter.Close">
			<summary>When overridden in a derived class, closes this stream and the underlying stream.</summary>
			<exception cref="T:System.InvalidOperationException">A call is made to write more output after Close has been called or the result of this call is an invalid XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the specified stream.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="output">The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter"></see> writes XML 1.0 text syntax and appends it to the specified stream.</param>
			<exception cref="T:System.ArgumentNullException">The stream value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.String)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the specified filename.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="outputFileName">The file to which you want to write. The <see cref="T:System.Xml.XmlWriter"></see> creates a file at the specified path and writes to it in XML 1.0 text syntax. The outputFileName must be a file system path.</param>
			<exception cref="T:System.ArgumentNullException">The url value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the specified <see cref="T:System.Text.StringBuilder"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="output">The <see cref="T:System.Text.StringBuilder"></see> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter"></see> is appended to the <see cref="T:System.Text.StringBuilder"></see>.</param>
			<exception cref="T:System.ArgumentNullException">The builder value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the specified <see cref="T:System.IO.TextWriter"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="output">The <see cref="T:System.IO.TextWriter"></see> to which you want to write. The <see cref="T:System.Xml.XmlWriter"></see> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter"></see>.</param>
			<exception cref="T:System.ArgumentNullException">The text value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the specified <see cref="T:System.Xml.XmlWriter"></see> object.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="output">The <see cref="T:System.Xml.XmlWriter"></see> object that you want to use as the underlying writer.</param>
			<exception cref="T:System.ArgumentNullException">The writer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the stream and <see cref="T:System.Xml.XmlWriterSettings"></see> object.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="output">The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter"></see> writes XML 1.0 text syntax and appends it to the specified stream</param>
			<param name="settings">The <see cref="T:System.Xml.XmlWriterSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlWriter"></see> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings"></see> with default settings is used.If the <see cref="T:System.Xml.XmlWriter"></see> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"></see> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property to obtain an <see cref="T:System.Xml.XmlWriterSettings"></see> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter"></see> object has the correct output settings.</param>
			<exception cref="T:System.ArgumentNullException">The stream value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the filename and <see cref="T:System.Xml.XmlWriterSettings"></see> object.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="outputFileName">The file to which you want to write. The <see cref="T:System.Xml.XmlWriter"></see> creates a file at the specified path and writes to it in XML 1.0 text syntax. The outputFileName must be a file system path.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlWriterSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlWriter"></see> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings"></see> with default settings is used.If the <see cref="T:System.Xml.XmlWriter"></see> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"></see> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property to obtain an <see cref="T:System.Xml.XmlWriterSettings"></see> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter"></see> object has the correct output settings.</param>
			<exception cref="T:System.ArgumentNullException">The url value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the <see cref="T:System.Text.StringBuilder"></see> and <see cref="T:System.Xml.XmlWriterSettings"></see> objects.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="output">The <see cref="T:System.Text.StringBuilder"></see> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter"></see> is appended to the <see cref="T:System.Text.StringBuilder"></see>.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlWriterSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlWriter"></see> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings"></see> with default settings is used.If the <see cref="T:System.Xml.XmlWriter"></see> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"></see> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property to obtain an <see cref="T:System.Xml.XmlWriterSettings"></see> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter"></see> object has the correct output settings.</param>
			<exception cref="T:System.ArgumentNullException">The builder value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the <see cref="T:System.IO.TextWriter"></see> and <see cref="T:System.Xml.XmlWriterSettings"></see> objects.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="output">The <see cref="T:System.IO.TextWriter"></see> to which you want to write. The <see cref="T:System.Xml.XmlWriter"></see> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter"></see>.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlWriterSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlWriter"></see> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings"></see> with default settings is used.If the <see cref="T:System.Xml.XmlWriter"></see> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"></see> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property to obtain an <see cref="T:System.Xml.XmlWriterSettings"></see> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter"></see> object has the correct output settings.</param>
			<exception cref="T:System.ArgumentNullException">The text value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
			<summary>Creates a new <see cref="T:System.Xml.XmlWriter"></see> instance using the specified <see cref="T:System.Xml.XmlWriter"></see> and <see cref="T:System.Xml.XmlWriterSettings"></see> objects.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter"></see> object.</returns>
			<param name="output">The <see cref="T:System.Xml.XmlWriter"></see> object that you want to use as the underlying writer.</param>
			<param name="settings">The <see cref="T:System.Xml.XmlWriterSettings"></see> object used to configure the new <see cref="T:System.Xml.XmlWriter"></see> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings"></see> with default settings is used.If the <see cref="T:System.Xml.XmlWriter"></see> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)"></see> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property to obtain an <see cref="T:System.Xml.XmlWriterSettings"></see> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter"></see> object has the correct output settings.</param>
			<exception cref="T:System.ArgumentNullException">The writer value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
			<summary>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlWriter"></see> and optionally releases the managed resources.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.Flush">
			<summary>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</summary>
		</member>
		<member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
			<summary>When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.</summary>
			<returns>The matching prefix or null if no matching namespace URI is found in the current scope.</returns>
			<param name="ns">The namespace URI whose prefix you want to find. </param>
			<exception cref="T:System.ArgumentException">ns is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.System.IDisposable.Dispose">
			<summary>or a description of this member, see <see cref="M:System.IDisposable.Dispose"></see>.</summary>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
			<summary>When overridden in a derived class, writes out all the attributes found at the current position in the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="reader">The XmlReader from which to copy the attributes. </param>
			<param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
			<exception cref="T:System.ArgumentException">reader is null. </exception>
			<exception cref="T:System.Xml.XmlException">The reader is not positioned on an element, attribute or XmlDeclaration node. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
			<summary>When overridden in a derived class, writes out the attribute with the specified local name and value.</summary>
			<param name="localName">The local name of the attribute. </param>
			<param name="value">The value of the attribute. </param>
			<exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
			<exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
			<summary>When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.</summary>
			<param name="localName">The local name of the attribute. </param>
			<param name="value">The value of the attribute. </param>
			<param name="ns">The namespace URI to associate with the attribute. </param>
			<exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
			<exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
			<summary>When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.</summary>
			<param name="localName">The local name of the attribute. </param>
			<param name="prefix">The namespace prefix of the attribute. </param>
			<param name="value">The value of the attribute. </param>
			<param name="ns">The namespace URI of the attribute. </param>
			<exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
			<exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.</summary>
			<param name="count">The number of bytes to write. </param>
			<param name="buffer">Byte array to encode. </param>
			<param name="index">The position in the buffer indicating the start of the bytes to write. </param>
			<exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
			<exception cref="T:System.ArgumentNullException">buffer is null. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
			<summary>When overridden in a derived class, encodes the specified binary bytes as BinHex and writes out the resulting text.</summary>
			<param name="count">The number of bytes to write. </param>
			<param name="buffer">Byte array to encode. </param>
			<param name="index">The position in the buffer indicating the start of the bytes to write. </param>
			<exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
			<exception cref="T:System.ArgumentNullException">buffer is null. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
			<summary>When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
			<param name="text">The text to place inside the CDATA block. </param>
			<exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
			<summary>When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.</summary>
			<param name="ch">The Unicode character for which to generate a character entity. </param>
			<exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
			<summary>When overridden in a derived class, writes text one buffer at a time.</summary>
			<param name="count">The number of characters to write. </param>
			<param name="buffer">Character array containing the text to write. </param>
			<param name="index">The position in the buffer indicating the start of the text to write. </param>
			<exception cref="T:System.ArgumentNullException">buffer is null. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. -or-The buffer length minus index is less than count; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
			<summary>When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing the specified text.</summary>
			<param name="text">Text to place inside the comment. </param>
			<exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
			<summary>When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.</summary>
			<param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments. </param>
			<param name="name">The name of the DOCTYPE. This must be non-empty. </param>
			<param name="sysid">If pubid is null and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument. </param>
			<param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument. </param>
			<exception cref="T:System.ArgumentException">The value for name would result in invalid XML. </exception>
			<exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
			<summary>When overridden in a derived class, writes an element with the specified local name and value.</summary>
			<param name="localName">The local name of the element. </param>
			<param name="value">The value of the element. </param>
			<exception cref="T:System.InvalidOperationException">This results in an invalid XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
			<summary>When overridden in a derived class, writes an element with the specified local name, namespace URI, and value.</summary>
			<param name="localName">The local name of the element. </param>
			<param name="value">The value of the element. </param>
			<param name="ns">The namespace URI to associate with the element. </param>
			<exception cref="T:System.InvalidOperationException">This results in an invalid XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
			<summary>Writes an element with the specified local name, namespace URI, and value.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="prefix">The prefix of the element.</param>
			<param name="value">The value of the element.</param>
			<param name="ns">The namespace URI of the element.</param>
			<exception cref="T:System.InvalidOperationException">This results in an invalid XML document.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteEndAttribute">
			<summary>When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)"></see> call.</summary>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteEndDocument">
			<summary>When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.</summary>
			<exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteEndElement">
			<summary>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</summary>
			<exception cref="T:System.InvalidOperationException">This results in an invalid XML document. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
			<summary>When overridden in a derived class, writes out an entity reference as &amp;name;.</summary>
			<param name="name">The name of the entity reference. </param>
			<exception cref="T:System.ArgumentException">name is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteFullEndElement">
			<summary>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</summary>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteName(System.String)">
			<summary>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
			<param name="name">The name to write. </param>
			<exception cref="T:System.ArgumentException">name is not a valid XML name; or name is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
			<summary>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
			<param name="name">The name to write. </param>
			<exception cref="T:System.ArgumentException">name is not a valid NmToken; or name is either null or String.Empty. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
			<summary>When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.</summary>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> to read from. </param>
			<param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
			<exception cref="T:System.ArgumentException">reader is null. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
			<summary>Copies everything from the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object to the writer. The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> remains unchanged.</summary>
			<param name="defattr">true to copy the default attributes; otherwise, false.</param>
			<param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> to copy from.</param>
			<exception cref="T:System.ArgumentNullException">navigator is null.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
			<summary>When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</summary>
			<param name="name">The name of the processing instruction. </param>
			<param name="text">The text to include in the processing instruction. </param>
			<exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.name is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument"></see> has already been called. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
			<summary>When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
			<param name="localName">The local name to write. </param>
			<param name="ns">The namespace URI for the name. </param>
			<exception cref="T:System.ArgumentException">localName is either null or String.Empty.localName is not a valid name. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
			<summary>When overridden in a derived class, writes raw markup manually from a string.</summary>
			<param name="data">String containing the text to write. </param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
			<summary>When overridden in a derived class, writes raw markup manually from a character buffer.</summary>
			<param name="count">The number of characters to write. </param>
			<param name="buffer">Character array containing the text to write. </param>
			<param name="index">The position within the buffer indicating the start of the text to write. </param>
			<exception cref="T:System.ArgumentNullException">buffer is null. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. -or-The buffer length minus index is less than count.</exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
			<summary>Writes the start of an attribute with the specified local name.</summary>
			<param name="localName">The local name of the attribute.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
			<summary>Writes the start of an attribute with the specified local name and namespace URI.</summary>
			<param name="localName">The local name of the attribute. </param>
			<param name="ns">The namespace URI of the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
			<summary>When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.</summary>
			<param name="localName">The local name of the attribute. </param>
			<param name="prefix">The namespace prefix of the attribute. </param>
			<param name="ns">The namespace URI for the attribute. </param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteStartDocument">
			<summary>When overridden in a derived class, writes the XML declaration with the version "1.0".</summary>
			<exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
			<summary>When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.</summary>
			<param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
			<exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
			<summary>When overridden in a derived class, writes out a start tag with the specified local name.</summary>
			<param name="localName">The local name of the element. </param>
			<exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
			<summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace.</summary>
			<param name="localName">The local name of the element. </param>
			<param name="ns">The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also. </param>
			<exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
			<summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</summary>
			<param name="localName">The local name of the element. </param>
			<param name="prefix">The namespace prefix of the element. </param>
			<param name="ns">The namespace URI to associate with the element. </param>
			<exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteString(System.String)">
			<summary>When overridden in a derived class, writes the given text content.</summary>
			<param name="text">The text to write. </param>
			<exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
			<summary>When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.</summary>
			<param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF. </param>
			<param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
			<exception cref="T:System.Exception">An invalid surrogate character pair was passed. </exception>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
			<summary>Writes a <see cref="T:System.Boolean"></see> value.</summary>
			<param name="value">The <see cref="T:System.Boolean"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
			<summary>Writes a <see cref="T:System.DateTime"></see> value.</summary>
			<param name="value">The <see cref="T:System.DateTime"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
			<summary>Writes a <see cref="T:System.Decimal"></see> value.</summary>
			<param name="value">The <see cref="T:System.Decimal"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
			<summary>Writes a <see cref="T:System.Double"></see> value.</summary>
			<param name="value">The <see cref="T:System.Double"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
			<summary>Writes a <see cref="T:System.Int32"></see> value.</summary>
			<param name="value">The <see cref="T:System.Int32"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
			<summary>Writes a <see cref="T:System.Int64"></see> value.</summary>
			<param name="value">The <see cref="T:System.Int64"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
			<summary>Writes the object value.</summary>
			<param name="value">The object value to write. </param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
			<summary>Writes a single-precision floating-point number.</summary>
			<param name="value">The single-precision floating-point number to write.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
			<summary>Writes a <see cref="T:System.String"></see> value.</summary>
			<param name="value">The <see cref="T:System.String"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
			<summary>When overridden in a derived class, writes out the given white space.</summary>
			<param name="ws">The string of white space characters. </param>
			<exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
		</member>
		<member name="P:System.Xml.XmlWriter.Settings">
			<summary>Gets the <see cref="T:System.Xml.XmlWriterSettings"></see> object used to create this <see cref="T:System.Xml.XmlWriter"></see> instance.</summary>
			<returns>The <see cref="T:System.Xml.XmlWriterSettings"></see> object used to create this writer instance. If this writer was not created using the <see cref="Overload:System.Xml.XmlWriter.Create"></see> method, this property returns null.</returns>
		</member>
		<member name="P:System.Xml.XmlWriter.WriteState">
			<summary>When overridden in a derived class, gets the state of the writer.</summary>
			<returns>One of the <see cref="T:System.Xml.WriteState"></see> values.</returns>
		</member>
		<member name="P:System.Xml.XmlWriter.XmlLang">
			<summary>When overridden in a derived class, gets the current xml:lang scope.</summary>
			<returns>The current xml:lang or null if there is no xml:lang in the current scope.</returns>
		</member>
		<member name="P:System.Xml.XmlWriter.XmlSpace">
			<summary>When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace"></see> representing the current xml:space scope.</summary>
			<returns>An XmlSpace representing the current xml:space scope.Value Meaning NoneThis is the default if no xml:space scope exists. DefaultThe current scope is xml:space="default". PreserveThe current scope is xml:space="preserve". </returns>
		</member>
		<member name="T:System.Xml.XmlWriterSettings">
			<summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlWriter"></see> object created by the <see cref="Overload:System.Xml.XmlWriter.Create"></see> method.</summary>
		</member>
		<member name="M:System.Xml.XmlWriterSettings.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriterSettings"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XmlWriterSettings.Clone">
			<summary>Creates a copy of the <see cref="T:System.Xml.XmlWriterSettings"></see> instance.</summary>
			<returns>The cloned <see cref="T:System.Xml.XmlWriterSettings"></see> object.</returns>
		</member>
		<member name="M:System.Xml.XmlWriterSettings.Reset">
			<summary>Resets the members of the settings class to their default values.</summary>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
			<summary>Gets or sets a value indicating whether to do character checking.</summary>
			<returns>true to do character checking; otherwise false. The default is true.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.CloseOutput">
			<summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlWriter"></see> should also close the underlying stream or <see cref="T:System.IO.TextWriter"></see> when the <see cref="M:System.Xml.XmlWriter.Close"></see> method is called.</summary>
			<returns>true to also close the underlying stream or <see cref="T:System.IO.TextWriter"></see>; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
			<summary>Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlWriter"></see> complies with.</summary>
			<returns>One of the <see cref="T:System.Xml.ConformanceLevel"></see> values. The default is ConformanceLevel.Document.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.Encoding">
			<summary>Gets or sets the text encoding to use.</summary>
			<returns>The text encoding to use. The default is Encoding.UTF8.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.Indent">
			<summary>Gets or sets a value indicating whether to indent elements.</summary>
			<returns>true to write individual elements on new lines and indent; otherwise false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.IndentChars">
			<summary>Gets or sets the character string to use when indenting. This setting is used when the <see cref="P:System.Xml.XmlWriterSettings.Indent"></see> property is set to true.</summary>
			<returns>The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.NewLineChars">
			<summary>Gets or sets the character string to use for line breaks. </summary>
			<returns>The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is \r\n (carriage return, new line).</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
			<summary>Gets or sets a value indicating whether to normalize line breaks in the output.</summary>
			<returns>One of the <see cref="T:System.Xml.NewLineHandling"></see> values. The default is <see cref="F:System.Xml.NewLineHandling.Replace"></see>.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
			<summary>Gets or sets a value indicating whether to write attributes on a new line.</summary>
			<returns>true to write attributes on individual lines; otherwise false. The default is false.This setting has no effect when the <see cref="P:System.Xml.XmlWriterSettings.Indent"></see> property value is false.When <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes"></see> is set to true, each attribute is pre-pended with a new line and one extra level of indentation.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
			<summary>Gets or sets a value indicating whether to write an XML declaration.</summary>
			<returns>true to omit the XML declaration; otherwise false. The default is false, an XML declaration is written.</returns>
		</member>
		<member name="P:System.Xml.XmlWriterSettings.OutputMethod">
			<summary>Gets the method used to serialize the <see cref="T:System.Xml.XmlWriter"></see> output.</summary>
			<returns>One of the <see cref="T:System.Xml.XmlOutputMethod"></see> values. The default is <see cref="F:System.Xml.XmlOutputMethod.Xml"></see>.</returns>
		</member>
		<member name="N:System.Xml.Schema">
			<summary>The <see cref="N:System.Xml.Schema"></see> namespace contains the XML classes that provide standards-based support for XML schema definition language (XSD) schemas.</summary>
		</member>
		<member name="T:System.Xml.Schema.IXmlSchemaInfo">
			<summary>Defines the post-schema-validation infoset of a validated XML node.</summary>
		</member>
		<member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
			<summary>Gets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.</summary>
			<returns>true if this validated XML node was set as the result of a default being applied during schema validation; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
			<summary>Gets a value indicating if the value for this validated XML node is nil.</summary>
			<returns>true if the value for this validated XML node is nil; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
			<summary>Gets the dynamic schema type for this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
			<summary>Gets the compiled <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> that corresponds to this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
			<summary>Gets the compiled <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> that corresponds to this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaElement"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
			<summary>Gets the static XML Schema Definition Language (XSD) schema type of this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaType"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaValidity"></see> value of this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaValidity"></see> value.</returns>
		</member>
		<member name="T:System.Xml.Schema.ValidationEventArgs">
			<summary>Returns detailed information related to the ValidationEventHandler.</summary>
		</member>
		<member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaException"></see> associated with the validation event.</summary>
			<returns>The XmlSchemaException associated with the validation event.</returns>
		</member>
		<member name="P:System.Xml.Schema.ValidationEventArgs.Message">
			<summary>Gets the text description corresponding to the validation event.</summary>
			<returns>The text description.</returns>
		</member>
		<member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
			<summary>Gets the severity of the validation event.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSeverityType"></see> value representing the severity of the validation event.</returns>
		</member>
		<member name="T:System.Xml.Schema.ValidationEventHandler">
			<summary>Represents the callback method that will handle XML schema validation events and the <see cref="T:System.Xml.Schema.ValidationEventArgs"></see>.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlAtomicValue">
			<summary>Represents the typed value of a validated XML element or attribute. The <see cref="T:System.Xml.Schema.XmlAtomicValue"></see> class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
			<summary>Returns a copy of this <see cref="T:System.Xml.Schema.XmlAtomicValue"></see> object.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue"></see> object copy of this <see cref="T:System.Xml.Schema.XmlAtomicValue"></see> object.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
			<summary>Gets the string value of the validated XML element or attribute.</summary>
			<returns>The string value of the validated XML element or attribute.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
			<summary>Returns the validated XML element or attribute's value as the type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified to resolve namespace prefixes.</summary>
			<returns>The value of the validated XML element or attribute as the type requested.</returns>
			<param name="type">The type to return the validated XML element or attribute's value as.</param>
			<param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used to resolve namespace prefixes.</param>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
			<exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the target type.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
			<summary>Gets a value indicating whether the validated XML element or attribute is an XPath node or an atomic value.</summary>
			<returns>true if the validated XML element or attribute is an XPath node; false if the validated XML element or attribute is an atomic value.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
			<summary>Gets the current validated XML element or attribute as a boxed object of the most appropriate Microsoft .NET Framework type according to its schema type.</summary>
			<returns>The current validated XML element or attribute as a boxed object of the most appropriate .NET Framework type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.Value">
			<summary>Gets the string value of the validated XML element or attribute.</summary>
			<returns>The string value of the validated XML element or attribute.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
			<summary>Gets the validated XML element or attribute's value as a <see cref="T:System.Boolean"></see>.</summary>
			<returns>The validated XML element or attribute's value as a <see cref="T:System.Boolean"></see>.</returns>
			<exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Boolean"></see> type.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean"></see> is not valid.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
			<summary>Gets the validated XML element or attribute's value as a <see cref="T:System.DateTime"></see>.</summary>
			<returns>The validated XML element or attribute's value as a <see cref="T:System.DateTime"></see>.</returns>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime"></see> is not valid.</exception>
			<exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.DateTime"></see> type.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
			<summary>Gets the validated XML element or attribute's value as a <see cref="T:System.Double"></see>.</summary>
			<returns>The validated XML element or attribute's value as a <see cref="T:System.Double"></see>.</returns>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double"></see> is not valid.</exception>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Double"></see> type.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
			<summary>Gets the validated XML element or attribute's value as an <see cref="T:System.Int32"></see>.</summary>
			<returns>The validated XML element or attribute's value as an <see cref="T:System.Int32"></see>.</returns>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32"></see> is not valid.</exception>
			<exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Int32"></see> type.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
			<summary>Gets the validated XML element or attribute's value as an <see cref="T:System.Int64"></see>.</summary>
			<returns>The validated XML element or attribute's value as an <see cref="T:System.Int64"></see>.</returns>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64"></see> is not valid.</exception>
			<exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Int64"></see> type.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
			<summary>Gets the Microsoft .NET Framework type of the validated XML element or attribute.</summary>
			<returns>The .NET Framework type of the validated XML element or attribute. The default value is <see cref="T:System.String"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaType"></see> for the validated XML element or attribute.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaType"></see> for the validated XML element or attribute.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchema">
			<summary>An in-memory representation of an XML Schema as specified in the World Wide Web Consortium (W3C) XML Schema Part 1: Structures and XML Schema Part 2: Datatypes specifications.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchema"></see> class.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
			<summary>The XML schema instance namespace. This field is constant. </summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchema.Namespace">
			<summary>The XML schema namespace. This field is constant.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
			<summary>Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.</summary>
			<param name="validationEventHandler">The validation event handler that receives information about XML Schema validation errors. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
			<summary>Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.</summary>
			<param name="r esolver">The XmlResolver used to resolve to resolve namespaces referenced in include and import elements. </param>
			<param name="validationEventHandler">The validation event handler that receives information about the XML Schema validation errors. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
			<summary>Reads an XML Schema  from the supplied stream.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchema"></see> object representing the XML Schema.</returns>
			<param name="stream">The supplied data stream. </param>
			<param name="validationEventHandler">The validation event handler that receives information about XML Schema syntax errors. </param>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException"></see> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> is specified.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
			<summary>Reads an XML Schema from the supplied <see cref="T:System.IO.TextReader"></see>.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchema"></see> object representing the XML Schema.</returns>
			<param name="reader">The TextReader containing the XML Schema to read. </param>
			<param name="validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors. </param>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException"></see> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> is specified.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
			<summary>Reads an XML Schema from the supplied <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchema"></see> object representing the XML Schema.</returns>
			<param name="reader">The XmlReader containing the XML Schema to read. </param>
			<param name="validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors. </param>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException"></see> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> is specified.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
			<summary>Writes the XML Schema to the supplied data stream.</summary>
			<param name="stream">The supplied data stream. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
			<summary>Writes the XML Schema to the supplied <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.IO.TextWriter"></see> to write to.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
			<summary>Writes the XML Schema to the supplied <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> to write to. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
			<summary>Writes the XML Schema to the supplied <see cref="T:System.IO.Stream"></see> using the <see cref="T:System.Xml.XmlNamespaceManager"></see> specified.</summary>
			<param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager"></see>.</param>
			<param name="stream">The supplied data stream. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
			<summary>Writes the XML Schema to the supplied <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.IO.TextWriter"></see> to write to.</param>
			<param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager"></see>. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
			<summary>Writes the XML Schema to the supplied <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> to write to.</param>
			<param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager"></see>. </param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
			<summary>Gets or sets the form for attributes declared in the target namespace of the schema.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaForm"></see> value that indicates if attributes from the target namespace are required to be qualified with the namespace prefix. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
			<summary>Gets the post-schema-compilation value of all the global attribute groups in the schema.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> collection of all the global attribute groups in the schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.Attributes">
			<summary>Gets the post-schema-compilation value for all the attributes in the schema.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> collection of all the attributes in the schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
			<summary>Gets or sets the blockDefault attribute which sets the default value of the block attribute on element and complex types in the targetNamespace of the schema.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod"></see> value representing the different methods for preventing derivation. The default value is XmlSchemaDerivationMethod.None.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
			<summary>Gets or sets the form for elements declared in the target namespace of the schema.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaForm"></see> value that indicates if elements from the target namespace are required to be qualified with the namespace prefix. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.Elements">
			<summary>Gets the post-schema-compilation value for all the elements in the schema.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> collection of all the elements in the schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
			<summary>Gets or sets the finalDefault attribute which sets the default value of the final attribute on elements and complex types in the target namespace of the schema.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod"></see> value representing the different methods for preventing derivation. The default value is XmlSchemaDerivationMethod.None.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.Groups">
			<summary>Gets the post-schema-compilation value of all the groups in the schema.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> collection of all the groups in the schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.Id">
			<summary>Gets or sets the string ID.</summary>
			<returns>The ID of the string. The default value is String.Empty.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.Includes">
			<summary>Gets the collection of included and imported schemas.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"></see> of the included and imported schemas.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
			<summary>Indicates if the schema has been compiled.</summary>
			<returns>true if schema has been compiled, otherwise, false. The default value is false.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.Items">
			<summary>Gets the collection of schema elements in the schema and is used to add new element types at the schema element level.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"></see> of schema elements in the schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.Notations">
			<summary>Gets the post-schema-compilation value for all notations in the schema.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> collection of all notations in the schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
			<summary>Gets the post-schema-compilation value of all schema types in the schema.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"></see> of all schema types in the schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
			<summary>Gets or sets the Uniform Resource Identifier (URI) of the schema target namespace.</summary>
			<returns>The schema target namespace.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
			<summary>Gets and sets the qualified attributes which do not belong to the schema target namespace.</summary>
			<returns>An array of qualified <see cref="T:System.Xml.XmlAttribute"></see> objects that do not belong to the schema target namespace.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchema.Version">
			<summary>Gets or sets the version of the schema.</summary>
			<returns>The version of the schema. The default value is String.Empty.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAll">
			<summary>Represents the World Wide Web Consortium (W3C) all element (compositor).</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAll"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAll.Items">
			<summary>Gets the collection of XmlSchemaElement elements contained within the all compositor.</summary>
			<returns>The collection of elements contained in XmlSchemaAll.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAnnotated">
			<summary>The base class for any element that can contain annotation elements.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnnotated"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
			<summary>Gets or sets the annotation property.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaAnnotation"></see> representing the annotation property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
			<summary>Gets or sets the string id.</summary>
			<returns>The string id. The default is String.Empty.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
			<summary>Gets or sets the qualified attributes that do not belong to the current schema's target namespace.</summary>
			<returns>An array of qualified <see cref="T:System.Xml.XmlAttribute"></see> objects that do not belong to the schema's target namespace.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAnnotation">
			<summary>Represents the World Wide Web Consortium (W3C) annotation element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnnotation"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
			<summary>Gets or sets the string id.</summary>
			<returns>The string id. The default is String.Empty.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
			<summary>Gets the Items collection that is used to store the appinfo and documentation child elements.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"></see> of appinfo and documentation child elements.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
			<summary>Gets or sets the qualified attributes that do not belong to the schema's target namespace.</summary>
			<returns>An array of <see cref="T:System.Xml.XmlAttribute"></see> objects that do not belong to the schema's target namespace.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAny">
			<summary>Represents the World Wide Web Consortium (W3C) any element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAny"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
			<summary>Gets or sets the namespaces containing the elements that can be used.</summary>
			<returns>Namespaces for elements that are available for use. The default is ##any.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
			<summary>Gets or sets information about how an application or XML processor should handle the validation of XML documents for the elements specified by the any element.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing"></see> values. If no processContents attribute is specified, the default is Strict.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
			<summary>Represents the World Wide Web Consortium (W3C) anyAttribute element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
			<summary>Gets or sets the namespaces containing the attributes that can be used.</summary>
			<returns>Namespaces for attributes that are available for use. The default is ##any.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
			<summary>Gets or sets information about how an application or XML processor should handle the validation of XML documents for the attributes specified by the anyAttribute element.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing"></see> values. If no processContents attribute is specified, the default is Strict.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAppInfo">
			<summary>Represents the World Wide Web Consortium (W3C) appinfo element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAppInfo"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
			<summary>Gets or sets an array of <see cref="T:System.Xml.XmlNode"></see> objects that represents the appinfo child nodes.</summary>
			<returns>An array of <see cref="T:System.Xml.XmlNode"></see> objects that represents the appinfo child nodes.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
			<summary>Gets or sets the source of the application information.</summary>
			<returns>A Uniform Resource Identifier (URI) reference. The default is String.Empty.Optional.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAttribute">
			<summary>Represents the attribute element from the XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. Attributes provide additional information for other document elements. The attribute tag is nested between the tags of a document's element for the schema. The XML document displays attributes as named items in the opening tag of an element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
			<summary>Gets an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> object representing the type of the attribute based on the <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType"></see> or <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName"></see> of the attribute.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
			<summary>Gets the common language runtime (CLR) object based on the <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType"></see> or <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName"></see> of the attribute that holds the post-compilation value of the AttributeType property.</summary>
			<returns>The common runtime library (CLR) object that holds the post-compilation value of the AttributeType property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
			<summary>Gets or sets the default value for the attribute.</summary>
			<returns>The default value for the attribute. The default is a null reference.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
			<summary>Gets or sets the fixed value for the attribute.</summary>
			<returns>The fixed value for the attribute. The default is null.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
			<summary>Gets or sets the form for the attribute.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"></see> values. The default is the value of the <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault"></see> of the schema element containing the attribute.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
			<summary>Gets or sets the name of the attribute.</summary>
			<returns>The name of the attribute.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
			<summary>Gets the qualified name for the attribute.</summary>
			<returns>The post-compilation value of the QualifiedName property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
			<summary>Gets or sets the name of an attribute declared in this schema (or another schema indicated by the specified namespace).</summary>
			<returns>The name of the attribute declared.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
			<summary>Gets or sets the attribute type to a simple type.</summary>
			<returns>The simple type defined in this schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
			<summary>Gets or sets the name of the simple type defined in this schema (or another schema indicated by the specified namespace).</summary>
			<returns>The name of the simple type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
			<summary>Gets or sets information about how the attribute is used.</summary>
			<returns>One of the following values: None, Prohibited, Optional, or Required. The default is Optional.Optional.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
			<summary>Represents the attributeGroup element from the XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. AttributesGroups provides a mechanism to group a set of attribute declarations so that they can be incorporated as a group into complex type definitions.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> component of the attribute group.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
			<summary>Gets the collection of attributes for the attribute group. Contains XmlSchemaAttribute and XmlSchemaAttributeGroupRef elements.</summary>
			<returns>The collection of attributes for the attribute group.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
			<summary>Gets or sets the name of the attribute group.</summary>
			<returns>The name of the attribute group.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
			<summary>Gets the qualified name of the attribute group.</summary>
			<returns>An <see cref="T:System.Xml.XmlQualifiedName"></see> object representing the qualified name of the attribute group.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
			<summary>Gets the redefined attribute group property from the XML Schema.</summary>
			<returns>The redefined attribute group property.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
			<summary>Represents the attributeGroup element with the ref attribute from the XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. AttributesGroupRef is the reference for an attributeGroup, name property contains the attribute group being referenced. </summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
			<summary>Gets or sets the name of the referenced attributeGroup element.</summary>
			<returns>The name of the referenced attribute group. The value must be a QName.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaChoice">
			<summary>Represents the choice element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. The choice allows only one of its children to appear in an instance. </summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
			<summary>Gets the collection of the elements contained with the compositor (choice): XmlSchemaElement, XmlSchemaGroupRef, XmlSchemaChoice, XmlSchemaSequence, or XmlSchemaAny.</summary>
			<returns>The collection of elements contained within XmlSchemaChoice.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaCollection">
			<summary>Contains a cache of XML Schema definition language (XSD) and XML-Data Reduced (XDR) schemas. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
			<summary>Initializes a new instance of the XmlSchemaCollection class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the XmlSchemaCollection class with the specified <see cref="T:System.Xml.XmlNameTable"></see>. The XmlNameTable is used when loading schemas.</summary>
			<param name="nametable">The XmlNameTable to use. </param>
		</member>
		<member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
			<summary>Sets an event handler for receiving information about the XDR and XML schema validation errors.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
			<summary>Adds the <see cref="T:System.Xml.Schema.XmlSchema"></see> to the collection.</summary>
			<returns>The XmlSchema object.</returns>
			<param name="schema">The XmlSchema to add to the collection. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
			<summary>Adds all the namespaces defined in the given collection (including their associated schemas) to this collection.</summary>
			<param name="schema">The XmlSchemaCollection you want to add to this collection. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
			<summary>Adds the schema located by the given URL into the schema collection.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchema"></see> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema.</returns>
			<param name="uri">The URL that specifies the schema to load. </param>
			<param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
			<exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
			<summary>Adds the schema contained in the <see cref="T:System.Xml.XmlReader"></see> to the schema collection.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchema"></see> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema.</returns>
			<param name="reader"><see cref="T:System.Xml.XmlReader"></see> containing the schema to add. </param>
			<param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
			<exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
			<summary>Adds the <see cref="T:System.Xml.Schema.XmlSchema"></see> to the collection. The specified <see cref="T:System.Xml.XmlResolver"></see> is used to resolve any external references.</summary>
			<returns>The XmlSchema added to the schema collection.</returns>
			<param name="schema">The XmlSchema to add to the collection. </param>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve namespaces referenced in include and import elements. If this is null, external references are not resolved. </param>
			<exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
			<summary>Adds the schema contained in the <see cref="T:System.Xml.XmlReader"></see> to the schema collection. The specified <see cref="T:System.Xml.XmlResolver"></see> is used to resolve any external resources.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchema"></see> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema.</returns>
			<param name="reader"><see cref="T:System.Xml.XmlReader"></see> containing the schema to add. </param>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve namespaces referenced in include and import elements or x-schema attribute (XDR schemas). If this is null, external references are not resolved. </param>
			<param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
			<exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
			<summary>Gets a value indicating whether a schema with the specified namespace is in the collection.</summary>
			<returns>true if a schema with the specified namespace is in the collection; otherwise, false.</returns>
			<param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the target namespace. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
			<summary>Gets a value indicating whether the targetNamespace of the specified <see cref="T:System.Xml.Schema.XmlSchema"></see> is in the collection.</summary>
			<returns>true if there is a schema in the collection with the same targetNamespace; otherwise, false.</returns>
			<param name="schema">The XmlSchema object. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
			<summary>Copies all the XmlSchema objects from this collection into the given array starting at the given index.</summary>
			<param name="array">The array to copy the objects to. </param>
			<param name="index">The index in array where copying will begin. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
			<summary>Provides support for the "for each" style iteration over the collection of schemas.</summary>
			<returns>An enumerator for iterating over all schemas in the current collection.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)"></see>.</summary>
			<param name="array">The array to copy the objects to. </param>
			<param name="index">The index in array where copying will begin. </param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
			<summary>Gets the number of namespaces defined in this collection.</summary>
			<returns>The number of namespaces defined in this collection.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchema"></see> associated with the given namespace URI.</summary>
			<returns>The XmlSchema associated with the namespace URI; null if there is no loaded schema associated with the given namespace or if the namespace is associated with an XDR schema.</returns>
			<param name="ns">The namespace URI associated with the schema you want to return. This will typically be the targetNamespace of the schema. </param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
			<summary>Gets the default XmlNameTable used by the XmlSchemaCollection when loading new schemas.</summary>
			<returns>An XmlNameTable.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
			<summary>Supports a simple iteration over a collection. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
			<summary>Advances the enumerator to the next schema in the collection.</summary>
			<returns>true if the move was successful; false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System.Collections.IEnumerator.Reset">
			<summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System.Collections.IEnumerator.Reset"></see>.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
			<summary>Gets the current <see cref="T:System.Xml.Schema.XmlSchema"></see> in the collection.</summary>
			<returns>The current XmlSchema in the collection.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
			<summary>Provides schema compilation options for the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> class This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings"></see> class. </summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
			<summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> should check for Unique Particle Attribution (UPA) violations.</summary>
			<returns>true if the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> should check for Unique Particle Attribution (UPA) violations; otherwise, false. The default is true.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaComplexContent">
			<summary>Represents the complexContent element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class represents the complex content model for complex types. It contains extensions or restrictions on a complex type that has either only elements or mixed content.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContent"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
			<summary>Gets or sets the content.</summary>
			<returns>One of either the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction"></see> or <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension"></see> classes.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
			<summary>Gets or sets information that determines if the type has a mixed content model.</summary>
			<returns>If this property is true, character data is allowed to appear between the child elements of the complex type (mixed content model). The default is false.Optional.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
			<summary>Represents the extension element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class is for complex types with complex content model derived by extension. It extends the complex type by adding attributes or elements.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> component of the complex content model.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> component of the complex content model.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
			<summary>Gets the collection of attributes for the complex content. Contains <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef"></see> elements.</summary>
			<returns>The collection of attributes for the complex content.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
			<summary>Gets or sets the name of the complex type from which this type is derived by extension.</summary>
			<returns>The name of the complex type from which this type is derived by extension.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
			<summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef"></see>, <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef"></see>, <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
			<summary>Represents the restriction element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class is for complex types with a complex content model derived by restriction. It restricts the contents of the complex type to a subset of the inherited complex type.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> component of the complex content model.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> component of the complex content model.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
			<summary>Gets the collection of attributes for the complex type. Contains the <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef"></see> elements.</summary>
			<returns>The collection of attributes for the complex type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
			<summary>Gets or sets the name of a complex type from which this type is derived by restriction.</summary>
			<returns>The name of the complex type from which this type is derived by restriction.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
			<summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef"></see>, <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef"></see>, <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaComplexType">
			<summary>Represents the complexType element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class defines a complex type that determines the set of attributes and content of an element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexType"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
			<summary>Gets or sets the value for the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> component of the complex type.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> component of the complex type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
			<summary>Gets the collection of attributes for the complex type.</summary>
			<returns>Contains <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef"></see> classes.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
			<summary>Gets the collection of all the complied attributes of this complex type and its base types.</summary>
			<returns>The collection of all the attributes from this complex type and its base types. The post-compilation value of the AttributeUses property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
			<summary>Gets the post-compilation value for anyAttribute for this complex type and its base type(s).</summary>
			<returns>The post-compilation value of the anyAttribute element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
			<summary>Gets or sets the block attribute.</summary>
			<returns>The block attribute prevents a complex type from being used in the specified type of derivation. The default is XmlSchemaDerivationMethod.None.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
			<summary>Gets the value after the type has been compiled to the post-schema-validation information set (infoset). This value indicates how the type is enforced when xsi:type is used in the instance document.</summary>
			<returns>The post-schema-validated infoset value. The default is BlockDefault value on the schema element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
			<summary>Gets or sets the post-compilation <see cref="T:System.Xml.Schema.XmlSchemaContentModel"></see> of this complex type.</summary>
			<returns>The content model type that is one of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent"></see> or <see cref="T:System.Xml.Schema.XmlSchemaComplexContent"></see> classes.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
			<summary>Gets the content model of the complex type which holds the post-compilation value.</summary>
			<returns>The post-compilation value of the content model for the complex type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
			<summary>Gets the particle which holds the post-compilation value of the ContentTypeParticle property.</summary>
			<returns>The particle for the content type. The post-compilation value of the ContentTypeParticle property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
			<summary>Gets or sets the information that determines if the complexType element can be used in the instance document.</summary>
			<returns>If true, an element cannot use this complexType element directly and must use a complex type that is derived from this complexType element. The default is false.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
			<summary>Gets or sets information that determines if the complex type has a mixed content model (markup within the content).</summary>
			<returns>true, if character data can appear between child elements of this complex type; otherwise, false. The default is false.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
			<summary>Gets or sets the compositor type as one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef"></see>, <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes.</summary>
			<returns>The compositor type.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaContent">
			<summary>An abstract class for schema content.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaContent"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaContentModel">
			<summary>Specifies the order and structure of the child elements of a type.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaContentModel"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
			<summary>Gets or sets the content of the type.</summary>
			<returns>Provides the content of the type.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
			<summary>Provides information about the validation mode of any and anyAttribute element replacements.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
			<summary>If the associated schema is found, the document items will be validated. No errors will be thrown otherwise.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
			<summary>Document items are not validated.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
			<summary>Document items must consist of well-formed XML and are not validated by the schema.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
			<summary>The schema processor must find a schema associated with the indicated namespace to validate the document items.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaContentType">
			<summary>Enumerations for the content model of the complex type. This represents the content in the post-schema-validation information set (infoset).</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
			<summary>Element-only content.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
			<summary>Empty content.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
			<summary>Mixed content.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
			<summary>Text-only content.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaDatatype">
			<summary>The <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see> class is an abstract class for mapping XML Schema definition language (XSD) types to Common Language Runtime (CLR) types.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaDatatype.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
			<summary>Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see>, to the CLR type specified.</summary>
			<returns>The converted input value.</returns>
			<param name="targetType">The target type to convert the input value to.</param>
			<param name="value">The input value to convert to the specified type.</param>
			<exception cref="T:System.InvalidCastException">The type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see>   does not support a conversion from type of the value specified to the type specified.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Object"></see> or <see cref="T:System.Type"></see> parameter is null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
			<summary>Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see>, to the CLR type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> if the <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see> represents the xs:QName type or a type derived from it.</summary>
			<returns>The converted input value.</returns>
			<param name="targetType">The target type to convert the input value to.</param>
			<param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver"></see> used for resolving namespace prefixes. This is only of use if the <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see>  represents the xs:QName type or a type derived from it.</param>
			<param name="value">The input value to convert to the specified type.</param>
			<exception cref="T:System.InvalidCastException">The type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see>   does not support a conversion from type of the value specified to the type specified.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Object"></see> or <see cref="T:System.Type"></see> parameter is null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
			<summary>The <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)"></see> method always returns false.</summary>
			<returns>Always returns false.</returns>
			<param name="datatype">The <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see>.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
			<summary>When overridden in a derived class, validates the string specified against a built-in or user-defined simple type.</summary>
			<returns>An <see cref="T:System.Object"></see> that can be cast safely to the type returned by the <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType"></see> property.</returns>
			<param name="s">The string to validate against the simple type.</param>
			<param name="nsmgr">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object to use while parsing the string if this <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see> object represents the xs:QName type.</param>
			<param name="nameTable">The <see cref="T:System.Xml.XmlNameTable"></see> to use for atomization while parsing the string if this <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see> object represents the xs:NCName type. </param>
			<exception cref="T:System.ArgumentNullException">The value to parse cannot be null.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The input value is not a valid instance of this W3C XML Schema type.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
			<summary>When overridden in a derived class, gets the type for the string as specified in the World Wide Web Consortium (W3C) XML 1.0 specification.</summary>
			<returns>An <see cref="T:System.Xml.XmlTokenizedType"></see> value for the string.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlTypeCode"></see> value for the simple type.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlTypeCode"></see> value for the simple type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
			<summary>When overridden in a derived class, gets the Common Language Runtime (CLR) type of the item.</summary>
			<returns>The Common Language Runtime (CLR) type of the item.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety"></see> value for the simple type.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety"></see> value for the simple type.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
			<summary>Specifies the W3C XML schema data type variety of the type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
			<summary>A W3C XML schema atomic type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
			<summary>A W3C XML schema list type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
			<summary>A W3C XML schema union type.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
			<summary>Provides different methods for preventing derivation.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
			<summary>#all. Refers to all derivation methods.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
			<summary>Override default derivation method to allow any derivation.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
			<summary>Refers to derivations by Extension.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
			<summary>Refers to derivations by List.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
			<summary>Accepts the default derivation method.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
			<summary>Refers to derivations by Restriction.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
			<summary>Refers to derivations by Substitution.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
			<summary>Refers to derivations by Union.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaDocumentation">
			<summary>Represents the documentation element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class specifies information to be read or used by humans within an annotation.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaDocumentation"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
			<summary>Gets or sets the xml:lang attribute. This serves as an indicator of the language used in the contents.</summary>
			<returns>The xml:lang attribute.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
			<summary>Gets or sets an array of XmlNodes that represents the documentation child nodes.</summary>
			<returns>The array that represents the documentation child nodes.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
			<summary>Gets or sets the Uniform Resource Identifier (URI) source of the information.</summary>
			<returns>A URI reference. The default is String.Empty.Optional.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaElement">
			<summary>Represents the element element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class is the base class for all particle types and is used to describe an element in an XML document.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.Block">
			<summary>Gets or sets a Block derivation.</summary>
			<returns>The attribute used to block a type derivation. Default value is XmlSchemaDerivationMethod.None.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
			<summary>Gets the post-compilation value of the Block property.</summary>
			<returns>The post-compilation value of the Block property. The default is the BlockDefault value on the schema element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
			<summary>Gets the collection of constraints on the element.</summary>
			<returns>The collection of constraints.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
			<summary>Gets or sets the default value of the element if its content is a simple type or content of the element is textOnly.</summary>
			<returns>The default value for the element. The default is a null reference.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
			<summary>Gets an <see cref="T:System.Xml.Schema.XmlSchemaType"></see> object representing the type of the element based on the <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType"></see> or <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName"></see> values of the element.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaType"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
			<summary>Gets a common language runtime (CLR) object based on the <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> or <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> of the element, which holds the post-compilation value of the ElementType property.</summary>
			<returns>The common language runtime object. The post-compilation value of the ElementType property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.Final">
			<summary>Gets or sets the Final property to indicate that no further derivations are allowed.</summary>
			<returns>The Final property. The default is XmlSchemaDerivationMethod.None.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
			<summary>Gets the post-compilation value of the Final property.</summary>
			<returns>The post-compilation value of the Final property. Default value is the FinalDefault value on the schema element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
			<summary>Gets or sets the fixed value.</summary>
			<returns>The fixed value that is predetermined and unchangeable. The default is a null reference.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.Form">
			<summary>Gets or sets the form for the element.</summary>
			<returns>The form for the element. The default is the <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault"></see> value.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
			<summary>Gets or sets information to indicate if the element can be used in an instance document.</summary>
			<returns>If true, the element cannot appear in the instance document. The default is false.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
			<summary>Gets or sets information that indicates if xsi:nil can occur in the instance data. Indicates if an explicit nil value can be assigned to the element.</summary>
			<returns>If nillable is true, this enables an instance of the element to have the nil attribute set to true. The nil attribute is defined as part of the XML Schema namespace for instances. The default is false.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.Name">
			<summary>Gets or sets the name of the element.</summary>
			<returns>The name of the element. The default is String.Empty.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
			<summary>Gets the actual qualified name for the given element. </summary>
			<returns>The qualified name of the element. The post-compilation value of the QualifiedName property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
			<summary>Gets or sets the reference name of an element declared in this schema (or another schema indicated by the specified namespace).</summary>
			<returns>The reference name of the element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
			<summary>Gets or sets the type of the element. This can either be a complex type or a simple type.</summary>
			<returns>The type of the element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
			<summary>Gets or sets the name of a built-in data type defined in this schema or another schema indicated by the specified namespace.</summary>
			<returns>The name of the built-in data type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
			<summary>Gets or sets the name of an element that is being substituted by this element.</summary>
			<returns>The qualified name of an element that is being substituted by this element.Optional.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
			<summary>Represents the enumeration facet from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class specifies a list of valid values for a simpleType element. Declaration is contained within a restriction declaration.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaException">
			<summary>Returns detailed information about the schema exception.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException"></see> class with the exception message specified.</summary>
			<param name="message">A string description of the error condition.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Constructs a new XmlSchemaException object with the given SerializationInfo and StreamingContext information that contains all the properties of the XmlSchemaException.</summary>
			<param name="context">StreamingContext.</param>
			<param name="info">SerializationInfo.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException"></see> class with the exception message and original <see cref="T:System.Exception"></see> object that caused this exception specified.</summary>
			<param name="message">A string description of the error condition.</param>
			<param name="innerException">The original T:System.Exceptionms-help://AstroNS2/cpref/html/T_System_Exception.htmobject that caused this exception.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException"></see> class with the exception message specified, and the original <see cref="T:System.Exception"></see> object, line number, and line position of the XML that cause this exception specified.</summary>
			<param name="message">A string description of the error condition.</param>
			<param name="linePosition">The line position of the XML that caused this exception.</param>
			<param name="innerException">The original T:System.Exceptionms-help://AstroNS2/cpref/html/T_System_Exception.htmobject that caused this exception.</param>
			<param name="lineNumber">The line number of the XML that caused this exception.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Streams all the XmlSchemaException properties into the SerializationInfo class for the given StreamingContext.</summary>
			<param name="context">The StreamingContext information. </param>
			<param name="info">The SerializationInfo. </param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
			<summary>Gets the line number indicating where the error occurred.</summary>
			<returns>The line number indicating where the error occurred.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
			<summary>Gets the line position indicating where the error occurred.</summary>
			<returns>The line position indicating where the error occurred.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaException.Message">
			<summary>Gets the description of the error condition of this exception.</summary>
			<returns>The description of the error condition of this exception.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
			<summary>The XmlSchemaObject that produced the XmlSchemaException.</summary>
			<returns>A valid object instance represents a structural validation error in the XML Schema Object Model (SOM).</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
			<summary>Gets the Uniform Resource Identifier (URI) location of the schema that caused the exception.</summary>
			<returns>The URI location of the schema that caused the exception.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaExternal">
			<summary>An abstract class. Provides information about the included schema.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaExternal"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
			<summary>Gets or sets the string id.</summary>
			<returns>The string id. The default is String.Empty.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
			<summary>Gets or sets the XmlSchema for the referenced schema.</summary>
			<returns>The XmlSchema for the referenced schema.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
			<summary>Gets or sets the Uniform Resource Identifier (URI) location for the schema, which tells the schema processor where the schema physically resides.</summary>
			<returns>The URI location for the schema.Optional for imported schemas.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
			<summary>Gets and sets the qualified attributes, which do not belong to the schema target namespace.</summary>
			<returns>Qualified attributes that belong to another target namespace.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaFacet">
			<summary>Abstract class for all facets that are used when simple types are derived by restriction.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaFacet"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
			<summary>Gets or sets information that indicates that this facet is fixed.</summary>
			<returns>If true, value is fixed; otherwise, false. The default is false.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
			<summary>Gets or sets the value attribute of the facet.</summary>
			<returns>The value attribute.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaForm">
			<summary>Indicates if attributes or elements need to be qualified with a namespace prefix.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaForm.None">
			<summary>Element and attribute form is not specified in the schema.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
			<summary>Elements and attributes must be qualified with a namespace prefix.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
			<summary>Elements and attributes are not required to be qualified with a namespace prefix.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
			<summary>Specifies a restriction on the number of digits that can be entered for the fraction value of a simpleType element. The value of fractionDigits must be a positive integer. Represents the World Wide Web Consortium (W3C) fractionDigits facet.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaGroup">
			<summary>Represents the group element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class defines groups at the schema level that are referenced from the complex types. It groups a set of element declarations so that they can be incorporated as a group into complex type definitions.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroup"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
			<summary>Gets or sets the name of the schema group.</summary>
			<returns>The name of the schema group.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
			<summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
			<summary>Gets the qualified name of the schema group.</summary>
			<returns>An <see cref="T:System.Xml.XmlQualifiedName"></see> object representing the qualified name of the schema group.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaGroupBase">
			<summary>An abstract class for <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see>.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaGroupBase.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroupBase"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
			<summary>This collection is used to add new elements to the compositor.</summary>
			<returns>An XmlSchemaObjectCollection.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaGroupRef">
			<summary>Represents the group element with ref attribute from the XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class is used within complex types that reference a group defined at the schema level.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
			<summary>Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes, which holds the post-compilation value of the Particle property.</summary>
			<returns>The post-compilation value of the Particle property, which is one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAll"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> classes.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
			<summary>Gets or sets the name of a group defined in this schema (or another schema indicated by the specified namespace).</summary>
			<returns>The name of a group defined in this schema.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
			<summary>Class for the identity constraints: key, keyref, and unique elements.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
			<summary>Gets the collection of fields that apply as children for the XML Path Language (XPath) expression selector.</summary>
			<returns>The collection of fields.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
			<summary>Gets or sets the name of the identity constraint.</summary>
			<returns>The name of the identity constraint.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
			<summary>Gets the qualified name of the identity constraint, which holds the post-compilation value of the QualifiedName property.</summary>
			<returns>The post-compilation value of the QualifiedName property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
			<summary>Gets or sets the XPath expression selector element.</summary>
			<returns>The XPath expression selector element.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaImport">
			<summary>Represents the import element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class is used to import schema components from other schemas.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaImport"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
			<summary>Gets or sets the annotation property.</summary>
			<returns>The annotation.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
			<summary>Gets or sets the target namespace for the imported schema as a Uniform Resource Identifier (URI) reference.</summary>
			<returns>The target namespace for the imported schema as a URI reference.Optional.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaInclude">
			<summary>Represents the include element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class is used to include declarations and definitions from an external schema. The included declarations and definitions are then available for processing in the containing schema.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInclude"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
			<summary>Gets or sets the annotation property.</summary>
			<returns>The annotation.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaInference">
			<summary>Infers an XML Schema Definition Language (XSD) schema from an XML document. The <see cref="T:System.Xml.Schema.XmlSchemaInference"></see> class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInference"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
			<summary>Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the <see cref="T:System.Xml.XmlReader"></see> object specified.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object containing the inferred schemas.</returns>
			<param name="instanceDocument">An <see cref="T:System.Xml.XmlReader"></see> object containing the XML document to infer a schema from.</param>
			<exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">The <see cref="T:System.Xml.XmlReader"></see> object is not positioned on the root node or on an element. An error occurs during the schema inference process.</exception>
			<exception cref="T:System.Xml.XmlException">The XML document is not well-formed.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
			<summary>Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the <see cref="T:System.Xml.XmlReader"></see> object specified, and refines the inferred schema using an existing schema in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object specified with the same target namespace.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object containing the inferred schemas.</returns>
			<param name="instanceDocument">An <see cref="T:System.Xml.XmlReader"></see> object containing the XML document to infer a schema from.</param>
			<param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object containing an existing schema used to refine the inferred schema.</param>
			<exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">The <see cref="T:System.Xml.XmlReader"></see> object is not positioned on the root node or on an element. An error occurs during the schema inference process.</exception>
			<exception cref="T:System.Xml.XmlException">The XML document is not well-formed.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption"></see> value that affects schema occurrence declarations inferred from the XML document.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption"></see> value that affects types inferred from the XML document.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption"></see> object.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
			<summary>Affects occurrence and type information inferred by the <see cref="T:System.Xml.Schema.XmlSchemaInference"></see> class for elements and attributes in an XML document. </summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
			<summary>Indicates that a less restrictive schema declaration should be inferred for a particular element or attribute.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
			<summary>Indicates that a more restrictive schema declaration should be inferred for a particular element or attribute.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaInferenceException">
			<summary>Returns information about errors encountered by the <see cref="T:System.Xml.Schema.XmlSchemaInference"></see> class while inferring a schema from an XML document.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see> class with the error message specified.</summary>
			<param name="message">A description of the error.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see> class with the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects specified that contain all the properties of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see>.</summary>
			<param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object.</param>
			<param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see> class with the error message specified and the original <see cref="T:System.Exception"></see> that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see> specified.</summary>
			<param name="message">A description of the error.</param>
			<param name="innerException">An <see cref="T:System.Exception"></see> object containing the original exception that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see>.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see> class with the error message specified, the original <see cref="T:System.Exception"></see> that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see> specified, and the line number and line position of the error in the XML document specified.</summary>
			<param name="message">A description of the error.</param>
			<param name="linePosition">The line position in the XML document that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see>.</param>
			<param name="innerException">An <see cref="T:System.Exception"></see> object containing the original exception that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see>.</param>
			<param name="lineNumber">The line number in the XML document that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see>.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Streams all the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException"></see> object properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object specified for the <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object specified.</summary>
			<param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object.</param>
			<param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object.</param>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaInfo">
			<summary>Represents the post-schema-validation infoset of a validated XML node.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaContentType"></see> object that corresponds to the content type of this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaContentType"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
			<summary>Gets or sets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.</summary>
			<returns>A bool value.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
			<summary>Gets or sets a value indicating if the value for this validated XML node is nil.</summary>
			<returns>A bool value.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
			<summary>Gets or sets the dynamic schema type for this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
			<summary>Gets or sets the compiled <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> object that corresponds to this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
			<summary>Gets or sets the compiled <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> object that corresponds to this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
			<summary>Gets or sets the static XML Schema Definition Language (XSD) schema type of this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaType"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaValidity"></see> value of this validated XML node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaValidity"></see> value.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaKey">
			<summary>This class represents the key element from XMLSchema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaKey"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaKeyref">
			<summary>This class represents the keyref element from XMLSchema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaKeyref"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
			<summary>Gets or sets the name of the key that this constraint refers to in another simple or complex type.</summary>
			<returns>The QName of the key that this constraint refers to.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
			<summary>Represents the length facet from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the length of a simpleType element on the data type.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
			<summary>Represents the maxExclusive element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the maximum value of a simpleType element. The element value must be less than the value of the maxExclusive element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
			<summary>Represents the maxInclusive element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the maximum value of a simpleType element. The element value must be less than or equal to the value of the maxInclusive element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
			<summary>Represents the maxLength element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the maximum length of the data value of a simpleType element. The length must be less than the value of the maxLength element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxLength"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
			<summary>Represents the minExclusive element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than the value of the minExclusive element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
			<summary>Represents the minInclusive element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than or equal to the value of the minInclusive element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
			<summary>Represents the minLength element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the minimum length of the data value of a simpleType element. The length must be greater than the value of the minLength element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaNotation">
			<summary>Represents the notation element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. An XML Schema notation declaration is a reconstruction of XML 1.0 NOTATION declarations. The purpose of notations is to describe the format of non-XML data within an XML document.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaNotation"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
			<summary>Gets or sets the name of the notation.</summary>
			<returns>The name of the notation.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
			<summary>Gets or sets the public identifier.</summary>
			<returns>The public identifier. The value must be a valid Uniform Resource Identifier (URI).</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaNotation.System">
			<summary>Gets or sets the system identifier.</summary>
			<returns>The system identifier. The value must be a valid URI.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
			<summary>Abstract class for defining numeric facets. This class is the base class for numeric facet classes such as <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet"></see></summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaObject">
			<summary>Represents the root class for the Xml schema object model hierarchy and serves as a base class for classes such as the <see cref="T:System.Xml.Schema.XmlSchema"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
			<summary>Gets or sets the line number in the file to which the schema element refers.</summary>
			<returns>The line number.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
			<summary>Gets or sets the line position in the file to which the schema element refers.</summary>
			<returns>The line position.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
			<summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> to use with this schema object.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> property for the schema object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
			<summary>Gets or sets the parent of this <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>.</summary>
			<returns>The parent <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> of this <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
			<summary>Gets or sets the source location for the file that loaded the schema.</summary>
			<returns>The source location (URI) for the file.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
			<summary>A collection of <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>s.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
			<summary>Initializes a new instance of the XmlSchemaObjectCollection class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
			<summary>Initializes a new instance of the XmlSchemaObjectCollection class that takes an <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>.</summary>
			<param name="parent">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
			<summary>Adds an <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> to the XmlSchemaObjectCollection.</summary>
			<returns>The index at which the item has been added.</returns>
			<param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>. </param>
			<exception cref="T:System.InvalidCastException">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> parameter specified is not of type <see cref="T:System.Xml.Schema.XmlSchemaExternal"></see> or its derived types <see cref="T:System.Xml.Schema.XmlSchemaImport"></see>, <see cref="T:System.Xml.Schema.XmlSchemaInclude"></see>, and <see cref="T:System.Xml.Schema.XmlSchemaRedefine"></see>.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or- index is greater than Count. </exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
			<summary>Indicates if the specified <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> is in the XmlSchemaObjectCollection.</summary>
			<returns>true if the specified qualified name is in the collection; otherwise, returns false. If null is supplied, false is returned because there is no qualified name with a null name.</returns>
			<param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
			<summary>Copies all the <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>s from the collection into the given array, starting at the given index.</summary>
			<param name="array">The one-dimensional array that is the destination of the elements copied from the XmlSchemaObjectCollection. The array must have zero-based indexing. </param>
			<param name="index">The zero-based index in the array at which copying begins. </param>
			<exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic). </exception>
			<exception cref="T:System.ArgumentException">array is multi-dimensional.- or - index is equal to or greater than the length of array.- or - The number of elements in the source <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> is greater than the available space from index to the end of the destination array. </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
			<exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> cannot be cast automatically to the type of the destination array. </exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
			<summary>Returns an enumerator for iterating through the XmlSchemaObjects contained in the XmlSchemaObjectCollection.</summary>
			<returns>The iterator returns <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator"></see>.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
			<summary>Gets the collection index corresponding to the specified <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>.</summary>
			<returns>The index corresponding to the specified <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>.</returns>
			<param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> whose index you want to return. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
			<summary>Inserts an <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> to the XmlSchemaObjectCollection.</summary>
			<param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> to insert. </param>
			<param name="index">The zero-based index at which an item should be inserted. </param>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or- index is greater than Count. </exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
			<summary>OnClear is invoked before the standard Clear behavior. For more information, see OnClear method for <see cref="T:System.Collections.CollectionBase"></see>.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
			<summary>OnInsert is invoked before the standard Insert behavior. For more information, see OnInsert method <see cref="T:System.Collections.CollectionBase"></see>.</summary>
			<param name="item">The item. </param>
			<param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
			<summary>OnRemove is invoked before the standard Remove behavior. For more information, see the OnRemove method for <see cref="T:System.Collections.CollectionBase"></see>.</summary>
			<param name="item">The item. </param>
			<param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
			<summary>OnSet is invoked before the standard Set behavior. For more information, see the OnSet method for <see cref="T:System.Collections.CollectionBase"></see>.</summary>
			<param name="oldValue">The old value. </param>
			<param name="newValue">The new value. </param>
			<param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
			<summary>Removes an <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> from the XmlSchemaObjectCollection.</summary>
			<param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> to remove. </param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> at the specified index.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> at the specified index.</returns>
			<param name="index">The index of the <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>. </param>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
			<summary>Represents the enumerator for the <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"></see>.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
			<summary>Moves to the next item in the collection.</summary>
			<returns>false at the end of the collection.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
			<summary>Resets the enumerator to the start of the collection.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System.Collections.IEnumerator.Reset">
			<summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset"></see>.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
			<summary>Gets the current <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> in the collection.</summary>
			<returns>The current <see cref="T:System.Xml.Schema.XmlSchemaObject"></see>.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaObjectTable">
			<summary>This class is used to provide the collections for contained elements in the XmlSchema class (for example, Attributes, AttributeGroups, Elements, and so on).</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
			<summary>Returns true if an object matching the <see cref="T:System.Xml.XmlQualifiedName"></see> exists in the collection.</summary>
			<returns>true if the qualified name is in the collection; otherwise, false.</returns>
			<param name="name">The XmlQualifiedName. </param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
			<summary>Returns an enumerator for the XmlSchemaObject contained in the collection.</summary>
			<returns>Returns the XmlSchemaObject objects.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
			<summary>Gets the count of the items in the table.</summary>
			<returns>The count of the items in the table.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
			<summary>Looks up the qualified name by the supplied XmlQualifiedName and returns the XmlSchemaObject which is the XML Schema definition language (XSD) element for this qualified name. Returns a null reference if there is a qualified "no" name associated with the given name.</summary>
			<returns>The qualified name.</returns>
			<param name="name">The XmlQualifiedName. </param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
			<summary>Returns a collection of all the named elements in the collection as XmlSchemaObject.</summary>
			<returns>The names in the collection.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
			<summary>Returns a collection of the values for all the elements in the collection as XmlSchemaObject.</summary>
			<returns>The values of the elements.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaParticle">
			<summary>Abstract class for that is the base class for all particle types (e.g. <see cref="T:System.Xml.Schema.XmlSchemaAny"></see>).</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaParticle"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
			<summary>Gets or sets the maximum number of times the particle can occur.</summary>
			<returns>The maximum number of times the particle can occur. The default is 1.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
			<summary>Gets or sets the number as a string value. Maximum number of times the particle can occur.</summary>
			<returns>The number as a string value. String.Empty indicates that MaxOccurs is equal to the default value. The default is a null reference.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
			<summary>Gets or sets the minimum number of times the particle can occur.</summary>
			<returns>The minimum number of times the particle can occur. The default is 1.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
			<summary>Gets or sets the number as a string value. The minimum number of times the particle can occur.</summary>
			<returns>The number as a string value. String.Empty indicates that MinOccurs is equal to the default value. The default is a null reference.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
			<summary>Represents the pattern element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the value entered for a simpleType element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaRedefine">
			<summary>Represents the redefine element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to allow simple and complex types, groups and attribute groups from external schema files to be redefined in the current schema. This class can also be used to provide versioning for the schema elements.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaRedefine"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> , for all attributes in the schema, which holds the post-compilation value of the AttributeGroups property.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> for all attributes in the schema. The post-compilation value of the AttributeGroups property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see>, for all groups in the schema, which holds the post-compilation value of the Groups property.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> for all groups in the schema. The post-compilation value of the Groups property.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
			<summary>Gets the collection of the following classes: <see cref="T:System.Xml.Schema.XmlSchemaAnnotation"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup"></see>, <see cref="T:System.Xml.Schema.XmlSchemaComplexType"></see>, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see>, and <see cref="T:System.Xml.Schema.XmlSchemaGroup"></see>.</summary>
			<returns>The elements contained within the redefine element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see>, for all simple and complex types in the schema, which holds the post-compilation value of the SchemaTypes property.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see> for all schema types in the schema. The post-compilation value of the SchemaTypes property.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSequence">
			<summary>Represents the sequence element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. The sequence requires the elements in the group to appear in the specified sequence within the containing element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
			<summary>The elements contained within the compositor. Collection of <see cref="T:System.Xml.Schema.XmlSchemaElement"></see>, <see cref="T:System.Xml.Schema.XmlSchemaGroupRef"></see>, <see cref="T:System.Xml.Schema.XmlSchemaChoice"></see>, <see cref="T:System.Xml.Schema.XmlSchemaSequence"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaAny"></see>.</summary>
			<returns>The elements contained within the compositor.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSet">
			<summary>Contains a cache of XML Schema definition language (XSD) schemas.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> class with the specified <see cref="T:System.Xml.XmlNameTable"></see>.</summary>
			<param name="nameTable">The <see cref="T:System.Xml.XmlNameTable"></see> object to use.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlNameTable"></see> object passed as a parameter is null.</exception>
		</member>
		<member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
			<summary>Sets an event handler for receiving information about XML Schema definition language (XSD) schema validation errors.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
			<summary>Adds the given <see cref="T:System.Xml.Schema.XmlSchema"></see> to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchema"></see> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> is specified, then null is returned and the appropriate validation event is raised. Otherwise an <see cref="T:System.Xml.Schema.XmlSchemaException"></see> is thrown.</returns>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object to add to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object passed as a parameter is null.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
			<summary>Adds all the XML Schema definition language (XSD) schemas in the given <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object passed as a parameter is null.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">A schema in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> is not valid.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
			<summary>Adds the XML Schema definition language (XSD) schema at the URL specified to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchema"></see> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> is specified, then null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException"></see> is thrown.</returns>
			<param name="schemaUri">The URL that specifies the schema to load.</param>
			<param name="targetNamespace">The schema targetNamespace property, or null to use the targetNamespace specified in the schema.</param>
			<exception cref="T:System.ArgumentNullException">The URL passed as a parameter is null or <see cref="F:System.String.Empty"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
			<summary>Adds the XML Schema definition language (XSD) schema contained in the <see cref="T:System.Xml.XmlReader"></see> to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchema"></see> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> is specified, then null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException"></see> is thrown.</returns>
			<param name="schemaDocument">The <see cref="T:System.Xml.XmlReader"></see> object.</param>
			<param name="targetNamespace">The schema targetNamespace property, or null to use the targetNamespace specified in the schema.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader"></see> object passed as a parameter is null.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
			<summary>Compiles the XML Schema definition language (XSD) schemas added to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> into one logical schema.</summary>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">An error occurred when validating and compiling the schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
			<summary>Indicates whether an XML Schema definition language (XSD) schema with the specified target namespace URI is in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>Returns true if a schema with the specified target namespace URI is in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>; otherwise, false.</returns>
			<param name="targetNamespace">The schema targetNamespace property.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
			<summary>Indicates whether the specified XML Schema definition language (XSD) <see cref="T:System.Xml.Schema.XmlSchema"></see> object is in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.Schema.XmlSchema"></see> object is in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>; otherwise, false.</returns>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> passed as a parameter is null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
			<summary>Copies all the <see cref="T:System.Xml.Schema.XmlSchema"></see> objects from the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to the given array, starting at the given index.</summary>
			<param name="schemas">The array to copy the objects to.</param>
			<param name="index">The index in the array where copying will begin.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
			<summary>Removes the specified XML Schema definition language (XSD) schema from the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchema"></see> object removed from the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> or null if the schema was not found in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</returns>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object to remove from the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema"></see> passed as a parameter is null.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not a valid schema.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
			<summary>Removes the specified XML Schema definition language (XSD) schema and all the schemas it imports from the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.Schema.XmlSchema"></see> object and all its imports were successfully removed; otherwise, false.</returns>
			<param name="schemaToRemove">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object to remove from the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema"></see> passed as a parameter is null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
			<summary>Reprocesses an XML Schema definition language (XSD) schema that already exists in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchema"></see> object if the schema is a valid schema. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> is specified, null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException"></see> is thrown.</returns>
			<param name="schema">The schema to reprocess.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object passed as a parameter does not already exist in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object passed as a parameter is null.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
			<summary>Returns a collection of all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> object containing all the schemas that have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>. If no schemas have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>, an empty <see cref="T:System.Collections.ICollection"></see> object is returned.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
			<summary>Returns a collection of all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that belong to the given namespace.</summary>
			<returns>An <see cref="T:System.Collections.ICollection"></see> object containing all the schemas that have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that belong to the given namespace. If no schemas have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>, an empty <see cref="T:System.Collections.ICollection"></see> object is returned.</returns>
			<param name="targetNamespace">The schema targetNamespace property.</param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings"></see> for the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings"></see> for the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>. The default is an <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings"></see> instance with the <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck"></see> property set to true.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSet.Count">
			<summary>Gets the number of logical XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>The number of logical schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
			<summary>Gets all the global attributes in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
			<summary>Gets all the global elements in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
			<summary>Gets all of the global simple and complex types in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
			<summary>Indicates if the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> have been compiled.</summary>
			<returns>Returns true if the schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> have been compiled since the last time a schema was added or removed from the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
			<summary>Gets the default <see cref="T:System.Xml.XmlNameTable"></see> used by the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> when loading new XML Schema definition language (XSD) schemas.</summary>
			<returns>An <see cref="T:System.Xml.XmlNameTable"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
			<summary>Sets the <see cref="T:System.Xml.XmlResolver"></see> used to resolve namespaces or locations referenced in include and import elements of a schema.</summary>
			<returns>The <see cref="T:System.Xml.XmlResolver"></see> used to resolve namespaces or locations referenced in include and import elements of a schema.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
			<summary>Represents the simpleContent element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class is for simple and complex types with simple content model.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
			<summary>Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction"></see> or <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension"></see>.</summary>
			<returns>The content contained within the XmlSchemaSimpleContentRestriction or XmlSchemaSimpleContentExtension class.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
			<summary>Represents the extension element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to derive simple types by extension. Such derivations are used to extend the simple type content of the element by adding attributes.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
			<summary>Gets or sets the XmlSchemaAnyAttribute to be used for the attribute value.</summary>
			<returns>The XmlSchemaAnyAttribute.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
			<summary>Gets the collection of <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef"></see>.</summary>
			<returns>The collection of attributes for the simpleType element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
			<summary>Gets or sets the name of a built-in data type or simple type from which this type is extended.</summary>
			<returns>The base type name.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
			<summary>Represents the restriction element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to derive simple types by restriction. Such derivations can be used to restrict the range of values for the element to a subset of the values specified in the inherited simple type.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
			<summary>Gets or sets an <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> to be used for the attribute value.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute"></see> for the attribute value.Optional.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef"></see>collection of attributes for the simple type.</summary>
			<returns>The collection of attributes for a simple type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
			<summary>Gets or sets the simple type base value.</summary>
			<returns>The simple type base value.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
			<summary>Gets or sets the name of the built-in data type or simple type from which this type is derived.</summary>
			<returns>The name of the base type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
			<summary>Gets or sets an Xml Schema facet. </summary>
			<returns>One of the following facet classes:<see cref="T:System.Xml.Schema.XmlSchemaLengthFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet"></see>.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSimpleType">
			<summary>Represents the simpleType element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class defines a simple type. Simple types can specify information and constraints for the value of attributes or elements with text-only content.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
			<summary>Gets or sets one of <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion"></see>, <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction"></see>.</summary>
			<returns>One of XmlSchemaSimpleTypeUnion, XmlSchemaSimpleTypeList, or XmlSchemaSimpleTypeRestriction.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
			<summary>Abstract class for simple type content classes.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
			<summary>Represents the list element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to define a simpleType element as a list of values of a specified data type.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> representing the type of the simpleType element based on the <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType"></see> and <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName"></see> values of the simple type.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> representing the type of the simpleType element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
			<summary>Gets or sets the simpleType element that is derived from the type specified by the base value.</summary>
			<returns>The item type for the simple type element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
			<summary>Gets or sets the name of a built-in data type or simpleType element defined in this schema (or another schema indicated by the specified namespace).</summary>
			<returns>The type name of the simple type list.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
			<summary>Represents the restriction element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used restricting simpleType element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
			<summary>Gets or sets information on the base type.</summary>
			<returns>The base type for the simpleType element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
			<summary>Gets or sets the name of the qualified base type.</summary>
			<returns>The qualified name of the simple type restriction base type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
			<summary>Gets or sets an Xml Schema facet. </summary>
			<returns>One of the following facet classes:<see cref="T:System.Xml.Schema.XmlSchemaLengthFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet"></see>, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet"></see>.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
			<summary>Represents the union element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. A union datatype can be used to specify the content of a simpleType. The value of the simpleType element must be any one of a set of alternative datatypes specified in the union. Union types are always derived types and must comprise at least two alternative datatypes.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
			<summary>Gets an array of <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> objects representing the type of the simpleType element based on the <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes"></see> and <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes"></see> values of the simple type.</summary>
			<returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> objects representing the type of the simpleType element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
			<summary>Gets the collection of base types.</summary>
			<returns>The collection of simple type base values.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
			<summary>Gets or sets the array of qualified member names of built-in data types or simpleType elements defined in this schema (or another schema indicated by the specified namespace).</summary>
			<returns>An array that consists of a list of members of built-in data types or simple types.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
			<summary>Represents the totalDigits facet from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to specify a restriction on the number of digits that can be entered for the value of a simpleType element. That value of totalDigits must be a positive integer.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaType">
			<summary>The base class for all simple types and complex types.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaType"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
			<summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaComplexType"></see> that represents the built-in complex type of the complex type specified by qualified name.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaComplexType"></see> that represents the built-in complex type.</returns>
			<param name="qualifiedName">The <see cref="T:System.Xml.XmlQualifiedName"></see> of the complex type.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlQualifiedName"></see> parameter is null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
			<summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaComplexType"></see> that represents the built-in complex type of the complex type specified.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaComplexType"></see> that represents the built-in complex type.</returns>
			<param name="typeCode">One of the <see cref="T:System.Xml.Schema.XmlTypeCode"></see> values representing the complex type.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
			<summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> that represents the built-in simple type of the simple type specified by qualified name.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> that represents the built-in simple type.</returns>
			<param name="qualifiedName">The <see cref="T:System.Xml.XmlQualifiedName"></see> of the simple type.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlQualifiedName"></see> parameter is null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
			<summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> that represents the built-in simple type of the simple type specified.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType"></see> that represents the built-in simple type.</returns>
			<param name="typeCode">One of the <see cref="T:System.Xml.Schema.XmlTypeCode"></see> values representing the simple type.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
			<summary>Returns a value indicating if the derived schema type specified is derived from the base schema type specified</summary>
			<returns>true if the derived type is derived from the base type; otherwise, false.</returns>
			<param name="derivedType">The derived <see cref="T:System.Xml.Schema.XmlSchemaType"></see> to test.</param>
			<param name="baseType">The base <see cref="T:System.Xml.Schema.XmlSchemaType"></see> to test the derived <see cref="T:System.Xml.Schema.XmlSchemaType"></see> against.</param>
			<param name="except">One of the <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod"></see> values representing a type derivation method to exclude from testing.</param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
			<summary>Gets the object type or name of the built-in XML Schema Definition Language (XSD) data type, simpleType element, or complexType element. This is a post-schema-compilation infoset property.</summary>
			<returns>The built-in XSD data type, simpleType element, or complexType element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
			<summary>Gets the base type of this schema type. This is a post-schema-compilation infoset property.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaType"></see> object representing the base type of this schema type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
			<summary>Gets the data type that holds the post-schema-compilation value.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaDatatype"></see> post-schema-compilation value.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
			<summary>Gets information that indicates how this element has been derived from a base type. This property holds the post-compilation value.</summary>
			<returns>One of the valid <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod"></see> values.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.Final">
			<summary>Gets or sets the final attribute of the type derivation that indicates if further derivations are allowed.</summary>
			<returns>One of the valid <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod"></see> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None"></see>.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
			<summary>Gets the post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaType.Final"></see> property.</summary>
			<returns>The post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaType.Final"></see> property. The default is the finalDefault attribute value of the schema element.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
			<summary>Gets or sets a value indicating if this type has a mixed content model. This property is only valid in a complex type.</summary>
			<returns>true if the type has a mixed content model; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.Name">
			<summary>Gets or sets the name of the type.</summary>
			<returns>The name of the type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
			<summary>Gets the qualified name for the type built from the Name attribute of this type. This is a post-schema-compilation property.</summary>
			<returns>The <see cref="T:System.Xml.XmlQualifiedName"></see> for the type built from the Name attribute of this type.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlTypeCode"></see> of the type.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlTypeCode"></see> values.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaUnique">
			<summary>Represents the unique element from XML Schema as specified by the World Wide Web Consortium (W3C)http://go.microsoft.com/fwlink/?LinkId=49454. This class can be used to identify a unique constraint among a set of elements.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaUnique"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaUse">
			<summary>Indicator of how the attribute is used.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaUse.None">
			<summary>Attribute use not specified.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
			<summary>Attribute is optional.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
			<summary>Attribute cannot be used.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaUse.Required">
			<summary>Attribute must appear once.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaValidationException">
			<summary>Represents the exception thrown when XML Schema Definition Language (XSD) schema validation errors and warnings are encountered in an XML document being validated. </summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see> class with the exception message specified.</summary>
			<param name="message">A string description of the error condition.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see> class with the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects specified.</summary>
			<param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object.</param>
			<param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see> class with the exception message and original <see cref="T:System.Exception"></see> object that caused this exception specified.</summary>
			<param name="message">A string description of the error condition.</param>
			<param name="innerException">The original <see cref="T:System.Exception"></see> object that caused this exception.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see> class with the exception message specified, and the original <see cref="T:System.Exception"></see> object, line number, and line position of the XML that cause this exception specified.</summary>
			<param name="message">A string description of the error condition.</param>
			<param name="linePosition">The line position of the XML that caused this exception.</param>
			<param name="innerException">The original <see cref="T:System.Exception"></see> object that caused this exception.</param>
			<param name="lineNumber">The line number of the XML that caused this exception.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Constructs a new <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see> object with the given <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> information that contains all the properties of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see>.</summary>
			<param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"></see></param>
			<param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"></see></param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
			<param name="sourceObject">The source object.</param>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
			<summary>Gets the XML node that caused this <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see>.</summary>
			<returns>The XML node that caused this <see cref="T:System.Xml.Schema.XmlSchemaValidationException"></see>.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
			<summary>Specifies schema validation options used by the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> and <see cref="T:System.Xml.XmlReader"></see> classes.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
			<summary>Allow xml:* attributes even if they are not defined in the schema. The attributes will be validated based on their data type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
			<summary>Do not process identity constraints, inline schemas, schema location hints, or report schema validation warnings.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
			<summary>Process identity constraints (xs:ID, xs:IDREF, xs:key, xs:keyref, xs:unique) encountered during validation.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
			<summary>Process inline schemas encountered during validation.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
			<summary>Process schema location hints (xsi:schemaLocation, xsi:noNamespaceSchemaLocation) encountered during validation.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
			<summary>Report schema validation warnings encountered during validation.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaValidator">
			<summary>Represents an XML Schema Definition Language (XSD) Schema validation engine. The <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> class.</summary>
			<param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used for resolving namespaces encountered during validation.</param>
			<param name="nameTable">An <see cref="T:System.Xml.XmlNameTable"></see> object containing element and attribute names as atomized strings.</param>
			<param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> object containing the XML Schema Definition Language (XSD) schemas used for validation.</param>
			<param name="validationFlags">An <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags"></see> value specifying schema validation options.</param>
			<exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">An error occurred while compiling schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> parameter.</exception>
		</member>
		<member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
			<summary>The <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> that receives schema validation warnings and errors encountered during schema validation.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
			<summary>Adds an XML Schema Definition Language (XSD) schema to the set of schemas used for validation.</summary>
			<param name="schema">An <see cref="T:System.Xml.Schema.XmlSchema"></see> object to add to the set of schemas used for validation.</param>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The target namespace of the <see cref="T:System.Xml.Schema.XmlSchema"></see> parameter matches that of any element or attribute already encountered by the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaException">The <see cref="T:System.Xml.Schema.XmlSchema"></see> parameter is invalid.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema"></see> parameter specified is null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
			<summary>Ends validation and checks identity constraints for the entire XML document.</summary>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">An identity constraint error was found in the XML document.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
			<summary>Returns the expected attributes for the current element context.</summary>
			<returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> objects or an empty array if there are no expected attributes.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
			<summary>Returns the expected particles in the current element context.</summary>
			<returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaParticle"></see> objects or an empty array if there are no expected particles.</returns>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
			<summary>Populates the <see cref="T:System.Collections.ArrayList"></see> specified with <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> objects for any attributes with default values that have not been previously validated using the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see> method in the element context.</summary>
			<param name="defaultAttributes">An <see cref="T:System.Collections.ArrayList"></see> to populate with <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see> objects for any attributes not yet encountered during validation in the element context.</param>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
			<summary>Initializes the state of the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object.</summary>
			<exception cref="T:System.InvalidOperationException">Calling the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize"></see> method is valid immediately after the construction of an <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object or after a call to <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation"></see> only.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
			<summary>Initializes the state of the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object using the <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> specified for partial validation.</summary>
			<param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaElement"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaType"></see> object used to initialize the validation context of the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object for partial validation.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> parameter is not an <see cref="T:System.Xml.Schema.XmlSchemaElement"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see>, or <see cref="T:System.Xml.Schema.XmlSchemaType"></see> object.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> parameter cannot be null.</exception>
			<exception cref="T:System.InvalidOperationException">Calling the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize"></see> method is valid immediately after the construction of an <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object or after a call to <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation"></see> only.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
			<summary>Skips validation of the current element content and prepares the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object to validate content in the parent element's context.</summary>
			<param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> object whose properties are set if the current element content is successfully skipped. This parameter can be null.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)"></see> method was not called in the correct sequence. For example, calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)"></see> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)"></see>.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
			<summary>Validates the attribute name, namespace URI, and value in the current element context.</summary>
			<returns>The validated attribute's value.</returns>
			<param name="attributeValue">The value of the attribute to validate.</param>
			<param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> object whose properties are set on successful validation of the attribute. This parameter and can be null.</param>
			<param name="localName">The local name of the attribute to validate.</param>
			<param name="namespaceUri">The namespace URI of the attribute to validate.</param>
			<exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see> method was not called in the correct sequence. For example, calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The attribute is not valid in the current element context.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
			<summary>Validates the attribute name, namespace URI, and value in the current element context.</summary>
			<returns>The validated attribute's value.</returns>
			<param name="attributeValue">An <see cref="T:System.Xml.Schema.XmlValueGetter"></see>delegate used to pass the attribute's value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
			<param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> object whose properties are set on successful validation of the attribute. This parameter and can be null.</param>
			<param name="localName">The local name of the attribute to validate.</param>
			<param name="namespaceUri">The namespace URI of the attribute to validate.</param>
			<exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see> method was not called in the correct sequence. For example, calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The attribute is not valid in the current element context.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
			<summary>Validates the element in the current context.</summary>
			<param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> object whose properties are set on successful validation of the element's name. This parameter can be null.</param>
			<param name="localName">The local name of the element to validate.</param>
			<param name="namespaceUri">The namespace URI of the element to validate.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement"></see> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement"></see> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's name is not valid in the current context.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
			<summary>Validates the element in the current context with the xsi:Type, xsi:Nil, xsi:SchemaLocation, and xsi:NoNamespaceSchemaLocation attribute values specified.</summary>
			<param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> object whose properties are set on successful validation of the element's name. This parameter can be null.</param>
			<param name="localName">The local name of the element to validate.</param>
			<param name="namespaceUri">The namespace URI of the element to validate.</param>
			<param name="xsiNoNamespaceSchemaLocation">The xsi:NoNamespaceSchemaLocation attribute value of the element. This parameter can be null.</param>
			<param name="xsiSchemaLocation">The xsi:SchemaLocation attribute value of the element. This parameter can be null.</param>
			<param name="xsiType">The xsi:Type attribute value of the element. This parameter can be null.</param>
			<param name="xsiNil">The xsi:Nil attribute value of the element. This parameter can be null.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement"></see> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement"></see> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's name is not valid in the current context.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
			<summary>Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.</summary>
			<returns>The parsed, typed text value of the element if the element has simple content.</returns>
			<param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> object whose properties are set on successful validation of the element. This parameter can be null.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement"></see> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement"></see> method is called after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's content is not valid.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
			<summary>Verifies if the text content of the element specified is valid according to its data type.</summary>
			<returns>The parsed, typed simple content of the element.</returns>
			<param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> object whose properties are set on successful validation of the text content of the element. This parameter can be null.</param>
			<param name="typedValue">The typed text content of the element.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement"></see> method was not called in the correct sequence (for example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement"></see> method is called after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)"></see>), calls to the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText"></see> method have been previously made, or the element has complex content.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's text content is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">The typed text content parameter cannot be null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
			<summary>Verifies whether all the required attributes in the element context are present and prepares the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object to validate the child content of the element.</summary>
			<param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo"></see> object whose properties are set on successful verification that all the required attributes in the element context are present. This parameter can be null.</param>
			<exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">One or more of the required attributes in the current element context were not found.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)"></see> method was not called in the correct sequence. For example, calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)"></see> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)"></see>.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
			<summary>Validates whether the text string specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</summary>
			<param name="elementValue">A text string to validate in the current element context.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText"></see> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText"></see> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The text string specified is not allowed in the current element context.</exception>
			<exception cref="T:System.ArgumentNullException">The text string parameter cannot be null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
			<summary>Validates whether the text returned by the <see cref="T:System.Xml.Schema.XmlValueGetter"></see> object specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</summary>
			<param name="elementValue">An <see cref="T:System.Xml.Schema.XmlValueGetter"></see>delegate used to pass the text value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText"></see> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText"></see> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see>.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The text string specified is not allowed in the current element context.</exception>
			<exception cref="T:System.ArgumentNullException">The text string parameter cannot be null.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
			<summary>Validates whether the white space in the string specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</summary>
			<param name="elementValue">A white space string to validate in the current element context.</param>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">White space is not allowed in the current element context.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace"></see> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace"></see> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see>.</exception>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
			<summary>Validates whether the white space returned by the <see cref="T:System.Xml.Schema.XmlValueGetter"></see> object specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</summary>
			<param name="elementValue">An <see cref="T:System.Xml.Schema.XmlValueGetter"></see>delegate used to pass the white space value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">White space is not allowed in the current element context.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace"></see> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace"></see> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute"></see>.</exception>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
			<summary>Gets or sets the line number information for the XML node being validated.</summary>
			<returns>An <see cref="T:System.Xml.IXmlLineInfo"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
			<summary>Gets or sets the source URI for the XML node being validated.</summary>
			<returns>A <see cref="T:System.Uri"></see> object representing the source URI for the XML node being validated; the default is null.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
			<summary>Gets or sets the object sent as the sender object of a validation event.</summary>
			<returns>An <see cref="T:System.Object"></see>; the default is this <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> object.</returns>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
			<summary>Sets the <see cref="T:System.Xml.XmlResolver"></see> object used to resolve xs:import and xs:include elements as well as xsi:schemaLocation and xsi:noNamespaceSchemaLocation attributes.</summary>
			<returns>An <see cref="T:System.Xml.XmlResolver"></see> object; the default is an <see cref="T:System.Xml.XmlUrlResolver"></see> object.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaValidity">
			<summary>Represents the validity of an XML item validated by the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> class.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
			<summary>The XML item is invalid.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
			<summary>The validity of the XML item is not known.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
			<summary>The XML item is valid.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
			<summary>Represents the World Wide Web Consortium (W3C) whiteSpace facet.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlSchemaXPath">
			<summary>Represents the World Wide Web Consortium (W3C) selector element.</summary>
		</member>
		<member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaXPath"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
			<summary>Gets or sets the attribute for the XPath expression.</summary>
			<returns>The string attribute value for the XPath expression.</returns>
		</member>
		<member name="T:System.Xml.Schema.XmlSeverityType">
			<summary>Represents the severity of the validation event.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSeverityType.Error">
			<summary>Indicates a validation error occurred when validating the instance document. This applies to document type definitions (DTDs) and XML Schema definition language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints are considered errors. If no validation event handler has been created, errors throw an exception.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlSeverityType.Warning">
			<summary>Indicates that a validation event occurred that is not an error. A warning is typically issued when there is no DTD, or XML Schema to validate a particular element or attribute against. Unlike errors, warnings do not throw an exception if there is no validation event handler.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlTypeCode">
			<summary>Represents the W3C XML Schema Definition Language (XSD) schema types.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
			<summary>Any atomic value of a union.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
			<summary>A W3C XML Schema xs:anyURI type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
			<summary>A W3C XML Schema xs:base64Binary type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
			<summary>A W3C XML Schema xs:boolean type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Byte">
			<summary>A W3C XML Schema xs:byte type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Comment">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Date">
			<summary>A W3C XML Schema xs:date type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
			<summary>A W3C XML Schema xs:dateTime type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
			<summary>A W3C XML Schema xs:decimal type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Document">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Double">
			<summary>A W3C XML Schema xs:double type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Duration">
			<summary>A W3C XML Schema xs:Duration type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Element">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Entity">
			<summary>A W3C XML Schema xs:ENTITY type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Float">
			<summary>A W3C XML Schema xs:float type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.GDay">
			<summary>A W3C XML Schema xs:gDay type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
			<summary>A W3C XML Schema xs:gMonth type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
			<summary>A W3C XML Schema xs:gMonthDay type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.GYear">
			<summary>A W3C XML Schema xs:gYear type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
			<summary>A W3C XML Schema xs:gYearMonth type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
			<summary>A W3C XML Schema xs:hexBinary type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Id">
			<summary>A W3C XML Schema xs:ID type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Idref">
			<summary>A W3C XML Schema xs:IDREF type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Int">
			<summary>A W3C XML Schema xs:int type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Integer">
			<summary>A W3C XML Schema xs:integer type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Item">
			<summary>An item such as a node or atomic value.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Language">
			<summary>A W3C XML Schema xs:language type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Long">
			<summary>A W3C XML Schema xs:long type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Name">
			<summary>A W3C XML Schema xs:Name type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.NCName">
			<summary>A W3C XML Schema xs:NCName type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
			<summary>A W3C XML Schema xs:negativeInteger type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
			<summary>A W3C XML Schema xs:NMTOKEN type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Node">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.None">
			<summary>No type information.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
			<summary>A W3C XML Schema xs:nonNegativeInteger type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
			<summary>A W3C XML Schema xs:nonPositiveInteger type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
			<summary>A W3C XML Schema xs:normalizedString type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Notation">
			<summary>A W3C XML Schema xs:NOTATION type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
			<summary>A W3C XML Schema xs:positiveInteger type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.QName">
			<summary>A W3C XML Schema xs:QName type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Short">
			<summary>A W3C XML Schema xs:short type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.String">
			<summary>A W3C XML Schema xs:string type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Text">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Time">
			<summary>A W3C XML Schema xs:time type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.Token">
			<summary>A W3C XML Schema xs:token type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
			<summary>A W3C XML Schema xs:unsignedByte type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
			<summary>A W3C XML Schema xs:unsignedInt type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
			<summary>A W3C XML Schema xs:unsignedLong type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
			<summary>A W3C XML Schema xs:unsignedShort type.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
			<summary>An untyped atomic value.</summary>
		</member>
		<member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
			<summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="T:System.Xml.Schema.XmlValueGetter">
			<summary>A delegate used by the <see cref="T:System.Xml.Schema.XmlSchemaValidator"></see> class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, text, or white space.</summary>
			<returns>An object containing the attribute, text, or white space value. The object is a CLR type that that corresponds to the XSD type of the attribute, text, or white space value.</returns>
		</member>
		<member name="N:System.Xml.Serialization">
			<summary>The <see cref="N:System.Xml.Serialization"></see> namespace contains classes that are used to serialize objects into XML format documents or streams.</summary>
		</member>
		<member name="T:System.Xml.Serialization.CodeExporter">
			<summary>Represents a class that can generate proxy code from an XML representation of a data structure.</summary>
		</member>
		<member name="P:System.Xml.Serialization.CodeExporter.IncludeMetadata">
			<summary>Gets a collection of code attribute metadata that is included when the code is exported.</summary>
			<returns>A collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects that represent metadata that is included when the code is exported.</returns>
		</member>
		<member name="T:System.Xml.Serialization.CodeGenerationOptions">
			<summary>Specifies various options to use when generating .NET Framework types for use with an XML Web Service.</summary>
		</member>
		<member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateNewAsync">
			<summary>Creates events for the asynchronous invocation of Web methods.</summary>
		</member>
		<member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOldAsync">
			<summary>Creates Begin and End methods for the asynchronous invocation of Web methods.</summary>
		</member>
		<member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder">
			<summary>Generates explicitly ordered serialization code as specified through the Order property of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see>, <see cref="T:System.Xml.Serialization.XmlArrayAttribute"></see>, and <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> attributes. </summary>
		</member>
		<member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateProperties">
			<summary>Represents primitive types by properties.</summary>
		</member>
		<member name="F:System.Xml.Serialization.CodeGenerationOptions.None">
			<summary>Represents primitive types by fields and primitive types by <see cref="N:System"></see> namespace types.</summary>
		</member>
		<member name="T:System.Xml.Serialization.CodeIdentifier">
			<summary>Provides static methods to convert input text into names for code entities.</summary>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifier.MakeCamel(System.String)">
			<summary>Produces a camel-case string from an input string. </summary>
			<returns>A camel-case version of the parameter string.</returns>
			<param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifier.MakePascal(System.String)">
			<summary>Produces a Pascal-case string from an input string. </summary>
			<returns>A Pascal-case version of the parameter string.</returns>
			<param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifier.MakeValid(System.String)">
			<summary>Produces a valid code entity name from an input string. </summary>
			<returns>A string that can be used as a code identifier, such as the name of a method parameter.</returns>
			<param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
		</member>
		<member name="T:System.Xml.Serialization.CodeIdentifiers">
			<summary>Maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.</summary>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.#ctor(System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> class and determines whether code identifiers are case sensitive.</summary>
			<param name="caseSensitive">true if identifiers are case sensitive; otherwise, false. </param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.Add(System.String,System.Object)">
			<summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope. </summary>
			<param name="identifier">A name that is used to index the code entity.</param>
			<param name="value">The code entity or type mapping information.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.AddReserved(System.String)">
			<summary>Prevents a specified name from being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope. </summary>
			<param name="identifier">A name that will not be available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see>instance's scope.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.AddUnique(System.String,System.Object)">
			<summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope, ensuring that the name is unique within the scope. </summary>
			<returns>The identifier parameter value or a modified string if there is a name collision.</returns>
			<param name="identifier">A candidate name that is used to index the code entity.</param>
			<param name="value">The code entity or type mapping information.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.Clear">
			<summary>Removes all code entities or type mappings, including their names, from the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope. </summary>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.IsInUse(System.String)">
			<summary>Determines whether a specified name is already being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope. </summary>
			<returns>true if the name is already in use; otherwise, false.</returns>
			<param name="identifier">The name to check for use within the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.MakeRightCase(System.String)">
			<summary>Ensures that the input is of the correct case by modifying the name according to the value of the <see cref="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing"></see> property. </summary>
			<returns>A string that is the same as the input identifier or has the first letter's case modified.</returns>
			<param name="identifier">The name to possibly modify.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.MakeUnique(System.String)">
			<summary>Determines whether the input name conflicts with another name within the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope and, if it does, generates a modified string. </summary>
			<returns>The identifier parameter value or a modified string if there is a name collision.</returns>
			<param name="identifier">The name to modify if it is not already unique.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.Remove(System.String)">
			<summary>Removes from the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope the code entity or type mapping identified by the input name. </summary>
			<param name="identifier">The name of the code entity or type mapping information to remove.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.RemoveReserved(System.String)">
			<summary>Removes the input name from the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's reserved names. </summary>
			<param name="identifier">A name that will be made available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope.</param>
		</member>
		<member name="M:System.Xml.Serialization.CodeIdentifiers.ToArray(System.Type)">
			<summary>Returns an array of the code entities or type mappings within the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> instance's scope. </summary>
			<returns>An array of the code entities or type mappings that is stored by the <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> object.</returns>
			<param name="type">The type of all the code entities or type mappings for the instance.</param>
		</member>
		<member name="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing">
			<summary>Gets or sets a value that indicates whether the instance uses camel case. </summary>
			<returns>true to indicate that the instance uses camel case; false to indicate that the instance uses Pascal case.</returns>
		</member>
		<member name="T:System.Xml.Serialization.ImportContext">
			<summary>Describes the context in which a set of schema is bound to .NET Framework code entities.</summary>
		</member>
		<member name="M:System.Xml.Serialization.ImportContext.#ctor(System.Xml.Serialization.CodeIdentifiers,System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.ImportContext"></see> class for the given code identifiers, with the given type-sharing option.</summary>
			<param name="shareTypes">A <see cref="T:System.Boolean"></see> value that determines whether custom types are shared among schema.</param>
			<param name="identifiers">The code entities to which the context applies.</param>
		</member>
		<member name="P:System.Xml.Serialization.ImportContext.ShareTypes">
			<summary>Gets a value that determines whether custom types are shared.</summary>
			<returns>true, if custom types are shared among schema; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.ImportContext.TypeIdentifiers">
			<summary>Gets a set of code entities to which the context applies.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> that specifies the code entities to which the context applies.</returns>
		</member>
		<member name="P:System.Xml.Serialization.ImportContext.Warnings">
			<summary>Gets a collection of warnings that are generated when importing the code entity descriptions.</summary>
			<returns>A <see cref="T:System.Collections.Specialized.StringCollection"></see> that contains warnings that were generated when importing the code entity descriptions.</returns>
		</member>
		<member name="T:System.Xml.Serialization.IXmlSerializable">
			<summary>Provides custom formatting for XML serialization and deserialization.</summary>
		</member>
		<member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
			<summary>This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"></see> to the class instead. </summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchema"></see> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"></see> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"></see> method.</returns>
		</member>
		<member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
			<summary>Generates an object from its XML representation.</summary>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> stream from which the object is deserialized. </param>
		</member>
		<member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
			<summary>Converts an object into its XML representation.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> stream to which the object is serialized. </param>
		</member>
		<member name="T:System.Xml.Serialization.IXmlTextParser">
			<summary>Establishes a <see cref="P:System.Xml.Serialization.IXmlTextParser.Normalized"></see> property for use by the .NET Framework infrastructure.</summary>
		</member>
		<member name="P:System.Xml.Serialization.IXmlTextParser.Normalized">
			<summary>Gets or sets whether white space and attribute values are normalized.</summary>
			<returns>true if white space attributes values are normalized; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.IXmlTextParser.WhitespaceHandling">
			<summary>Gets or sets how white space is handled when parsing XML.</summary>
			<returns>A member of the <see cref="T:System.Xml.WhitespaceHandling"></see> enumeration that describes how whites pace is handled when parsing XML.</returns>
		</member>
		<member name="T:System.Xml.Serialization.SchemaImporter">
			<summary>Describes a schema importer.</summary>
		</member>
		<member name="P:System.Xml.Serialization.SchemaImporter.Extensions">
			<summary>Gets a collection of schema importer extensions.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"></see> containing a collection of schema importer extensions.</returns>
		</member>
		<member name="T:System.Xml.Serialization.SoapAttributeAttribute">
			<summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must serialize the class member as an encoded SOAP attribute.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute"></see> class using the specified value as the name of the XML attribute.</summary>
			<param name="attributeName">The name of the XML attribute. </param>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributeAttribute.AttributeName">
			<summary>Gets or sets the name of the XML attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
			<returns>The name of the XML attribute. The default is the member identifier.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributeAttribute.DataType">
			<summary>Gets or sets the XML Schema definition language (XSD) data type of the SOAP attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
			<returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</returns>
			<exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type. </exception>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributeAttribute.Namespace">
			<summary>Gets or sets the XML namespace of the XML attribute.</summary>
			<returns>The XML namespace of the XML attribute.</returns>
		</member>
		<member name="T:System.Xml.Serialization.SoapAttributeOverrides">
			<summary>Allows you to override attributes applied to properties, fields, and classes when you use an <see cref="T:System.Xml.Serialization.XmlSerializer"></see> to serialize or deserialize an object as encoded SOAP.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapAttributeOverrides.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeOverrides"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.Xml.Serialization.SoapAttributes)">
			<summary>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes"></see> to a collection of <see cref="T:System.Xml.Serialization.SoapAttributes"></see> objects. The type parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes"></see>.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the object that is overridden. </param>
			<param name="attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes"></see> that represents the overriding attributes. </param>
		</member>
		<member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.SoapAttributes)">
			<summary>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes"></see> to the collection of <see cref="T:System.Xml.Serialization.SoapAttributes"></see> objects contained by the <see cref="T:System.Xml.Serialization.SoapAttributeOverrides"></see>. The type parameter specifies the object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes"></see>. The member parameter specifies the name of a member that is overridden.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the object to override. </param>
			<param name="member">The name of the member to override. </param>
			<param name="attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes"></see> that represents the overriding attributes. </param>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type)">
			<summary>Gets the object associated with the specified (base class) type.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.SoapAttributes"></see> that represents the collection of overriding attributes.</returns>
			<param name="type">The base class <see cref="T:System.Type"></see> that is associated with the collection of attributes you want to retrieve. </param>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type,System.String)">
			<summary>Gets the object associated with the specified (base class) type. The member parameter specifies the base class member that is overridden.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.SoapAttributes"></see> that represents the collection of overriding attributes.</returns>
			<param name="type">The base class <see cref="T:System.Type"></see> that is associated with the collection of attributes you want to override. </param>
			<param name="member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.SoapAttributes"></see> to return. </param>
		</member>
		<member name="T:System.Xml.Serialization.SoapAttributes">
			<summary>Represents a collection of attribute objects that control how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes and deserializes SOAP methods.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapAttributes.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributes"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributes"></see> class using the specified custom type.</summary>
			<param name="provider">Any object that implements the <see cref="T:System.Reflection.ICustomAttributeProvider"></see> interface, such as the <see cref="T:System.Type"></see> class. </param>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributes.SoapAttribute">
			<summary>Gets or sets the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute"></see> to override.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.SoapAttributeAttribute"></see> that overrides the behavior of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> when the member is serialized.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributes.SoapDefaultValue">
			<summary>Gets or sets the default value of an XML element or attribute.</summary>
			<returns>An object that represents the default value of an XML element or attribute.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributes.SoapElement">
			<summary>Gets or sets a <see cref="T:System.Xml.Serialization.SoapElementAttribute"></see> to override.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.SoapElementAttribute"></see> to override.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributes.SoapEnum">
			<summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a SOAP enumeration.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.SoapEnumAttribute"></see>.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributes.SoapIgnore">
			<summary>Gets or sets a value that specifies whether the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a public field or property as encoded SOAP XML.</summary>
			<returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must not serialize the field or property; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapAttributes.SoapType">
			<summary>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> how to serialize an object type into encoded SOAP XML.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.SoapTypeAttribute"></see> that either overrides a <see cref="T:System.Xml.Serialization.SoapTypeAttribute"></see> applied to a class declaration, or is applied to a class declaration.</returns>
		</member>
		<member name="T:System.Xml.Serialization.SoapCodeExporter">
			<summary>Generates types and attribute declarations from internal type mapping information for SOAP-encoded message parts defined in a WSDL document. </summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter"></see> class, assuming no code compile unit. </summary>
			<param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that specifies the namespace of the types to generate.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter"></see> class, specifying a code compile unit parameter in addition to a namespace parameter.</summary>
			<param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that specifies the namespace of the types to generate.</param>
			<param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> that identifies the program graph container to which used assembly references are automatically added.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter"></see> class, specifying a code namespace, a code compile unit, and code generation options.</summary>
			<param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that specifies the namespace of the types to generate.</param>
			<param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> enumeration that specifies the options with which exported code is generated.</param>
			<param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> that identifies the program graph container to which used assembly references are automatically added.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter"></see> class, specifying a code namespace, a code compile unit, code generation options, and mappings.</summary>
			<param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that specifies the namespace of the types to generate.</param>
			<param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> enumeration that specifies the options with which exported code is generated.</param>
			<param name="mappings">A <see cref="T:System.Collections.Hashtable"></see> that contains <see cref="T:System.Xml.Serialization.XmlMapping"></see> objects.</param>
			<param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> that identifies the program graph container to which used assembly references are automatically added.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter"></see> class, specifying a code namespace, a code compile unit, a code generator, code generation options, and mappings.</summary>
			<param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that specifies the namespace of the types to generate.</param>
			<param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see>  that is used to create the code.</param>
			<param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> enumeration that specifies the options with which exported code is generated.</param>
			<param name="mappings">A <see cref="T:System.Collections.Hashtable"></see> that contains <see cref="T:System.Xml.Serialization.XmlMapping"></see> objects.</param>
			<param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> that identifies the program graph container to which used assembly references are automatically added.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping)">
			<summary>Add a <see cref="T:System.Xml.Serialization.SoapElementAttribute"></see> declaration to a method parameter or return value corresponding to a part element of a SOAP message definition in a WSDL document. </summary>
			<param name="member">An internal .NET Framework type mapping for a single part of a WSDL message definition.</param>
			<param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects for the generated type, to which the method adds an attribute declaration.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.Boolean)">
			<summary>Adds a <see cref="T:System.Xml.Serialization.SoapElementAttribute"></see> declaration to a method parameter or return value that corresponds to a part element of a SOAP message definition in a WSDL document. </summary>
			<param name="member">An internal .NET Framework type mapping for a single part of a WSDL message definition.</param>
			<param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects for the generated type to which the method adds an attribute declaration.</param>
			<param name="forceUseMemberName">true to add an initial argument that contains the XML element name for the attribute declaration that is being generated; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
			<summary>Generates a .NET Framework type, plus attribute declarations, for each of the parts that belong to a SOAP message definition in a WSDL document. </summary>
			<param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
			<summary>Generates a .NET Framework type, plus attribute declarations, for a SOAP header. </summary>
			<param name="xmlTypeMapping">Internal .NET Framework type mapping information for a SOAP header element.</param>
		</member>
		<member name="T:System.Xml.Serialization.SoapElementAttribute">
			<summary>Specifies that the public member value be serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> as an encoded SOAP XML element.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute"></see> class and specifies the name of the XML element.</summary>
			<param name="elementName">The XML element name of the serialized member. </param>
		</member>
		<member name="P:System.Xml.Serialization.SoapElementAttribute.DataType">
			<summary>Gets or sets the XML Schema definition language (XSD) data type of the generated XML element.</summary>
			<returns>One of the XML Schema data types.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapElementAttribute.ElementName">
			<summary>Gets or sets the name of the generated XML element.</summary>
			<returns>The name of the generated XML element. The default is the member identifier.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapElementAttribute.IsNullable">
			<summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must serialize a member that has the xsi:null attribute set to "1".</summary>
			<returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates the xsi:null attribute; otherwise, false.</returns>
		</member>
		<member name="T:System.Xml.Serialization.SoapEnumAttribute">
			<summary>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes an enumeration member.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute"></see> class using the specified element name.</summary>
			<param name="name">The XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>. </param>
		</member>
		<member name="P:System.Xml.Serialization.SoapEnumAttribute.Name">
			<summary>Gets or sets the value generated in an XML document when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes an enumeration, or the value recognized when it deserializes the enumeration member.</summary>
			<returns>The value generated in an XML document when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes the enumeration, or the value recognized when it deserializes the enumeration member.</returns>
		</member>
		<member name="T:System.Xml.Serialization.SoapIgnoreAttribute">
			<summary>Instructs the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> not to serialize the public field or public read/write property value.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapIgnoreAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIgnoreAttribute"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Serialization.SoapIncludeAttribute">
			<summary>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> to recognize a type when it serializes or deserializes an object as encoded SOAP XML.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapIncludeAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIncludeAttribute"></see> class using the specified type.</summary>
			<param name="type">The type of the object to include. </param>
		</member>
		<member name="P:System.Xml.Serialization.SoapIncludeAttribute.Type">
			<summary>Gets or sets the type of the object to use when serializing or deserializing an object.</summary>
			<returns>The type of the object to include.</returns>
		</member>
		<member name="T:System.Xml.Serialization.SoapReflectionImporter">
			<summary>Generates mappings to SOAP-encoded messages from .NET Framework types or Web service method information. </summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter"></see> class, specifying overrides for XML serialization. </summary>
			<param name="attributeOverrides">A <see cref="T:System.Xml.Serialization.SoapAttributeOverrides"></see> object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class serializes mapped types using SOAP encoding.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter"></see> class, specifying a default XML namespace for imported type mappings. </summary>
			<param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter"></see> class, specifying XML serialization overrides and a default XML namespace. </summary>
			<param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
			<param name="attributeOverrides">A <see cref="T:System.Xml.Serialization.SoapAttributeOverrides"></see> object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class serializes mapped types using SOAP encoding.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[])">
			<summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
			<returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
			<param name="elementName">An XML element name produced from the Web service method.</param>
			<param name="ns">An XML element namespace produced from the Web service method.</param>
			<param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
			<summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
			<returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
			<param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
			<param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
			<param name="elementName">An XML element name produced from the Web service method.</param>
			<param name="ns">An XML element namespace produced from the Web service method.</param>
			<param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
			<summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
			<returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
			<param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
			<param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
			<param name="validate">true to indicate that a generated deserializer should check for the expected qualified name of the wrapper element; otherwise, false. This parameter's value is relevant only if the hasWrapperElement parameter's value is true.</param>
			<param name="elementName">An XML element name produced from the Web service method.</param>
			<param name="ns">An XML element namespace produced from the Web service method.</param>
			<param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
			<summary>Generates internal type mappings for information that is gathered from a Web service method.</summary>
			<returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
			<param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
			<param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
			<param name="validate">true to indicate that a generated deserializer should check for the expected qualified name of the wrapper element; otherwise, false. This parameter's value is relevant only if the hasWrapperElement parameter's value is true.</param>
			<param name="elementName">An XML element name produced from the Web service method.</param>
			<param name="access">One of the <see cref="T:System.Xml.Serialization.XmlMappingAccess"></see> values.</param>
			<param name="ns">An XML element namespace produced from the Web service method.</param>
			<param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type)">
			<summary>Generates a mapping to an XML Schema element for a .NET Framework type.</summary>
			<returns>Internal .NET Framework mapping of a type to an XML Schema element. </returns>
			<param name="type">The .NET Framework type for which to generate a type mapping. </param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type,System.String)">
			<summary>Generates a mapping to an XML Schema element for a .NET Framework type.</summary>
			<returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
			<param name="type">The .NET Framework type for which to generate a type mapping. </param>
			<param name="defaultNamespace">The default XML namespace to use.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeType(System.Type)">
			<summary>Places mappings for a type in the <see cref="T:System.Xml.Serialization.SoapReflectionImporter"></see> instance's context for later use when import methods are invoked. </summary>
			<param name="type">The .NET Framework type for which to save type mapping information.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
			<summary>Places mappings for derived types in the <see cref="T:System.Xml.Serialization.SoapReflectionImporter"></see> instance's context for later use when import methods are invoked. </summary>
			<param name="provider">An <see cref="T:System.Reflection.ICustomAttributeProvider"></see> reflection object that contains custom attributes that are derived from the <see cref="T:System.Xml.Serialization.SoapIncludeAttribute"></see> attribute.</param>
		</member>
		<member name="T:System.Xml.Serialization.SoapSchemaExporter">
			<summary>Populates <see cref="T:System.Xml.Schema.XmlSchema"></see> objects with XML Schema data type definitions for .NET Framework types that are serialized using SOAP encoding.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaExporter"></see> class, which supplies the collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects to which XML Schema element declarations are to be added.</summary>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects to which element declarations obtained from type mappings are to be added.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
			<summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema"></see> object a data type definition for each of the element parts of a SOAP-encoded message definition.</summary>
			<param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
			<summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema"></see> object a data type definition for each of the element parts of a SOAP-encoded message definition.</summary>
			<param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
			<param name="exportEnclosingType">true to export a type definition for the parent element of the WSDL parts; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
			<summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema"></see> object a data type definition for a .NET Framework type.</summary>
			<param name="xmlTypeMapping">An internal mapping between a .NET Framework type and an XML Schema element.</param>
		</member>
		<member name="T:System.Xml.Serialization.SoapSchemaImporter">
			<summary>Used within the .NET Framework to generate internal mappings to .NET Framework types for SOAP-encoded message parts in a WSDL document. </summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter"></see> class, specifying <see cref="T:System.Xml.Schema.XmlSchema"></see> objects representing the XML schemas used by SOAP encoded messages defined in a WSDL document. </summary>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter"></see> class, specifying <see cref="T:System.Xml.Schema.XmlSchema"></see> objects representing the XML schemas used by SOAP encoded messages, plus classes being generated for bindings defined in a WSDL document. </summary>
			<param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.Xml.Serialization.ImportContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter"></see> class specifying the schemas, compiler options, and the context of the schemas.</summary>
			<param name="context">An <see cref="T:System.Xml.Serialization.ImportContext"></see> that describes the context in which a set of schema are bound to .NET Framework code entities. </param>
			<param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> that specifies various options for generating a .NET Framework type.</param>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers,System.Xml.Serialization.CodeGenerationOptions)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter"></see> class specifying the schemas, compiler options, and names of related code entities.</summary>
			<param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see>  that maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.</param>
			<param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> that specifies various options for generating a .NET Framework type.</param>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.ImportContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter"></see> class specifying the schemas, compiler options, and names of related code entities.</summary>
			<param name="context">An <see cref="T:System.Xml.Serialization.ImportContext"></see> that describes the context in which a set of schema are bound to .NET Framework code entities.</param>
			<param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see>  used to generate the serialization code.</param>
			<param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> that specifies various options for generating a .NET Framework type.</param>
			<param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see>  containing a collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
			<summary>Generates internal type mapping information for the type of a SOAP-encoded element part defined in a WSDL document where a base type is specified. </summary>
			<returns>The .NET Framework type mapping information for a derived type corresponding to a WSDL message part.</returns>
			<param name="name">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the name of an element's type for which a .NET Framework type is being generated.</param>
			<param name="baseType">A base type for the .NET Framework type being generated.</param>
			<param name="baseTypeCanBeIndirect">true to indicate that the type being generated may indirectly inherit from the base type; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember)">
			<summary>Generates internal type mapping information for a single SOAP-encoded element part defined in a WSDL document. </summary>
			<returns>The .NET Framework type mapping for a single element part of a WSDL message definition.</returns>
			<param name="member">A <see cref="T:System.Xml.Serialization.SoapSchemaMember"></see> object that provides information about the part element.</param>
			<param name="name">The message name.</param>
			<param name="ns">The message namespace.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
			<summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document. </summary>
			<returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
			<param name="name">The message name.</param>
			<param name="ns">The message namespace.</param>
			<param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember"></see> that provides information about the part elements.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean)">
			<summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document. </summary>
			<returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
			<param name="hasWrapperElement">true to have elements defined by the parts enclosed in an extra, wrapper element in a SOAP message; otherwise, false.</param>
			<param name="name">The message name.</param>
			<param name="ns">The message namespace.</param>
			<param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember"></see> that provides information about the part elements.</param>
		</member>
		<member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean,System.Type,System.Boolean)">
			<summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document.</summary>
			<returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
			<param name="hasWrapperElement">true to have elements defined by the parts enclosed in an extra, wrapper element in a SOAP message; otherwise, false.</param>
			<param name="name">The message name.</param>
			<param name="baseType">A base type for all .NET Framework types that are generated to correspond to message parts.</param>
			<param name="baseTypeCanBeIndirect">true to indicate that types corresponding to message parts can indirectly inherit from the base type; otherwise, false.</param>
			<param name="ns">The message namespace.</param>
			<param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember"></see> that provides information about the part elements.</param>
		</member>
		<member name="T:System.Xml.Serialization.SoapSchemaMember">
			<summary>Represents certain attributes of a XSD &lt;part&gt; element in a WSDL document for generating classes from the document. </summary>
		</member>
		<member name="P:System.Xml.Serialization.SoapSchemaMember.MemberName">
			<summary>Gets or sets a value that corresponds to the name attribute of the WSDL part element. </summary>
			<returns>The element name.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapSchemaMember.MemberType">
			<summary>Gets or sets a value that corresponds to the type attribute of the WSDL part element.</summary>
			<returns>An <see cref="T:System.Xml.XmlQualifiedName"></see> that corresponds to the XML type.</returns>
		</member>
		<member name="T:System.Xml.Serialization.SoapTypeAttribute">
			<summary>Controls the schema generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> when a class instance is serialized as SOAP encoded XML.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute"></see> class and specifies the name of the XML type.</summary>
			<param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
		</member>
		<member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute"></see> class and specifies the name and XML namespace of the type.</summary>
			<param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
			<param name="ns">The XML namespace of the type. </param>
		</member>
		<member name="P:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema">
			<summary>Gets or sets a value that indicates whether to include the type in SOAP-encoded XML Schema documents.</summary>
			<returns>true to include the type in SOAP-encoded XML Schema documents; otherwise, false. The default is true.</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapTypeAttribute.Namespace">
			<summary>Gets or sets the namespace of the XML type.</summary>
			<returns>The namespace of the XML type. The default is an empty string ("").</returns>
		</member>
		<member name="P:System.Xml.Serialization.SoapTypeAttribute.TypeName">
			<summary>Gets or sets the name of the XML type.</summary>
			<returns>The name of the XML type. The default is the class name.</returns>
		</member>
		<member name="T:System.Xml.Serialization.UnreferencedObjectEventArgs">
			<summary>Provides data for the known, but unreferenced, object found in an encoded SOAP XML stream during deserialization.</summary>
		</member>
		<member name="M:System.Xml.Serialization.UnreferencedObjectEventArgs.#ctor(System.Object,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs"></see> class.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs"></see> that contains information about the unreferenced object.</returns>
			<param name="o">The unreferenced object. </param>
			<param name="id">A unique string used to identify the unreferenced object. </param>
		</member>
		<member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId">
			<summary>Gets the ID of the object.</summary>
			<returns>The ID of the object.</returns>
		</member>
		<member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject">
			<summary>Gets the deserialized, but unreferenced, object.</summary>
			<returns>The deserialized, but unreferenced, object.</returns>
		</member>
		<member name="T:System.Xml.Serialization.UnreferencedObjectEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject"></see> event of an <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
			<summary>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlAttribute"></see> objects) can contain any XML attributes.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
			<summary>Constructs a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
			<summary>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlElement"></see> or <see cref="T:System.Xml.XmlNode"></see> objects) contains objects that represent any XML element that has no corresponding member in the object being serialized or deserialized.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> class and specifies the XML element name generated in the XML document.</summary>
			<param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> class and specifies the XML element name generated in the XML document and its XML namespace.</summary>
			<param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates. </param>
			<param name="ns">The XML namespace of the XML element. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
			<summary>Gets or sets the XML element name.</summary>
			<returns>The name of the XML element.</returns>
			<exception cref="T:System.InvalidOperationException">The element name of an array member does not match the element name specified by the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name"></see> property. </exception>
		</member>
		<member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
			<summary>Gets or sets the XML namespace generated in the XML document.</summary>
			<returns>An XML namespace.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
			<summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
			<returns>The order of the code generation.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlAnyElementAttributes">
			<summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> objects.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Add(System.Xml.Serialization.XmlAnyElementAttribute)">
			<summary>Adds an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> to the collection.</summary>
			<returns>The index of the newly added <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see>.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> to add. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Contains(System.Xml.Serialization.XmlAnyElementAttribute)">
			<summary>Gets a value that indicates whether the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> exists in the collection.</summary>
			<returns>true if the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> exists in the collection; otherwise, false.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> you are interested in. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttributes.CopyTo(System.Xml.Serialization.XmlAnyElementAttribute[],System.Int32)">
			<summary>Copies the entire collection to a compatible one-dimensional array of <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> objects, starting at the specified index of the target array. </summary>
			<param name="array">The one-dimensional array of <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> objects that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
			<param name="index">The zero-based index in array at which copying begins.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttributes.IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)">
			<summary>Gets the index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see>.</summary>
			<returns>The index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see>.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> whose index you want. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)">
			<summary>Inserts an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> into the collection at the specified index.</summary>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> to insert. </param>
			<param name="index">The index where the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> is inserted. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Remove(System.Xml.Serialization.XmlAnyElementAttribute)">
			<summary>Removes the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> from the collection.</summary>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> to remove. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlAnyElementAttributes.Item(System.Int32)">
			<summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> at the specified index.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> at the specified index.</returns>
			<param name="index">The index of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see>. </param>
		</member>
		<member name="T:System.Xml.Serialization.XmlArrayAttribute">
			<summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must serialize a particular class member as an array of XML elements.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute"></see> class and specifies the XML element name generated in the XML document instance.</summary>
			<param name="elementName">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
			<summary>Gets or sets the XML element name given to the serialized array.</summary>
			<returns>The XML element name of the serialized array. The default is the name of the member to which the <see cref="T:System.Xml.Serialization.XmlArrayAttribute"></see> is assigned.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
			<summary>Gets or sets a value that indicates whether the XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> is qualified or unqualified.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"></see> values. The default is XmlSchemaForm.None.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
			<summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must serialize a member as an empty XML tag with the xsi:nil attribute set to true.</summary>
			<returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates the xsi:nil attribute; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
			<summary>Gets or sets the namespace of the XML element.</summary>
			<returns>The namespace of the XML element.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayAttribute.Order">
			<summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
			<returns>The order of the code generation.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
			<summary>Specifies the derived types that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can place in a serialized array.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> class and specifies the name of the XML element generated in the XML document.</summary>
			<param name="elementName">The name of the XML element. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> class and specifies the <see cref="T:System.Type"></see> that can be inserted into the serialized array.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the object to serialize. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> class and specifies the name of the XML element generated in the XML document and the <see cref="T:System.Type"></see> that can be inserted into the generated XML document.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the object to serialize. </param>
			<param name="elementName">The name of the XML element. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
			<summary>Gets or sets the XML data type of the generated XML element.</summary>
			<returns>An XML Schema definition (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: DataTypes".</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
			<summary>Gets or sets the name of the generated XML element.</summary>
			<returns>The name of the generated XML element. The default is the member identifier.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
			<summary>Gets or sets a value that indicates whether the name of the generated XML element is qualified.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"></see> values. The default is XmlSchemaForm.None.</returns>
			<exception cref="T:System.Exception">The <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form"></see> property is set to XmlSchemaForm.Unqualified and a <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace"></see> value is specified. </exception>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
			<summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must serialize a member as an empty XML tag with the xsi:nil attribute set to true.</summary>
			<returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates the xsi:nil attribute; otherwise, false, and no instance is generated. The default is true.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
			<summary>Gets or sets the namespace of the generated XML element.</summary>
			<returns>The namespace of the generated XML element.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
			<summary>Gets or sets the level in a hierarchy of XML elements that the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> affects.</summary>
			<returns>The zero-based index of a set of indexes in an array of arrays.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
			<summary>Gets or sets the type allowed in an array.</summary>
			<returns>A <see cref="T:System.Type"></see> that is allowed in the array.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlArrayItemAttributes">
			<summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> objects.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Add(System.Xml.Serialization.XmlArrayItemAttribute)">
			<summary>Adds an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> to the collection.</summary>
			<returns>The index of the added item.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> to add to the collection. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Contains(System.Xml.Serialization.XmlArrayItemAttribute)">
			<summary>Determines whether the collection contains the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see>. </summary>
			<returns>true if the collection contains the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see>; otherwise, false.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> to check for.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttributes.CopyTo(System.Xml.Serialization.XmlArrayItemAttribute[],System.Int32)">
			<summary>Copies an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> array to the collection, starting at a specified target index. </summary>
			<param name="array">The array of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> objects to copy to the collection.</param>
			<param name="index">The index at which the copied attributes begin.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttributes.IndexOf(System.Xml.Serialization.XmlArrayItemAttribute)">
			<summary>Returns the zero-based index of the first occurrence of the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> in the collection or 1 if the attribute is not found in the collection. </summary>
			<returns>The first index of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> in the collection or -1 if the attribute is not found in the collection.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> to locate in the collection.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Insert(System.Int32,System.Xml.Serialization.XmlArrayItemAttribute)">
			<summary>Inserts an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> into the collection at the specified index. </summary>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see>  to insert.</param>
			<param name="index">The index at which the attribute is inserted.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Remove(System.Xml.Serialization.XmlArrayItemAttribute)">
			<summary>Removes an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> from the collection, if it is present. </summary>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> to remove.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlArrayItemAttributes.Item(System.Int32)">
			<summary>Gets or sets the item at the specified index.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> at the specified index.</returns>
			<param name="index">The zero-based index of the collection member to get or set. </param>
		</member>
		<member name="T:System.Xml.Serialization.XmlAttributeAttribute">
			<summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must serialize the class member as an XML attribute.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"></see> class and specifies the name of the generated XML attribute.</summary>
			<param name="attributeName">The name of the XML attribute that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"></see> class.</summary>
			<param name="type">The <see cref="T:System.Type"></see> used to store the attribute. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"></see> class.</summary>
			<param name="type">The <see cref="T:System.Type"></see> used to store the attribute. </param>
			<param name="attributeName">The name of the XML attribute that is generated. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
			<summary>Gets or sets the name of the XML attribute.</summary>
			<returns>The name of the XML attribute. The default is the member name.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
			<summary>Gets or sets the XSD data type of the XML attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
			<returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema: DataTypes".</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
			<summary>Gets or sets a value that indicates whether the XML attribute name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> is qualified.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"></see> values. The default is XmlForm.None.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
			<summary>Gets or sets the XML namespace of the XML attribute.</summary>
			<returns>The XML namespace of the XML attribute.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
			<summary>Gets or sets the complex type of the XML attribute.</summary>
			<returns>The type of the XML attribute.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlAttributeEventArgs">
			<summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute"></see> event.</summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeEventArgs.Attr">
			<summary>Gets an object that represents the unknown XML attribute.</summary>
			<returns>An <see cref="T:System.Xml.XmlAttribute"></see> that represents the unknown XML attribute.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ExpectedAttributes">
			<summary>Gets a comma-delimited list of XML attribute names expected to be in an XML document instance.</summary>
			<returns>A comma-delimited list of XML attribute names. Each name is in the following format: namespace:name.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LineNumber">
			<summary>Gets the line number of the unknown XML attribute.</summary>
			<returns>The line number of the unknown XML attribute.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LinePosition">
			<summary>Gets the position in the line of the unknown XML attribute.</summary>
			<returns>The position number of the unknown XML attribute.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized">
			<summary>Gets the object being deserialized.</summary>
			<returns>The object being deserialized.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlAttributeEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute"></see></summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlAttributeOverrides">
			<summary>Allows you to override property, field, and class attributes when you use the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> to serialize or deserialize an object.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.Xml.Serialization.XmlAttributes)">
			<summary>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes"></see> object to the collection of <see cref="T:System.Xml.Serialization.XmlAttributes"></see> objects. The type parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.XmlAttributes"></see> object.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the object that is overridden. </param>
			<param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes"></see> object that represents the overriding attributes. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.XmlAttributes)">
			<summary>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes"></see> object to the collection of <see cref="T:System.Xml.Serialization.XmlAttributes"></see> objects. The type parameter specifies an object to be overridden. The member parameter specifies the name of a member that is overridden.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the object to override. </param>
			<param name="member">The name of the member to override. </param>
			<param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes"></see> object that represents the overriding attributes. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type)">
			<summary>Gets the object associated with the specified, base-class, type.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlAttributes"></see> that represents the collection of overriding attributes.</returns>
			<param name="type">The base class <see cref="T:System.Type"></see> that is associated with the collection of attributes you want to retrieve. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type,System.String)">
			<summary>Gets the object associated with the specified (base-class) type. The member parameter specifies the base-class member that is overridden.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlAttributes"></see> that represents the collection of overriding attributes.</returns>
			<param name="type">The base class <see cref="T:System.Type"></see> that is associated with the collection of attributes you want. </param>
			<param name="member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.XmlAttributes"></see> to return. </param>
		</member>
		<member name="T:System.Xml.Serialization.XmlAttributes">
			<summary>Represents a collection of attribute objects that control how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes and deserializes an object.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAttributes.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes"></see> class and customizes how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes and deserializes an object. </summary>
			<param name="provider">A class that can provide alternative implementations of attributes that control XML serialization.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
			<summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute"></see> to override.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute"></see> to override.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
			<summary>Gets the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> objects to override.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"></see> object that represents the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> objects.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlArray">
			<summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a public field or read/write property that returns an array.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlArrayAttribute"></see> that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a public field or read/write property that returns an array.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
			<summary>Gets or sets a collection of objects that specify how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes items inserted into an array returned by a public field or read/write property.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"></see> object that contains a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"></see> objects.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
			<summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a public field or public read/write property as an XML attribute.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"></see> that controls the serialization of a public field or read/write property as an XML attribute.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
			<summary>Gets or sets an object that allows you to distinguish between a set of choices.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute"></see> that can be applied to a class member that is serialized as an xsi:choice element.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
			<summary>Gets or sets the default value of an XML element or attribute.</summary>
			<returns>An <see cref="T:System.Object"></see> that represents the default value of an XML element or attribute.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlElements">
			<summary>Gets a collection of objects that specify how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a public field or read/write property as an XML element.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlElementAttributes"></see> that contains a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> objects.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
			<summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes an enumeration member.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlEnumAttribute"></see> that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes an enumeration member.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
			<summary>Gets or sets a value that specifies whether or not the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a public field or public read/write property.</summary>
			<returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must not serialize the field or property; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.Xmlns">
			<summary>Gets or sets a value that specifies whether to keep all namespace declarations when an object containing a member that returns an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> object is overridden.</summary>
			<returns>true if the namespace declarations should be kept; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
			<summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a class as an XML root element.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> that overrides a class attributed as an XML root element.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlText">
			<summary>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> to serialize a public field or public read/write property as XML text.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlTextAttribute"></see> that overrides the default serialization of a public property or field.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlAttributes.XmlType">
			<summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes a class to which the <see cref="T:System.Xml.Serialization.XmlTypeAttribute"></see> has been applied.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlTypeAttribute"></see> that overrides an <see cref="T:System.Xml.Serialization.XmlTypeAttribute"></see> applied to a class declaration.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
			<summary>Specifies that the member can be further detected by using an enumeration.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute"></see> class.</summary>
			<param name="name">The member name that returns the enumeration used to detect a choice. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
			<summary>Gets or sets the name of the field that returns the enumeration to use when detecting types.</summary>
			<returns>The name of a field that returns an enumeration.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlCodeExporter">
			<summary>Generates types and attribute declarations from internal type mapping information for XML schema element declarations.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter"></see> class using the specified namespace. </summary>
			<param name="codeNamespace">The namespace of the types to generate.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter"></see> class using the specified namespace and code compile unit.</summary>
			<param name="codeNamespace">The namespace of the types to generate.</param>
			<param name="codeCompileUnit">A CodeDOM graph container to which used assembly references are automatically added.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter"></see> class using the specified namespace, code compile unit, and code generation options.</summary>
			<param name="codeNamespace">The namespace of the types to generate.</param>
			<param name="options">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
			<param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> program graph container to which used assembly references are automatically added.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter"></see> class using the specified .NET Framework namespace, code compile unit containing the graph of the objects, an object representing code generation options, and a collection of mapping objects.</summary>
			<param name="codeNamespace">The namespace of the types to generate.</param>
			<param name="options">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
			<param name="mappings">A <see cref="T:System.Collections.Hashtable"></see> that contains <see cref="T:System.Xml.Serialization.XmlMapping"></see> objects.</param>
			<param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> program graph container to which used assembly references are automatically added.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter"></see> class using the specified .NET Framework namespace, code compile unit containing the graph of the objects, an enumeration specifying code options, and a collection of mapping objects.</summary>
			<param name="codeNamespace">The namespace of the types to generate.</param>
			<param name="codeProvider">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
			<param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> that contains special instructions for code creation.</param>
			<param name="mappings">A <see cref="T:System.Collections.Hashtable"></see> that contains <see cref="T:System.Xml.Serialization.XmlMapping"></see> objects.</param>
			<param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see>  program graph container to which used assembly references are automatically added.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String)">
			<summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> declaration to a method parameter or return value that corresponds to a &lt;part&gt; element of a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
			<param name="member">An internal .NET Framework type mapping for a single element part of a WSDL message definition.</param>
			<param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects for the generated type to which the method adds an attribute declaration.</param>
			<param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlTypeMapping,System.String)">
			<summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> declaration to a method return value that corresponds to a &lt;part&gt; element of a non-SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
			<param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects for the generated type to which the method adds an attribute declaration.</param>
			<param name="mapping">The internal .NET Framework type mapping information for an XML schema element.</param>
			<param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String,System.Boolean)">
			<summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> declaration to a method parameter or return value that corresponds to a &lt;part&gt; element of a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
			<param name="member">An internal .NET Framework type mapping for a single element part of a WSDL message definition.</param>
			<param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration"></see> objects for the generated type to which the method adds an attribute declaration.</param>
			<param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
			<param name="forceUseMemberName">Flag that helps determine whether to add an initial argument containing the XML element name for the attribute declaration being generated.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
			<summary>Generates a .NET Framework type, plus attribute declarations, for each of the parts that belong to a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
			<param name="xmlMembersMapping">The internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
			<summary>Generates a .NET Framework type, plus attribute declarations, for an XML schema element. </summary>
			<param name="xmlTypeMapping">The internal .NET Framework type mapping information for an XML schema element.</param>
		</member>
		<member name="T:System.Xml.Serialization.XmlDeserializationEvents">
			<summary>Contains fields that can be used to pass event delegates to a thread-safe <see cref="Overload:System.Xml.Serialization.XmlSerializer.Deserialize"></see> method of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownAttribute">
			<summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute"></see> event.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlAttributeEventHandler"></see> that points to the event handler.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownElement">
			<summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement"></see> event.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlElementEventHandler"></see> that points to the event handler.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownNode">
			<summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode"></see> event.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlNodeEventHandler"></see> that points to the event handler.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnreferencedObject">
			<summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject"></see> event.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventHandler"></see> that points to the event handler.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlElementAttribute">
			<summary>Indicates that a public field or property represents an XML element when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes or deserializes the object that contains it.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> class and specifies the name of the XML element.</summary>
			<param name="elementName">The XML element name of the serialized member. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> class and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> is applied. This type is used by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> when serializing or deserializing object that contains it.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of an object derived from the member's type. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> and specifies the name of the XML element and a derived type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> is applied. This member type is used when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes the object that contains it.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of an object derived from the member's type. </param>
			<param name="elementName">The XML element name of the serialized member. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
			<summary>Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
			<returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</returns>
			<exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the.NET data type. </exception>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
			<summary>Gets or sets the name of the generated XML element.</summary>
			<returns>The name of the generated XML element. The default is the member identifier.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
			<summary>Gets or sets a value that indicates whether the element is qualified.</summary>
			<returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm"></see> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.Qualified"></see>.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
			<summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must serialize a member that is set to null as an empty tag with the xsi:nil attribute set to true.</summary>
			<returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates the xsi:nil attribute; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
			<summary>Gets or sets the namespace assigned to the XML element that results when the class is serialized.</summary>
			<returns>The namespace of the XML element.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
			<summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
			<returns>The order of the code generation.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
			<summary>Gets or sets the object type used to represent the XML element.</summary>
			<returns>The <see cref="T:System.Type"></see> of the member.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlElementAttributes">
			<summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> objects used by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> to override the default way it serializes a class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttributes.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttributes"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttributes.Add(System.Xml.Serialization.XmlElementAttribute)">
			<summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> to the collection.</summary>
			<returns>The zero-based index of the newly added item.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> to add. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttributes.Contains(System.Xml.Serialization.XmlElementAttribute)">
			<summary>Gets a value that specifies whether the collection contains the specified object.</summary>
			<returns>true, if the object exists in the collection; otherwise, false.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see>  in question. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttributes.CopyTo(System.Xml.Serialization.XmlElementAttribute[],System.Int32)">
			<summary>Copies the <see cref="T:System.Xml.Serialization.XmlElementAttributes"></see>, or a portion of it to a one-dimensional array.</summary>
			<param name="array">The <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> array to copy to. </param>
			<param name="index">The zero-based index in array at which copying begins. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttributes.IndexOf(System.Xml.Serialization.XmlElementAttribute)">
			<summary>Gets the index of the specified <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see>.</summary>
			<returns>The zero-based index of the <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see>.</returns>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see>  you are interested in.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlElementAttribute)">
			<summary>Inserts an <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> into the collection.</summary>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> to insert. </param>
			<param name="index">The zero-based index where the member is added. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlElementAttributes.Remove(System.Xml.Serialization.XmlElementAttribute)">
			<summary>Removes the specified object from the collection.</summary>
			<param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> to remove from the collection. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementAttributes.Item(System.Int32)">
			<summary>Gets or sets an <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> from the collection.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.XmlElementAttribute"></see> at the specified index.</returns>
			<param name="index">The zero-based index of the collection member to get or set. </param>
		</member>
		<member name="T:System.Xml.Serialization.XmlElementEventArgs">
			<summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement"></see> event.</summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementEventArgs.Element">
			<summary>Gets the object that represents the unknown XML element.</summary>
			<returns>An <see cref="T:System.Xml.XmlElement"></see>.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementEventArgs.ExpectedElements">
			<summary>Gets a comma-delimited list of XML element names expected to be in an XML document instance.</summary>
			<returns>A comma-delimited list of XML element names. Each name is in the following format: namespace:name.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementEventArgs.LineNumber">
			<summary>Gets the line number where the unknown element was encountered if the XML reader is an <see cref="T:System.Xml.XmlTextReader"></see>.</summary>
			<returns>The line number where the unknown element was encountered if the XML reader is an <see cref="T:System.Xml.XmlTextReader"></see>; otherwise, -1.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementEventArgs.LinePosition">
			<summary>Gets the place in the line where the unknown element occurs if the XML reader is an <see cref="T:System.Xml.XmlTextReader"></see>.</summary>
			<returns>The number in the line where the unknown element occurs if the XML reader is an <see cref="T:System.Xml.XmlTextReader"></see>; otherwise, -1.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlElementEventArgs.ObjectBeingDeserialized">
			<summary>Gets the object the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> is deserializing.</summary>
			<returns>The object that is being deserialized by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlElementEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement"></see> event of an <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlEnumAttribute">
			<summary>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes an enumeration member.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute"></see> class, and specifies the XML value that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates or recognizes (when it serializes or deserializes the enumeration, respectively).</summary>
			<param name="name">The overriding name of the enumeration member. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
			<summary>Gets or sets the value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes an enumeration, or the value recognized when it deserializes the enumeration member.</summary>
			<returns>The value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> serializes the enumeration, or the value recognized when it is deserializes the enumeration member.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
			<summary>Instructs the <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)"></see> method of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> not to serialize the public field or public read/write property value.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlIncludeAttribute">
			<summary>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> to recognize a type when it serializes or deserializes an object.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute"></see> class.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the object to include. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
			<summary>Gets or sets the type of the object to include.</summary>
			<returns>The <see cref="T:System.Type"></see> of the object to include.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlMapping">
			<summary>Supports mappings between .NET Framework types and XML Schema data types. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlMapping.SetKey(System.String)">
			<summary>Sets the key used to look up the mapping.</summary>
			<param name="key">A <see cref="T:System.String"></see> that contains the lookup key.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlMapping.ElementName">
			<summary>Get the name of the mapped element.</summary>
			<returns>The name of the mapped element.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMapping.Namespace">
			<summary>Gets the namespace of the mapped element.</summary>
			<returns>The namespace of the mapped element.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMapping.XsdElementName">
			<summary>Gets the name of the XSD element of the mapping.</summary>
			<returns>The XSD element name.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlMappingAccess">
			<summary>Specifies whether a mapping is read, write, or both.</summary>
		</member>
		<member name="F:System.Xml.Serialization.XmlMappingAccess.None">
			<summary>Both read and write methods are generated.</summary>
		</member>
		<member name="F:System.Xml.Serialization.XmlMappingAccess.Read">
			<summary>Read methods are generated.</summary>
		</member>
		<member name="F:System.Xml.Serialization.XmlMappingAccess.Write">
			<summary>Write methods are generated.</summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlMemberMapping">
			<summary>Maps a code entity in a .NET Framework Web service method to an element in a Web Services Description Language (WSDL) message.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlMemberMapping.GenerateTypeName(System.CodeDom.Compiler.CodeDomProvider)">
			<summary>Returns the name of the type associated with the specified <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see>.</summary>
			<returns>The name of the type.</returns>
			<param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see>  that contains the name of the type.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.Any">
			<summary>Gets or sets a value that indicates whether the .NET Framework type maps to an XML element or attribute of any type. </summary>
			<returns>true, if the type maps to an XML any element or attribute; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.CheckSpecified">
			<summary>Gets a value that indicates whether the accompanying field in the .NET Framework type has a value specified.</summary>
			<returns>true, if the accompanying field has a value specified; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.ElementName">
			<summary>Gets the unqualified name of the XML element declaration that applies to this mapping. </summary>
			<returns>The unqualified name of the XML element declaration that applies to this mapping.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.MemberName">
			<summary>Gets the name of the Web service method member that is represented by this mapping. </summary>
			<returns>The name of the Web service method member represented by this mapping.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.Namespace">
			<summary>Gets the XML namespace that applies to this mapping. </summary>
			<returns>The XML namespace that applies to this mapping.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.TypeFullName">
			<summary>Gets the fully qualified type name of the .NET Framework type for this mapping. </summary>
			<returns>The fully qualified type name of the .NET Framework type for this mapping.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.TypeName">
			<summary>Gets the type name of the .NET Framework type for this mapping. </summary>
			<returns>The type name of the .NET Framework type for this mapping.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.TypeNamespace">
			<summary>Gets the namespace of the .NET Framework type for this mapping.</summary>
			<returns>The namespace of the .NET Framework type for this mapping.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMemberMapping.XsdElementName">
			<summary>Gets the XML element name as it appears in the service description document.</summary>
			<returns>The XML element name.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlMembersMapping">
			<summary>Provides mappings between .NET Framework Web service methods and Web Services Description Language (WSDL) messages that are defined for SOAP Web services. </summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlMembersMapping.Count">
			<summary>Gets the number of .NET Framework code entities that belong to a Web service method to which a SOAP message is being mapped. </summary>
			<returns>The number of mappings in the collection.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMembersMapping.Item(System.Int32)">
			<summary>Gets an item that contains internal type mapping information for a .NET Framework code entity that belongs to a Web service method being mapped to a SOAP message.</summary>
			<returns>The requested <see cref="T:System.Xml.Serialization.XmlMemberMapping"></see>.</returns>
			<param name="index">The index of the mapping to return.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlMembersMapping.TypeName">
			<summary>Gets the name of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.</summary>
			<returns>The name of the .NET Framework type.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlMembersMapping.TypeNamespace">
			<summary>Gets the namespace of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.</summary>
			<returns>The .NET Framework namespace of the mapping.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
			<summary>Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute"></see> class.</summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlNodeEventArgs">
			<summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode"></see> event.</summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlNodeEventArgs.LineNumber">
			<summary>Gets the line number of the unknown XML node.</summary>
			<returns>The line number of the unknown XML node.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlNodeEventArgs.LinePosition">
			<summary>Gets the position in the line of the unknown XML node.</summary>
			<returns>The position number of the unknown XML node.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlNodeEventArgs.LocalName">
			<summary>Gets the XML local name of the XML node being deserialized.</summary>
			<returns>The XML local name of the node being deserialized.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlNodeEventArgs.Name">
			<summary>Gets the name of the XML node being deserialized.</summary>
			<returns>The name of the node being deserialized.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlNodeEventArgs.NamespaceURI">
			<summary>Gets the namespace URI that is associated with the XML node being deserialized.</summary>
			<returns>The namespace URI that is associated with the XML node being deserialized.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlNodeEventArgs.NodeType">
			<summary>Gets the type of the XML node being deserialized.</summary>
			<returns>The <see cref="T:System.Xml.XmlNodeType"></see> that represents the XML node being deserialized.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlNodeEventArgs.ObjectBeingDeserialized">
			<summary>Gets the object being deserialized.</summary>
			<returns>The <see cref="T:System.Object"></see> being deserialized.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlNodeEventArgs.Text">
			<summary>Gets the text of the XML node being deserialized.</summary>
			<returns>The text of the XML node being deserialized.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlNodeEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode"></see> event of an <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlReflectionImporter">
			<summary>Generates mappings to XML schema element declarations, including literal XML Schema Definition (XSD) message parts in a Web Services Description Language (WSDL) document, for .NET Framework types or Web service method information. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter"></see> class using the specified default XML namespace. </summary>
			<param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter"></see> class using the specified XML serialization overrides. </summary>
			<param name="attributeOverrides">An object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class serializes mapped types.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter"></see> class using the specified XML serialization overrides and default XML namespace. </summary>
			<param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
			<param name="attributeOverrides">An object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class serializes mapped types.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean)">
			<summary>Generates internal type mappings for information from a Web service method. </summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping"></see> with mappings to the element parts of a WSDL message definition.</returns>
			<param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
			<param name="elementName">An XML element name produced from the Web service method.</param>
			<param name="ns">An XML element namespace produced from the Web service method.</param>
			<param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember"></see>  objects that contain .NET Framework code entities that belong to a Web service method.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
			<summary>Returns internal type mappings using information from a Web service method, and allows you to specify an XML element name, XML namespace, and other options.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping"></see> that contains the mappings.</returns>
			<param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
			<param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
			<param name="elementName">An XML element name produced from the Web service method.</param>
			<param name="ns">An XML element namespace produced from the Web service method.</param>
			<param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember"></see>  objects that contain .NET Framework code entities that belong to a Web service method.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
			<summary>Returns internal type mappings using information from a Web service method, and allows you to specify an XML element name, XML namespace, and other options.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping"></see> that contains the mappings.</returns>
			<param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
			<param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
			<param name="elementName">An XML element name produced from the Web service method.</param>
			<param name="openModel">true to specify that the generated schema type will be marked with the &lt;xs:anyAttribute&gt; element; otherwise, false.</param>
			<param name="ns">An XML element namespace produced from the Web service method.</param>
			<param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember"></see>  objects that contain .NET Framework code entities that belong to a Web service method.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
			<summary>Generates internal type mappings for information from a Web service method.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping"></see> that contains the mappings.</returns>
			<param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
			<param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
			<param name="elementName">An XML element name produced from the Web service method.</param>
			<param name="openModel">true to specify that the generated schema type will be marked with the &lt;xs:anyAttribute&gt; element; otherwise, false.</param>
			<param name="access">One of the <see cref="T:System.Xml.Serialization.XmlMappingAccess"></see> values. The default is None.</param>
			<param name="ns">An XML element namespace produced from the Web service method.</param>
			<param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember"></see>  objects that contain .NET Framework code entities that belong to a Web service method.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type)">
			<summary>Generates a mapping to an XML Schema element for a specified .NET Framework type. </summary>
			<returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
			<param name="type">The .NET Framework type for which to generate a type mapping.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.String)">
			<summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and namespace. </summary>
			<returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
			<param name="type">The .NET Framework type for which to generate a type mapping.</param>
			<param name="defaultNamespace">The default XML namespace to use.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute)">
			<summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and attribute. </summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> that represents a mapping of a .NET Framework type to an XML Schema element.</returns>
			<param name="type">The .NET Framework type for which to generate a type mapping.</param>
			<param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> attribute that is applied to the type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute,System.String)">
			<summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type, attribute, and namespace. </summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> that contains the internal .NET Framework mapping of a type to an XML Schema element.</returns>
			<param name="type">The .NET Framework type for which to generate a type mapping.</param>
			<param name="defaultNamespace">The default XML namespace to use.</param>
			<param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> attribute that is applied to the type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeType(System.Type)">
			<summary>Includes mappings for a type for later use when import methods are invoked. </summary>
			<param name="type">The .NET Framework type for which to save type mapping information.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
			<summary>Includes mappings for derived types for later use when import methods are invoked. </summary>
			<param name="provider">An instance of the <see cref="T:System.Reflection.ICustomAttributeProvider"></see>  class that contains custom attributes derived from the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute"></see> attribute.</param>
		</member>
		<member name="T:System.Xml.Serialization.XmlReflectionMember">
			<summary>Provides mappings between code entities in .NET Framework Web service methods and the content of Web Services Description Language (WSDL) messages that are defined for SOAP Web services. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlReflectionMember.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionMember"></see> class. </summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlReflectionMember.IsReturnValue">
			<summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlReflectionMember"></see> represents a Web service method return value, as opposed to an output parameter. </summary>
			<returns>true, if the member represents a Web service return value; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlReflectionMember.MemberName">
			<summary>Gets or sets the name of the Web service method member for this mapping. </summary>
			<returns>The name of the Web service method.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlReflectionMember.MemberType">
			<summary>Gets or sets the type of the Web service method member code entity that is represented by this mapping. </summary>
			<returns>The <see cref="T:System.Type"></see> of the Web service method member code entity that is represented by this mapping.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlReflectionMember.OverrideIsNullable">
			<summary>Gets or sets a value that indicates that the value of the corresponding XML element definition's isNullable attribute is false.</summary>
			<returns>True to override the <see cref="P:System.Xml.Serialization.XmlElementAttribute.IsNullable"></see> property; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlReflectionMember.SoapAttributes">
			<summary>Gets or sets a <see cref="T:System.Xml.Serialization.SoapAttributes"></see> with the collection of SOAP-related attributes that have been applied to the member code entity. </summary>
			<returns>A <see cref="T:System.Xml.Serialization.SoapAttributes"></see> that contains the objects that represent SOAP attributes applied to the member.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlReflectionMember.XmlAttributes">
			<summary>Gets or sets an <see cref="T:System.Xml.Serialization.XmlAttributes"></see> with the collection of <see cref="T:System.Xml.Serialization.XmlSerializer"></see>-related attributes that have been applied to the member code entity. </summary>
			<returns>An <see cref="T:System.XML.Serialization.XmlAttributes"></see> that represents XML attributes that have been applied to the member code.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlRootAttribute">
			<summary>Controls XML serialization of the attribute target as an XML root element.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> class and specifies the name of the XML root element.</summary>
			<param name="elementName">The name of the XML root element. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
			<summary>Gets or sets the XSD data type of the XML root element.</summary>
			<returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema: DataTypes".</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
			<summary>Gets or sets the name of the XML element that is generated and recognized by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class's <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)"></see> and <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)"></see> methods, respectively.</summary>
			<returns>The name of the XML root element that is generated and recognized in an XML-document instance. The default is the name of the serialized class.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
			<summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> must serialize a member that is set to null into the xsi:nil attribute set to true.</summary>
			<returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates the xsi:nil attribute; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
			<summary>Gets or sets the namespace for the XML root element.</summary>
			<returns>The namespace for the XML element.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSchemaEnumerator">
			<summary>Enables iteration over a collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaEnumerator.#ctor(System.Xml.Serialization.XmlSchemas)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator"></see> class. </summary>
			<param name="list">The <see cref="T:System.Xml.Serialization.XmlSchemas"></see> object you want to iterate over.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaEnumerator.Dispose">
			<summary>Releases all resources used by the <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator"></see>.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaEnumerator.MoveNext">
			<summary>Advances the enumerator to the next item in the collection.</summary>
			<returns>true if the move is successful; otherwise, false.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaEnumerator.System.Collections.IEnumerator.Reset">
			<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlSchemaEnumerator.Current">
			<summary>Gets the current element in the collection.</summary>
			<returns>The current <see cref="T:System.Xml.Schema.XmlSchema"></see> object in the collection.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSchemaEnumerator.System.Collections.IEnumerator.Current">
			<summary>Gets the current element in the collection.</summary>
			<returns>The current element in the collection.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSchemaExporter">
			<summary>Populates <see cref="T:System.Xml.Schema.XmlSchema"></see> objects with XML schema element declarations that are found in type mapping objects. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaExporter"></see> class. </summary>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects to which element declarations obtained from type mappings are added.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.String)">
			<summary>Exports an &lt;any&gt; element to the <see cref="T:System.Xml.Schema.XmlSchema"></see> object that is identified by the specified namespace.</summary>
			<returns>An arbitrary name assigned to the &lt;any&gt; element declaration.</returns>
			<param name="ns">The namespace of the XML schema document to which to add an &lt;any&gt; element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.Xml.Serialization.XmlMembersMapping)">
			<summary>Adds an element declaration for an object or type to a SOAP message or to an <see cref="T:System.Xml.Schema.XmlSchema"></see> object.</summary>
			<returns>The string "any" with an appended integer. </returns>
			<param name="members">An <see cref="T:System.Xml.Serialization.XmlMembersMapping"></see>  that contains mappings to export.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
			<summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema"></see> for each of the element parts of a literal SOAP message definition. </summary>
			<param name="xmlMembersMapping">The internal .NET Framework type mappings for the element parts of a Web Services Description Language (WSDL) message definition.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
			<summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema"></see> for each of the element parts of a literal SOAP message definition, and specifies whether enclosing elements are included.</summary>
			<param name="xmlMembersMapping">The internal mapping between a .NET Framework type and an XML schema element.</param>
			<param name="exportEnclosingType">true if the schema elements that enclose the schema are to be included; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlMembersMapping)">
			<summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema"></see> object for a single element part of a literal SOAP message definition.</summary>
			<returns>An <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the qualified XML name of the exported element declaration.</returns>
			<param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a Web Services Description Language (WSDL) message definition.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
			<summary>Adds an element declaration for a .NET Framework type to the applicable <see cref="T:System.Xml.Schema.XmlSchema"></see> object. </summary>
			<param name="xmlTypeMapping">The internal mapping between a .NET Framework type and an XML schema element.</param>
		</member>
		<member name="T:System.Xml.Serialization.XmlSchemaImporter">
			<summary>Generates internal mappings to .NET Framework types for XML schema element declarations, including literal XSD message parts in a WSDL document. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects representing the XML schemas used by SOAP literal messages defined in a WSDL document. </summary>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects that represents the XML schemas used by SOAP literal messages, plus classes being generated for bindings defined in a Web Services Description Language (WSDL) document. </summary>
			<param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
			<param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see> object.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.Xml.Serialization.ImportContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> class for a collection of XML schemas, using the specified code generation options and import context.</summary>
			<param name="context">A <see cref="T:System.Xml.Serialization.ImportContext"></see> instance that specifies the import context.</param>
			<param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> enumeration that specifies code generation options.</param>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers,System.Xml.Serialization.CodeGenerationOptions)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects that represents the XML schemas used by SOAP literal messages, plus classes being generated for bindings defined in a WSDL document, and a <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> enumeration value.</summary>
			<param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers"></see> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
			<param name="options">A bitwise combination of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> values that specifies the options to use when generating .NET Framework types for a Web service.</param>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.ImportContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> class. </summary>
			<param name="context">A <see cref="T:System.Xml.Serialization.ImportContext"></see> instance that specifies the import context.</param>
			<param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> used to generate the serialization code.</param>
			<param name="options">A bitwise combination of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> values that specifies the options to use when generating .NET Framework types for a Web service.</param>
			<param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportAnyType(System.Xml.XmlQualifiedName,System.String)">
			<summary>Generates internal type mapping information for a single, (SOAP) literal element part defined in a WSDL document.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping"></see> representing the .NET Framework type mapping for a single element part of a WSDL message definition.</returns>
			<param name="typeName">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the name of an element's type for which a .NET Framework type is generated.</param>
			<param name="elementName">The name of the part element in the WSDL document.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type)">
			<summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> representing the.NET Framework type mapping information for an XML schema element.</returns>
			<param name="name">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the name of an element defined in an XML schema document.</param>
			<param name="baseType">A base type for the .NET Framework type that is generated to correspond to an XSD element's type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
			<summary>Generates internal type mapping information for an element defined in an XML schema document or as a part in a WSDL document.</summary>
			<returns>The .NET Framework type mapping information for an XML schema element.</returns>
			<param name="name">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the name of an element defined in an XML schema document.</param>
			<param name="baseType">A base type for the .NET Framework type that is generated to correspond to an XSD element's type.</param>
			<param name="baseTypeCanBeIndirect">true to indicate that the type corresponding to an XSD element can indirectly inherit from the base type; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName)">
			<summary>Generates internal type mapping information for a single element part of a literal-use SOAP message defined in a WSDL document. </summary>
			<returns>The .NET Framework type mapping for a WSDL message definition containing a single element part.</returns>
			<param name="name">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the name of the message part.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[])">
			<summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document. </summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping"></see> that represents the .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
			<param name="names">An array of type <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the names of the message parts.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
			<summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.XmlMembersMapping"></see> that contains type mapping information.</returns>
			<param name="name">The name of the element for which to generate a mapping.</param>
			<param name="ns">The namespace of the element for which to generate a mapping.</param>
			<param name="members">An array of <see cref="T:System.Xml.Serialization.SoapSchemaMember"></see> instances that specifies the members of the element for which to generate a mapping.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[],System.Type,System.Boolean)">
			<summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.</summary>
			<returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
			<param name="names">An array of type <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the names of the message parts.</param>
			<param name="baseType">A base type for all .NET Framework types that are generated to correspond to message parts.</param>
			<param name="baseTypeCanBeIndirect">true to indicate that the types corresponding to message parts can indirectly inherit from the base type; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName)">
			<summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
			<returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> object that describes a type mapping.</returns>
			<param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies an XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type)">
			<summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
			<returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> object that describes a type mapping.</returns>
			<param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies an XML element.</param>
			<param name="baseType">A <see cref="T:System.Type"></see> object that specifies a base type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
			<summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
			<returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> object that describes a type mapping.</returns>
			<param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies an XML element.</param>
			<param name="baseType">A <see cref="T:System.Type"></see> object that specifies a base type.</param>
			<param name="baseTypeCanBeIndirect">A <see cref="T:System.Boolean"></see> value that specifies whether the generated type can indirectly inherit the baseType.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportTypeMapping(System.Xml.XmlQualifiedName)">
			<summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
			<returns>The .NET Framework type mapping information for an XML schema element.</returns>
			<param name="name">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the name of an element defined in an XML schema document.</param>
		</member>
		<member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
			<summary>When applied to a type, stores the name of a static method of the type that returns an XML schema and a <see cref="T:System.Xml.XmlQualifiedName"></see> that controls the serialization of the type.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"></see> class, taking the name of the static method that supplies the type's XML schema.</summary>
			<param name="methodName">The name of the static method that must be implemented.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
			<summary>Gets or sets a value that determines whether the target class is a wildcard, or that the schema for the class has contains only an xs:any element.</summary>
			<returns>true, if the class is a wildcard, or if the schema contains only the xs:any element; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
			<summary>Gets the name of the static method that supplies the type's XML schema and the name of its XML Schema data type.</summary>
			<returns>The name of the method that is invoked by the XML infrastructure to return an XML schema.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSchemas">
			<summary>Represents the collection of XML schemas.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema)">
			<summary>Adds an object to the end of the collection.</summary>
			<returns>The index at which the <see cref="T:System.Xml.Schema.XmlSchema"></see> is added.</returns>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object to be added to the collection of objects. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Serialization.XmlSchemas)">
			<summary>Adds an instance of the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> class to the end of the collection.</summary>
			<param name="schemas">The <see cref="T:System.Xml.Serialization.XmlSchemas"></see> object to be added to the end of the collection. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema,System.Uri)">
			<summary>Adds an <see cref="T:System.Xml.Schema.XmlSchema"></see> object that represents an assembly reference to the collection.</summary>
			<returns>The index at which the <see cref="T:System.Xml.Schema.XmlSchema"></see> is added.</returns>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> to add.</param>
			<param name="baseUri">The <see cref="T:System.Uri"></see> of the schema object.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.AddReference(System.Xml.Schema.XmlSchema)">
			<summary>Adds an <see cref="T:System.Xml.Schema.XmlSchema"></see> object that represents an assembly reference to the collection.</summary>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> to add.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)">
			<summary>Processes the element and attribute names in the XML schemas and, optionally, validates the XML schemas. </summary>
			<param name="fullCompile">true to validate the XML schemas in the collection using the <see cref="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)"></see> method of the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> class; otherwise, false.</param>
			<param name="handler">A <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> that specifies the callback method that handles errors and warnings during XML Schema validation, if the strict parameter is set to true.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.String)">
			<summary>Returns a value that indicates whether the collection contains an <see cref="T:System.Xml.Schema.XmlSchema"></see> object that belongs to the specified namespace.</summary>
			<returns>true if the item is found; otherwise, false.</returns>
			<param name="targetNamespace">The namespace of the item to check for.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.Xml.Schema.XmlSchema)">
			<summary>Determines whether the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> contains a specific schema.</summary>
			<returns>true, if the collection contains the specified item; otherwise, false.</returns>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object to locate. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
			<summary>Copies the entire <see cref="T:System.Xml.Serialization.XmlSchemas"></see> to a compatible one-dimensional <see cref="T:System.Array"></see>, which starts at the specified index of the target array.</summary>
			<param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the schemas copied from <see cref="T:System.Xml.Serialization.XmlSchemas"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
			<param name="index">A 32-bit integer that represents the index in the array where copying begins.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Find(System.Xml.XmlQualifiedName,System.Type)">
			<summary>Locates in one of the XML schemas an <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> of the specified name and type. </summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> instance, such as an <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> or <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see>.</returns>
			<param name="type">The <see cref="T:System.Type"></see> of the object to find. Possible types include: <see cref="T:System.Xml.Schema.XmlSchemaGroup"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup"></see>, <see cref="T:System.Xml.Schema.XmlSchemaElement"></see>, <see cref="T:System.Xml.Schema.XmlSchemaAttribute"></see>, and <see cref="T:System.Xml.Schema.XmlSchemaNotation"></see>.</param>
			<param name="name">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies a fully qualified name with a namespace used to locate an <see cref="T:System.Xml.Schema.XmlSchema"></see> object in the collection.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.GetSchemas(System.String)">
			<summary>Gets a collection of schemas that belong to the same namespace.</summary>
			<returns>An <see cref="T:System.Collections.IList"></see> implementation that contains the schemas.</returns>
			<param name="ns">The namespace of the schemas to retrieve.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.IndexOf(System.Xml.Schema.XmlSchema)">
			<summary>Searches for the specified schema and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Xml.Serialization.XmlSchemas"></see>.</summary>
			<returns>The zero-based index of the first occurrence of the value within the entire <see cref="T:System.Xml.Serialization.XmlSchemas"></see>, if found; otherwise, -1.</returns>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> to locate. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Insert(System.Int32,System.Xml.Schema.XmlSchema)">
			<summary>Inserts a schema into the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> at the specified index.</summary>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> object to be inserted. </param>
			<param name="index">The zero-based index at which schema should be inserted. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.IsDataSet(System.Xml.Schema.XmlSchema)">
			<summary>Static method that determines whether the specified XML schema contains a custom IsDataSet attribute set to true, or its equivalent. </summary>
			<returns>true if the specified schema exists; otherwise, false.</returns>
			<param name="schema">The XML schema to check for an IsDataSet attribute with a true value.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.OnClear">
			<summary>Performs additional custom processes when clearing the contents of the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> instance.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.OnInsert(System.Int32,System.Object)">
			<summary>Performs additional custom processes before inserting a new element into the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> instance.</summary>
			<param name="value">The new value of the element at index. </param>
			<param name="index">The zero-based index at which to insert value. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.OnRemove(System.Int32,System.Object)">
			<summary>Performs additional custom processes when removing an element from the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> instance.</summary>
			<param name="value">The value of the element to remove at index. </param>
			<param name="index">The zero-based index at which value can be found. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.OnSet(System.Int32,System.Object,System.Object)">
			<summary>Performs additional custom processes before setting a value in the <see cref="T:System.Xml.Serialization.XmlSchemas"></see> instance.</summary>
			<param name="oldValue">The value to replace with newValue. </param>
			<param name="newValue">The new value of the element at index. </param>
			<param name="index">The zero-based index at which oldValue can be found. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.Remove(System.Xml.Schema.XmlSchema)">
			<summary>Removes the first occurrence of a specific schema from the <see cref="T:System.Xml.Serialization.XmlSchemas"></see>.</summary>
			<param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema"></see> to remove. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSchemas.System.Collections.Generic.IEnumerable&lt;System.Xml.Schema.XmlSchema&gt;.GetEnumerator">
			<summary>Returns an enumerator that can be used to iterate through the schema collection.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator"></see> that enables iteration over the collection.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSchemas.IsCompiled">
			<summary>Gets a value that indicates whether the schemas have been compiled.</summary>
			<returns>true, if the schemas have been compiled; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSchemas.Item(System.Int32)">
			<summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchema"></see> object at the specified index. </summary>
			<returns>The specified <see cref="T:System.Xml.Schema.XmlSchema"></see>.</returns>
			<param name="index">The index of the item to retrieve.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSchemas.Item(System.String)">
			<summary>Gets a specified <see cref="T:System.Xml.Schema.XmlSchema"></see> object that represents the XML schema associated with the specified namespace.</summary>
			<returns>The specified <see cref="T:System.Xml.Schema.XmlSchema"></see> object.</returns>
			<param name="ns">The namespace of the specified object.</param>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback">
			<summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class for deserialization of SOAP-encoded XML data types that map to collections or enumerations. </summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationFixupCallback">
			<summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class for deserialization of SOAP-encoded XML data. </summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationGeneratedCode">
			<summary>An abstract class that is the base class for <see cref="T:System.Xml.Serialization.XmlSerializationReader"></see> and <see cref="T:System.Xml.Serialization.XmlSerializationWriter"></see> and that contains methods common to both of these types.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationGeneratedCode.#ctor">
			<summary>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializationGeneratedCode"></see> class. </summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationReadCallback">
			<summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class for deserialization of types from SOAP-encoded, non-root XML data. </summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationReader">
			<summary>Controls deserialization by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationReader"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.CollectionFixup)">
			<summary>Stores an object that contains a callback method that will be called, as necessary, to fill in .NET Framework collections or enumerations that map to SOAP-encoded arrays or SOAP-encoded, multi-referenced elements. </summary>
			<param name="fixup">A <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback"></see> delegate and the callback method's input data.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.Fixup)">
			<summary>Stores an object that contains a callback method instance that will be called, as necessary, to fill in the objects in a SOAP-encoded array. </summary>
			<param name="fixup">An <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback"></see> delegate and the callback method's input data.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.AddReadCallback(System.String,System.String,System.Type,System.Xml.Serialization.XmlSerializationReadCallback)">
			<summary>Stores an implementation of the <see cref="T:System.Xml.Serialization.XmlSerializationReadCallback"></see> delegate and its input data for a later invocation. </summary>
			<param name="type">The <see cref="T:System.Type"></see> to be deserialized.</param>
			<param name="read">An <see cref="T:System.Xml.Serialization.XmlSerializationReadCallback"></see> delegate.</param>
			<param name="name">The name of the .NET Framework type that is being deserialized.</param>
			<param name="ns">The namespace of the .NET Framework type that is being deserialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)">
			<summary>Stores an object that is being deserialized from a SOAP-encoded multiRef element for later access through the <see cref="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)"></see> method. </summary>
			<param name="o">The object that is deserialized from the XML element.</param>
			<param name="id">The value of the id attribute of a multiRef element that identifies the element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CheckReaderCount(System.Int32@,System.Int32@)">
			<summary>Checks whether the deserializer has advanced.</summary>
			<param name="whileIterations">The current count in a while loop.</param>
			<param name="readerCount">The current <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount"></see>. </param>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount"></see> has not advanced. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CollapseWhitespace(System.String)">
			<summary>Removes all occurrences of white space characters from the beginning and end of the specified string.</summary>
			<returns>The trimmed string.</returns>
			<param name="value">The string that will have its white space trimmed.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateAbstractTypeException(System.String,System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that an object being deserialized should be abstract. </summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="name">The name of the abstract type.</param>
			<param name="ns">The .NET Framework namespace of the abstract type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateBadDerivationException(System.String,System.String,System.String,System.String,System.String,System.String)">
			<summary>Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader"></see>, with an option to read the inner element.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="clrBase">The name of the base .NET Framework type.</param>
			<param name="nsDerived">The namespace of the derived XML Schema data type.</param>
			<param name="xsdDerived">The local name of the derived XML Schema data type.</param>
			<param name="clrDerived">The namespace of the derived .NET Framework type.</param>
			<param name="nsBase">The namespace of the base XML Schema data type.</param>
			<param name="xsdBase">The local name of the base XML Schema data type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateCtorHasSecurityException(System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that an object being deserialized cannot be instantiated because the constructor throws a security exception.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="typeName">The name of the type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInaccessibleConstructorException(System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that an object being deserialized cannot be instantiated because there is no constructor available.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="typeName">The name of the type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object)">
			<summary>Creates an <see cref="T:System.InvalidCastException"></see> that indicates that an explicit reference conversion failed.</summary>
			<returns>An <see cref="T:System.InvalidCastException"></see> exception.</returns>
			<param name="type">The <see cref="T:System.Type"></see> that an object cannot be cast to. This type is incorporated into the exception message.</param>
			<param name="value">The object that cannot be cast. This object is incorporated into the exception message.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object,System.String)">
			<summary>Creates an <see cref="T:System.InvalidCastException"></see> that indicates that an explicit reference conversion failed.</summary>
			<returns>An <see cref="T:System.InvalidCastException"></see> exception.</returns>
			<param name="type">The <see cref="T:System.Type"></see> that an object cannot be cast to. This type is incorporated into the exception message.</param>
			<param name="value">The object that cannot be cast. This object is incorporated into the exception message.</param>
			<param name="id">A string identifier.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateMissingIXmlSerializableType(System.String,System.String,System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that a derived type that is mapped to an XML Schema data type cannot be located.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="clrType">The full name of the .NET Framework base type for which a derived type cannot be located.</param>
			<param name="name">The local name of the XML Schema data type that is mapped to the unavailable derived type.</param>
			<param name="ns">The namespace of the XML Schema data type that is mapped to the unavailable derived type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateReadOnlyCollectionException(System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that a SOAP-encoded collection type cannot be modified and its values cannot be filled in. </summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="name">The fully qualified name of the .NET Framework type for which there is a mapping.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownConstantException(System.String,System.Type)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that an enumeration value is not valid. </summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="enumType">The enumeration type.</param>
			<param name="value">The enumeration value that is not valid.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownNodeException">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that the current position of <see cref="T:System.Xml.XmlReader"></see> represents an unknown XML node. </summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownTypeException(System.Xml.XmlQualifiedName)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that a type is unknown. </summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="type">An <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the name of the unknown type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.EnsureArrayIndex(System.Array,System.Int32,System.Type)">
			<summary>Ensures that a given array, or a copy, is large enough to contain a specified index. </summary>
			<returns>The existing <see cref="T:System.Array"></see>, if it is already large enough; otherwise, a new, larger array that contains the original array's elements.</returns>
			<param name="a">The <see cref="T:System.Array"></see> that is being checked.</param>
			<param name="elementType">The <see cref="T:System.Type"></see> of the array's elements.</param>
			<param name="index">The required index.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.FixupArrayRefs(System.Object)">
			<summary>Fills in the values of a SOAP-encoded array whose data type maps to a .NET Framework reference type. </summary>
			<param name="fixup">An object that contains the array whose values are filled in.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.GetArrayLength(System.String,System.String)">
			<summary>Gets the length of the SOAP-encoded array where the <see cref="T:System.Xml.XmlReader"></see> is currently positioned. </summary>
			<returns>The length of the SOAP array.</returns>
			<param name="name">The local name that the array should have.</param>
			<param name="ns">The namespace that the array should have.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.GetNullAttr">
			<summary>Determines whether the XML element where the <see cref="T:System.Xml.XmlReader"></see> is currently positioned has a null attribute set to the value true.</summary>
			<returns>true if <see cref="T:System.Xml.XmlReader"></see> is currently positioned over a null attribute with the value true; otherwise, false.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)">
			<summary>Gets an object that is being deserialized from a SOAP-encoded multiRef element and that was stored earlier by <see cref="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)"></see>.  </summary>
			<returns>An object to be deserialized from a SOAP-encoded multiRef element.</returns>
			<param name="id">The value of the id attribute of a multiRef element that identifies the element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.GetXsiType">
			<summary>Gets the value of the xsi:type attribute for the XML element at the current location of the <see cref="T:System.Xml.XmlReader"></see>. </summary>
			<returns>An XML qualified name that indicates the data type of an XML element.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.InitCallbacks">
			<summary>Initializes callback methods that populate objects that map to SOAP-encoded XML data. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.InitIDs">
			<summary>Stores element and attribute names in a <see cref="T:System.Xml.NameTable"></see> object. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.IsXmlnsAttribute(System.String)">
			<summary>Determines whether an XML attribute name indicates an XML namespace. </summary>
			<returns>true if the XML attribute name indicates an XML namespace; otherwise, false.</returns>
			<param name="name">The name of an XML attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ParseWsdlArrayType(System.Xml.XmlAttribute)">
			<summary>Sets the value of the XML attribute if it is of type arrayType from the Web Services Description Language (WSDL) namespace. </summary>
			<param name="attr">An <see cref="T:System.Xml.XmlAttribute"></see> that may have the type wsdl:array.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadElementQualifiedName">
			<summary>Makes the <see cref="T:System.Xml.XmlReader"></see> read the fully qualified name of the element where it is currently positioned. </summary>
			<returns>The fully qualified name of the current XML element.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadEndElement">
			<summary>Makes the <see cref="T:System.Xml.XmlReader"></see> read an XML end tag. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNull">
			<summary>Instructs the <see cref="T:System.Xml.XmlReader"></see> to read the current XML element if the element has a null attribute with the value true. </summary>
			<returns>true if the element has a null="true" attribute value and has been read; otherwise, false.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableQualifiedName">
			<summary>Instructs the <see cref="T:System.Xml.XmlReader"></see> to read the fully qualified name of the element where it is currently positioned. </summary>
			<returns>A <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the fully qualified name of the current XML element; otherwise, null if a null="true" attribute value is present.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableString">
			<summary>Instructs the <see cref="T:System.Xml.XmlReader"></see> to read a simple, text-only XML element that could be null. </summary>
			<returns>The string value; otherwise, null.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReference(System.String@)">
			<summary>Reads the value of the href attribute (ref attribute for SOAP 1.2) that is used to refer to an XML element in SOAP encoding. </summary>
			<returns>true if the value was read; otherwise, false.</returns>
			<param name="fixupReference">An output string into which the href attribute value is read.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement">
			<summary>Deserializes an object from a SOAP-encoded multiRef XML element. </summary>
			<returns>The value of the referenced element in the document.</returns>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement(System.String,System.String)">
			<summary>Deserializes an object from a SOAP-encoded multiRef XML element. </summary>
			<returns>The value of the referenced element in the document.</returns>
			<param name="name">The local name of the element's XML Schema data type.</param>
			<param name="ns">The namespace of the element's XML Schema data type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElements">
			<summary>Deserializes objects from the SOAP-encoded multiRef elements in a SOAP message. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String@)">
			<summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element. </summary>
			<param name="fixupReference">An output string into which the href attribute value is read.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.String@)">
			<summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element. </summary>
			<param name="fixupReference">An output string into which the href attribute value is read.</param>
			<param name="name">The local name of the element's XML Schema data type.</param>
			<param name="ns">The namespace of the element's XML Schema data type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.Boolean,System.String@)">
			<summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element.</summary>
			<param name="fixupReference">An output string into which the value of the href attribute is read.</param>
			<param name="name">The local name of the element's XML Schema data type.</param>
			<param name="elementCanBeType">true if the element name is also the XML Schema data type name; otherwise, false.</param>
			<param name="ns">The namespace of the element's XML Schema data type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable)">
			<summary>Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader"></see>. </summary>
			<returns>An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable"></see> interface with its members populated from the location of the <see cref="T:System.Xml.XmlReader"></see>.</returns>
			<param name="serializable">An <see cref="T:System.Xml.Serialization.IXmlSerializable"></see> that corresponds to the current position of the <see cref="T:System.Xml.XmlReader"></see>.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String)">
			<summary>Produces the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString"></see> method appended to the input value. </summary>
			<returns>The result of call to the <see cref="M:System.Xml.XmlReader.ReadString"></see> method appended to the input value.</returns>
			<param name="value">A string to prefix to the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString"></see> method.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String,System.Boolean)">
			<summary>Returns the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString"></see> method of the <see cref="T:System.Xml.XmlReader"></see> class, trimmed of white space if needed, and appended to the input value.</summary>
			<returns>The result of the read operation appended to the input value.</returns>
			<param name="trim">true if the result of the read operation should be trimmed; otherwise, false.</param>
			<param name="value">A string that will be appended to.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedNull(System.Xml.XmlQualifiedName)">
			<summary>Reads an XML element that allows null values (xsi:nil = 'true') and returns a generic <see cref="T:System.Nullable`1"></see> value. </summary>
			<returns>A generic <see cref="T:System.Nullable`1"></see> that represents a null XML value.</returns>
			<param name="type">The <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the simple data type for the current location of the <see cref="T:System.Xml.XmlReader"></see>.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedPrimitive(System.Xml.XmlQualifiedName)">
			<summary>Gets the value of the XML node at which the <see cref="T:System.Xml.XmlReader"></see> is currently positioned. </summary>
			<returns>The value of the node as a .NET Framework value type, if the value is a simple XML Schema data type.</returns>
			<param name="type">The <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the simple data type for the current location of the <see cref="T:System.Xml.XmlReader"></see>.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlDocument(System.Boolean)">
			<summary>Instructs the <see cref="T:System.Xml.XmlReader"></see> to read an XML document root element at its current position.</summary>
			<returns>An <see cref="T:System.Xml.XmlDocument"></see> that contains the root element that has been read.</returns>
			<param name="wrapped">true if the method should read content only after reading the element's start element; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlNode(System.Boolean)">
			<summary>Instructs the <see cref="T:System.Xml.XmlReader"></see> to read the XML node at its current position. </summary>
			<returns>An <see cref="T:System.Xml.XmlNode"></see> that represents the XML node that has been read.</returns>
			<param name="wrapped">true to read content only after reading the element's start element; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.Referenced(System.Object)">
			<summary>Stores an object to be deserialized from a SOAP-encoded multiRef element.</summary>
			<param name="o">The object to be deserialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ResolveDynamicAssembly(System.String)">
			<summary>Gets a dynamically generated assembly by name.</summary>
			<returns>A dynamically generated <see cref="T:System.Reflection.Assembly"></see>.</returns>
			<param name="assemblyFullName">The full name of the assembly.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ShrinkArray(System.Array,System.Int32,System.Type,System.Boolean)">
			<summary>Ensures that a given array, or a copy, is no larger than a specified length. </summary>
			<returns>The existing <see cref="T:System.Array"></see>, if it is already small enough; otherwise, a new, smaller array that contains the original array's elements up to the size of length.</returns>
			<param name="a">The array that is being checked.</param>
			<param name="elementType">The <see cref="T:System.Type"></see> of the array's elements.</param>
			<param name="isNullable">true if null for the array, if present for the input array, can be returned; otherwise, a new, smaller array.</param>
			<param name="length">The maximum length of the array.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.Boolean)">
			<summary>Instructs the <see cref="T:System.Xml.XmlReader"></see> to read the string value at its current position and return it as a base-64 byte array.</summary>
			<returns>A base-64 byte array; otherwise, null if the value of the isNull parameter is true.</returns>
			<param name="isNull">true to return null; false to return a base-64 byte array.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.String)">
			<summary>Produces a base-64 byte array from an input string. </summary>
			<returns>A base-64 byte array.</returns>
			<param name="value">A string to translate into a base-64 byte array.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.Boolean)">
			<summary>Instructs the <see cref="T:System.Xml.XmlReader"></see> to read the string value at its current position and return it as a hexadecimal byte array.</summary>
			<returns>A hexadecimal byte array; otherwise, null if the value of the isNull parameter is true. </returns>
			<param name="isNull">true to return null; false to return a hexadecimal byte array.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.String)">
			<summary>Produces a hexadecimal byte array from an input string.</summary>
			<returns>A hexadecimal byte array.</returns>
			<param name="value">A string to translate into a hexadecimal byte array.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToChar(System.String)">
			<summary>Produces a <see cref="T:System.Char"></see> object from an input string. </summary>
			<returns>A <see cref="T:System.Char"></see> object.</returns>
			<param name="value">A string to translate into a <see cref="T:System.Char"></see> object.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToDate(System.String)">
			<summary>Produces a <see cref="T:System.DateTime"></see> object from an input string. </summary>
			<returns>A <see cref="T:System.DateTime"></see>object.</returns>
			<param name="value">A string to translate into a <see cref="T:System.DateTime"></see> class object.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToDateTime(System.String)">
			<summary>Produces a <see cref="T:System.DateTime"></see> object from an input string. </summary>
			<returns>A <see cref="T:System.DateTime"></see> object.</returns>
			<param name="value">A string to translate into a <see cref="T:System.DateTime"></see> object.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToEnum(System.String,System.Collections.Hashtable,System.String)">
			<summary>Produces a numeric enumeration value from a string that consists of delimited identifiers that represent constants from the enumerator list. </summary>
			<returns>A long value that consists of the enumeration value as a series of bitwise OR operations.</returns>
			<param name="typeName">The name of the enumeration type.</param>
			<param name="h">A <see cref="T:System.Collections.Hashtable"></see> that consists of the identifiers as keys and the constants as integral numbers.</param>
			<param name="value">A string that consists of delimited identifiers where each identifier represents a constant from the set enumerator list.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToTime(System.String)">
			<summary>Produces a <see cref="T:System.DateTime"></see> from a string that represents the time. </summary>
			<returns>A <see cref="T:System.DateTime"></see> object.</returns>
			<param name="value">A string to translate into a <see cref="T:System.DateTime"></see> object.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlName(System.String)">
			<summary>Decodes an XML name.</summary>
			<returns>A decoded string.</returns>
			<param name="value">An XML name to be decoded.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNCName(System.String)">
			<summary>Decodes an XML name.</summary>
			<returns>A decoded string.</returns>
			<param name="value">An XML name to be decoded.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmToken(System.String)">
			<summary>Decodes an XML name.</summary>
			<returns>A decoded string.</returns>
			<param name="value">An XML name to be decoded.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmTokens(System.String)">
			<summary>Decodes an XML name.</summary>
			<returns>A decoded string.</returns>
			<param name="value">An XML name to be decoded.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlQualifiedName(System.String)">
			<summary>Obtains an <see cref="T:System.Xml.XmlQualifiedName"></see> from a name that may contain a prefix. </summary>
			<returns>An <see cref="T:System.Xml.XmlQualifiedName"></see> that represents a namespace-qualified XML name.</returns>
			<param name="value">A name that may contain a prefix.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute)">
			<summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute"></see> event for the current position of the <see cref="T:System.Xml.XmlReader"></see>. </summary>
			<param name="attr">An <see cref="T:System.Xml.XmlAttribute"></see> that represents the attribute in question.</param>
			<param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized"></see> property.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute,System.String)">
			<summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute"></see> event for the current position of the <see cref="T:System.Xml.XmlReader"></see>. </summary>
			<param name="attr">A <see cref="T:System.Xml.XmlAttribute"></see> that represents the attribute in question.</param>
			<param name="qnames">A comma-delimited list of XML qualified names.</param>
			<param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized"></see> property.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement)">
			<summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement"></see> event for the current position of the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="elem">The <see cref="T:System.Xml.XmlElement"></see> for which an event is raised.</param>
			<param name="o">The <see cref="T:System.Object"></see> that is being deserialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement,System.String)">
			<summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement"></see> event for the current position of the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="elem">The <see cref="T:System.Xml.XmlElement"></see> for which an event is raised.</param>
			<param name="qnames">A comma-delimited list of XML qualified names.</param>
			<param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized"></see> property.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object)">
			<summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode"></see> event for the current position of the <see cref="T:System.Xml.XmlReader"></see>. </summary>
			<param name="o">The object that is being deserialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object,System.String)">
			<summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode"></see> event for the current position of the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="qnames">A comma-delimited list of XML qualified names.</param>
			<param name="o">The object being deserialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.UnreferencedObject(System.String,System.Object)">
			<summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject"></see> event for the current position of the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject"></see> property.</param>
			<param name="id">A unique string that is used to identify the unreferenced object, subsequently accessible through the <see cref="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId"></see> property.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.DecodeName">
			<summary>Gets or sets a value that determines whether XML strings are translated into valid .NET Framework type names.</summary>
			<returns>true if XML strings are decoded into valid .NET Framework type names; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.Document">
			<summary>Gets the XML document object into which the XML document is being deserialized. </summary>
			<returns>An <see cref="T:System.Xml.XmlDocument"></see> that represents the deserialized <see cref="T:System.Xml.XmlDocument"></see> data.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.IsReturnValue">
			<summary>Gets or sets a value that should be true for a SOAP 1.1 return value.</summary>
			<returns>true, if the value is a return value. </returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.Reader">
			<summary>Gets the <see cref="T:System.Xml.XmlReader"></see> object that is being used by <see cref="T:System.Xml.Serialization.XmlSerializationReader"></see>. </summary>
			<returns>The <see cref="T:System.Xml.XmlReader"></see> that is being used by the <see cref="T:System.Xml.Serialization.XmlSerializationReader"></see>.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount">
			<summary>Gets the current count of the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<returns>The current count of an <see cref="T:System.Xml.XmlReader"></see>.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationReader.CollectionFixup">
			<summary>Holds an <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback"></see> delegate instance, plus the method's inputs; also supplies the method's parameters. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationCollectionFixupCallback,System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationReader.CollectionFixup"></see> class with parameters for a callback method. </summary>
			<param name="collectionItems">An array into which the callback method copies a collection.</param>
			<param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback"></see> delegate.</param>
			<param name="collection">A collection into which the callback method copies the collection items array.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Callback">
			<summary>Gets the callback method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback"></see> delegate. </summary>
			<returns>The <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback"></see> delegate that points to the callback method.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Collection">
			<summary>Gets the object collection for the callback method. </summary>
			<returns>The collection that is used for the fixup.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.CollectionItems">
			<summary>Gets the array into which the callback method copies a collection. </summary>
			<returns>The array into which the callback method copies a collection.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationReader.Fixup">
			<summary>Holds an <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback"></see> delegate instance, plus the method's inputs; also serves as the parameter for the method. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.Int32)">
			<summary>Receives the size of a string array to generate. </summary>
			<param name="count">The size of the string array obtained through the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids"></see> property.</param>
			<param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback"></see> delegate.</param>
			<param name="o">The object that contains other objects whose values get filled in by the callback implementation.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.String[])">
			<summary>Receives a string array. </summary>
			<param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback"></see> delegate.</param>
			<param name="ids">The string array obtained through the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids"></see> property.</param>
			<param name="o">The object that contains other objects whose values get filled in by the callback implementation.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Callback">
			<summary>Gets the callback method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback"></see> delegate. </summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids">
			<summary>Gets or sets an array of keys for the objects that belong to the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source"></see> property whose values get filled in by the callback implementation. </summary>
			<returns>The array of keys.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source">
			<summary>Gets or sets the object that contains other objects whose values get filled in by the callback implementation.</summary>
			<returns>The source containing objects with values to fill.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationWriteCallback">
			<summary>Delegate that is used by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class for serialization of types from SOAP-encoded, non-root XML data. </summary>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializationWriter">
			<summary>Abstract class used for controlling serialization by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationWriter"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.AddWriteCallback(System.Type,System.String,System.String,System.Xml.Serialization.XmlSerializationWriteCallback)">
			<summary>Stores an implementation of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback"></see> delegate and the type it applies to, for a later invocation. </summary>
			<param name="type">The <see cref="T:System.Type"></see> of objects that are serialized.</param>
			<param name="typeNs">The namespace of the type of objects that are serialized.</param>
			<param name="typeName">The name of the type of objects that are serialized.</param>
			<param name="callback">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback"></see> delegate.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateChoiceIdentifierValueException(System.String,System.String,System.String,System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates an unexpected name for an element that adheres to an XML Schema choice element declaration.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="identifier">The choice element declaration that the name belongs to.</param>
			<param name="name">The expected local name of an element.</param>
			<param name="value">The name that is not valid.</param>
			<param name="ns">The expected namespace of an element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Object)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> has been invalidly applied to a member; only members that are of type <see cref="T:System.Xml.XmlNode"></see>, or derived from <see cref="T:System.Xml.XmlNode"></see>, are valid.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="o">The object that represents the invalid member.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Type)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"></see> has been invalidly applied to a member; only members that are of type <see cref="T:System.Xml.XmlNode"></see>, or derived from <see cref="T:System.Xml.XmlNode"></see>, are valid.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="type">The <see cref="T:System.Type"></see> that is invalid.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidChoiceIdentifierValueException(System.String,System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates a failure while writing an array where an XML Schema choice element declaration is applied.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="type">The type being serialized.</param>
			<param name="identifier">A name for the choice element declaration.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidEnumValueException(System.Object,System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> for an invalid enumeration value.</summary>
			<returns>An <see cref="T:System.ComponentModel.InvalidEnumArgumentException"></see>.</returns>
			<param name="typeName">The XML type name.</param>
			<param name="value">An object that represents the invalid enumeration.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateMismatchChoiceException(System.String,System.String,System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that a value for an XML element does not match an enumeration type.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="elementName">The name of the XML element with an invalid value.</param>
			<param name="enumValue">The valid value.</param>
			<param name="value">The value that is not valid.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownAnyElementException(System.String,System.String)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that an XML element that should adhere to the XML Schema any element declaration cannot be processed.</summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="name">The XML element that cannot be processed.</param>
			<param name="ns">The namespace of the XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Object)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that a type being serialized is not being used in a valid manner or is unexpectedly encountered. </summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="o">The object whose type cannot be serialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Type)">
			<summary>Creates an <see cref="T:System.InvalidOperationException"></see> that indicates that a type being serialized is not being used in a valid manner or is unexpectedly encountered. </summary>
			<returns>An <see cref="T:System.InvalidOperationException"></see> exception.</returns>
			<param name="type">The type that cannot be serialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayBase64(System.Byte[])">
			<summary>Processes a base-64 byte array.</summary>
			<returns>The same byte array that was passed in as an argument.</returns>
			<param name="value">A base-64 <see cref="T:System.Byte"></see> array.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayHex(System.Byte[])">
			<summary>Produces a string from an input hexadecimal byte array.</summary>
			<returns>The byte array value converted to a string.</returns>
			<param name="value">A hexadecimal byte array to translate to a string.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromChar(System.Char)">
			<summary>Produces a string from an input <see cref="T:System.Char"></see>.</summary>
			<returns>The <see cref="T:System.Char"></see> value converted to a string.</returns>
			<param name="value">A <see cref="T:System.Char"></see> to translate to a string.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDate(System.DateTime)">
			<summary>Produces a string from a <see cref="T:System.DateTime"></see> object.</summary>
			<returns>A string representation of the <see cref="T:System.DateTime"></see> that shows the date but no time.</returns>
			<param name="value">A <see cref="T:System.DateTime"></see> to translate to a string.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDateTime(System.DateTime)">
			<summary>Produces a string from an input <see cref="T:System.DateTime"></see>.</summary>
			<returns>A string representation of the <see cref="T:System.DateTime"></see> that shows the date and time.</returns>
			<param name="value">A <see cref="T:System.DateTime"></see> to translate to a string.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[])">
			<summary>Produces a string that consists of delimited identifiers that represent the enumeration members that have been set.</summary>
			<returns>A string that consists of delimited identifiers, where each represents a member from the set enumerator list.</returns>
			<param name="ids">The enumeration's constant values.</param>
			<param name="value">The enumeration value as a series of bitwise OR operations.</param>
			<param name="values">The enumeration's name values.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[],System.String)">
			<summary>Takes a numeric enumeration value and the names and constants from the enumerator list for the enumeration and returns a string that consists of delimited identifiers that represent the enumeration members that have been set.</summary>
			<returns>A string that consists of delimited identifiers, where each item is one of the values set by the bitwise operation.</returns>
			<param name="typeName">The name of the type </param>
			<param name="ids">The constants of the enumeration.</param>
			<param name="value">The enumeration value as a series of bitwise OR operations.</param>
			<param name="values">The values of the enumeration.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromTime(System.DateTime)">
			<summary>Produces a string from a <see cref="T:System.DateTime"></see> object.</summary>
			<returns>A string representation of the <see cref="T:System.DateTime"></see> object that shows the time but no date.</returns>
			<param name="value">A <see cref="T:System.DateTime"></see> that is translated to a string.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlName(System.String)">
			<summary>Encodes a valid XML name by replacing characters that are not valid with escape sequences.</summary>
			<returns>An encoded string.</returns>
			<param name="name">A string to be used as an XML name.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNCName(System.String)">
			<summary>Encodes a valid XML local name by replacing characters that are not valid with escape sequences.</summary>
			<returns>An encoded string.</returns>
			<param name="ncName">A string to be used as a local (unqualified) XML name.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmToken(System.String)">
			<summary>Encodes an XML name.</summary>
			<returns>An encoded string.</returns>
			<param name="nmToken">An XML name to be encoded.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmTokens(System.String)">
			<summary>Encodes a space-delimited sequence of XML names into a single XML name.</summary>
			<returns>An encoded string.</returns>
			<param name="nmTokens">A space-delimited sequence of XML names to be encoded.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)">
			<summary>Returns an XML qualified name, with invalid characters replaced by escape sequences. </summary>
			<returns>An XML qualified name, with invalid characters replaced by escape sequences.</returns>
			<param name="xmlQualifiedName">An <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the XML to be written.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName,System.Boolean)">
			<summary>Produces a string that can be written as an XML qualified name, with invalid characters replaced by escape sequences. </summary>
			<returns>An XML qualified name, with invalid characters replaced by escape sequences.</returns>
			<param name="ignoreEmpty">true to ignore empty spaces in the string; otherwise, false.</param>
			<param name="xmlQualifiedName">An <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the XML to be written.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.InitCallbacks">
			<summary>Initializes instances of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback"></see> delegate to serialize SOAP-encoded XML data. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.ResolveDynamicAssembly(System.String)">
			<summary>Gets a dynamically generated assembly by name.</summary>
			<returns>A dynamically generated assembly.</returns>
			<param name="assemblyFullName">The full name of the assembly.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.TopLevelElement">
			<summary>Initializes object references only while serializing a SOAP-encoded SOAP message.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.Byte[])">
			<summary>Instructs an <see cref="T:System.Xml.XmlWriter"></see> object to write an XML attribute that has no namespace specified for its name.</summary>
			<param name="localName">The local name of the XML attribute.</param>
			<param name="value">The value of the XML attribute as a byte array.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String)">
			<summary>Instructs the <see cref="T:System.Xml.XmlWriter"></see> to write an XML attribute that has no namespace specified for its name. </summary>
			<param name="localName">The local name of the XML attribute.</param>
			<param name="value">The value of the XML attribute as a string.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.Byte[])">
			<summary>Instructs an <see cref="T:System.Xml.XmlWriter"></see> object to write an XML attribute.</summary>
			<param name="localName">The local name of the XML attribute.</param>
			<param name="value">The value of the XML attribute as a byte array.</param>
			<param name="ns">The namespace of the XML attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String)">
			<summary>Writes an XML attribute. </summary>
			<param name="localName">The local name of the XML attribute.</param>
			<param name="value">The value of the XML attribute as a string.</param>
			<param name="ns">The namespace of the XML attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
			<summary>Writes an XML attribute where the namespace prefix is provided manually. </summary>
			<param name="localName">The local name of the XML attribute.</param>
			<param name="prefix">The namespace prefix to write.</param>
			<param name="value">The value of the XML attribute as a string.</param>
			<param name="ns">The namespace represented by the prefix.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementEncoded(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
			<summary>Writes an XML node object within the body of a named XML element.</summary>
			<param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
			<param name="node">The XML node to write, possibly a child XML element.</param>
			<param name="name">The local name of the parent XML element to write.</param>
			<param name="any">true to indicate that the node, if an XML element, adheres to an XML Schema any element declaration; otherwise, false.</param>
			<param name="ns">The namespace of the parent XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementLiteral(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
			<summary>Instructs an <see cref="T:System.Xml.XmlWriter"></see> object to write an <see cref="T:System.Xml.XmlNode"></see> object within the body of a named XML element.</summary>
			<param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
			<param name="node">The XML node to write, possibly a child XML element.</param>
			<param name="name">The local name of the parent XML element to write.</param>
			<param name="any">true to indicate that the node, if an XML element, adheres to an XML Schema any element declaration; otherwise, false.</param>
			<param name="ns">The namespace of the parent XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified qualified name in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified qualified name in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
			<param name="ns">The namespace of the XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified qualified name in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified qualified name in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
			<param name="ns">The namespace of the XML element.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String)">
			<summary>Writes an XML element with a specified value in its body. </summary>
			<param name="localName">The local name of the XML element to be written without namespace qualification.</param>
			<param name="value">The text value of the XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String)">
			<summary>Writes an XML element with a specified value in its body. </summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="ns">The namespace of the XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="ns">The namespace of the XML element.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[])">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String)">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[],System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[])">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="ns">The namespace of the XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String)">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="ns">The namespace of the XML element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="ns">The namespace of the XML element.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element with a specified value in its body.</summary>
			<param name="localName">The local name of the XML element.</param>
			<param name="value">The text value of the XML element.</param>
			<param name="ns">The namespace of the XML element.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String)">
			<summary>Writes an XML element whose body is empty. </summary>
			<param name="name">The local name of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String,System.String)">
			<summary>Writes an XML element whose body is empty.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement">
			<summary>Writes a &lt;closing&gt; element tag.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement(System.Object)">
			<summary>Writes a closing element tag.</summary>
			<param name="o">The object being serialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteId(System.Object)">
			<summary>Writes an id attribute that appears in a SOAP-encoded multiRef element. </summary>
			<param name="o">The object being serialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNamespaceDeclarations(System.Xml.Serialization.XmlSerializerNamespaces)">
			<summary>Writes namespace declaration attributes.</summary>
			<param name="xmlns">The XML namespaces to declare.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameEncoded(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element whose body contains a valid XML qualified name. <see cref="T:System.Xml.XmlWriter"></see> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="value">The XML qualified name to write in the body of the XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameLiteral(System.String,System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element whose body contains a valid XML qualified name. <see cref="T:System.Xml.XmlWriter"></see> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="value">The XML qualified name to write in the body of the XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncoded(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter"></see> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="value">The string to write in the body of the XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
			<summary>Writes a byte array as the body of an XML element. <see cref="T:System.Xml.XmlWriter"></see> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="value">The byte array to write in the body of the XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
			<summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter"></see> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="value">The string to write in the body of the XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
			<param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteral(System.String,System.String,System.String)">
			<summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter"></see> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="value">The string to write in the body of the XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.Byte[])">
			<summary>Writes a byte array as the body of an XML element. <see cref="T:System.Xml.XmlWriter"></see> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="value">The byte array to write in the body of the XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.String)">
			<summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter"></see> inserts a xsi:nil='true' attribute if the string's value is null.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="value">The string to write in the body of the XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String)">
			<summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
			<param name="name">The local name of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String,System.String)">
			<summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String)">
			<summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
			<param name="name">The local name of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String,System.String)">
			<summary>Writes an XML element with an xsi:nil='true' attribute. </summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object)">
			<summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object. </summary>
			<param name="n">The local name of the XML element to write.</param>
			<param name="o">The object being serialized either in the current XML element or a multiRef element that is referenced by the current element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type)">
			<summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object. </summary>
			<param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
			<param name="n">The local name of the XML element to write.</param>
			<param name="o">The object being serialized either in the current XML element or a multiRef element that referenced by the current element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean)">
			<summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object.</summary>
			<param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
			<param name="suppressReference">true to serialize the object directly into the XML element rather than make the element reference another element that contains the data; otherwise, false.</param>
			<param name="n">The local name of the XML element to write.</param>
			<param name="o">The object being serialized either in the current XML element or a multiRef element that is referenced by the current element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean,System.Boolean)">
			<summary>Writes a SOAP message XML element that can contain a reference to a multiRef XML element for a given object.</summary>
			<param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
			<param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
			<param name="suppressReference">true to serialize the object directly into the XML element rather than make the element reference another element that contains the data; otherwise, false.</param>
			<param name="n">The local name of the XML element to write.</param>
			<param name="o">The object being serialized either in the current XML element or a multiRef element that referenced by the current element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencedElements">
			<summary>Serializes objects into SOAP-encoded multiRef XML elements in a SOAP message. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object)">
			<summary>Writes a SOAP message XML element that contains a reference to a multiRef element for a given object. </summary>
			<param name="n">The local name of the referencing element being written.</param>
			<param name="o">The object being serialized.</param>
			<param name="ns">The namespace of the referencing element being written.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object,System.Boolean)">
			<summary>Writes a SOAP message XML element that contains a reference to a multiRef element for a given object.</summary>
			<param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
			<param name="n">The local name of the referencing element being written.</param>
			<param name="o">The object being serialized.</param>
			<param name="ns">The namespace of the referencing element being written.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteRpcResult(System.String,System.String)">
			<summary>Writes a SOAP 1.2 RPC result element with a specified qualified name in its body.</summary>
			<param name="name">The local name of the result body.</param>
			<param name="ns">The namespace of the result body.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean)">
			<summary>Writes an object that uses custom XML formatting as an XML element. </summary>
			<param name="isNullable">true to write an xsi:nil='true' attribute if the <see cref="T:System.Xml.Serialization.IXmlSerializable"></see> class object is null; otherwise, false.</param>
			<param name="name">The local name of the XML element to write.</param>
			<param name="ns">The namespace of the XML element to write.</param>
			<param name="serializable">An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable"></see> interface that uses custom XML formatting.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean,System.Boolean)">
			<summary>Instructs <see cref="T:System.Xml.XmlNode"></see> to write an object that uses custom XML formatting as an XML element. </summary>
			<param name="isNullable">true to write an xsi:nil='true' attribute if the <see cref="T:System.Xml.Serialization.IXmlSerializable"></see> object is null; otherwise, false.</param>
			<param name="name">The local name of the XML element to write.</param>
			<param name="wrapped">true to ignore writing the opening element tag; otherwise, false to write the opening element tag.</param>
			<param name="ns">The namespace of the XML element to write.</param>
			<param name="serializable">An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable"></see> interface that uses custom XML formatting.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartDocument">
			<summary>Writes the XML declaration if the writer is positioned at the start of an XML document. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String)">
			<summary>Writes an opening element tag, including any attributes. </summary>
			<param name="name">The local name of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String)">
			<summary>Writes an opening element tag, including any attributes. </summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Boolean)">
			<summary>Writes an opening element tag, including any attributes.</summary>
			<param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
			<param name="name">The local name of the XML element to write.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object)">
			<summary>Writes an opening element tag, including any attributes.</summary>
			<param name="name">The local name of the XML element to write.</param>
			<param name="o">The object being serialized as an XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean)">
			<summary>Writes an opening element tag, including any attributes.</summary>
			<param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
			<param name="name">The local name of the XML element to write.</param>
			<param name="o">The object being serialized as an XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean,System.Xml.Serialization.XmlSerializerNamespaces)">
			<summary>Writes an opening element tag, including any attributes. </summary>
			<param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
			<param name="xmlns">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> class that contains prefix and namespace pairs to be used in the generated XML.</param>
			<param name="name">The local name of the XML element to write.</param>
			<param name="o">The object being serialized as an XML element.</param>
			<param name="ns">The namespace of the XML element to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteTypedPrimitive(System.String,System.String,System.Object,System.Boolean)">
			<summary>Writes an XML element whose text body is a value of a simple XML Schema data type. </summary>
			<param name="name">The local name of the element to write.</param>
			<param name="o">The object to be serialized in the element body.</param>
			<param name="ns">The namespace of the element to write.</param>
			<param name="xsiType">true if the XML element explicitly specifies the text value's type using the xsi:type attribute; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.Byte[])">
			<summary>Writes a base-64 byte array.</summary>
			<param name="value">The byte array to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.String)">
			<summary>Writes a specified string.</summary>
			<param name="value">The string to write.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode)">
			<summary>Writes the specified <see cref="T:System.Xml.XmlNode"></see> as an XML attribute.</summary>
			<param name="node">An <see cref="T:System.Xml.XmlAttribute"></see> object.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode,System.Object)">
			<summary>Writes the specified <see cref="T:System.Xml.XmlNode"></see> object as an XML attribute.</summary>
			<param name="container">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> object (or null) used to generate a qualified name value for an arrayType attribute from the Web Services Description Language (WSDL) namespace ("http://schemas.xmlsoap.org/wsdl/").</param>
			<param name="node">An <see cref="T:System.Xml.XmlNode"></see> of <see cref="T:System.Xml.XmlAttribute"></see> type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXsiType(System.String,System.String)">
			<summary>Writes an xsi:type attribute for an XML element that is being serialized into a document. </summary>
			<param name="name">The local name of an XML Schema data type.</param>
			<param name="ns">The namespace of an XML Schema data type.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationWriter.EscapeName">
			<summary>Gets or sets a value that indicates whether the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)"></see> method is used to write valid XML.</summary>
			<returns>true if the <see cref="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)"></see> method returns an encoded name; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationWriter.Namespaces">
			<summary>Gets or sets a list of XML qualified name objects that contain the namespaces and prefixes used to produce qualified names in XML documents. </summary>
			<returns>An <see cref="T:System.Collections.ArrayList"></see> that contains the namespaces and prefix pairs.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializationWriter.Writer">
			<summary>Gets the <see cref="T:System.Xml.XmlWriter"></see> that is being used by the <see cref="T:System.Xml.Serialization.XmlSerializationWriter"></see>. </summary>
			<returns>The <see cref="T:System.Xml.XmlWriter"></see> used by the class instance.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializer">
			<summary>Serializes and deserializes objects into and from XML documents. The <see cref="T:System.Xml.Serialization.XmlSerializer"></see> enables you to control how objects are encoded into XML.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</summary>
			<param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can serialize. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
			<summary>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class using an object that maps one type to another.</summary>
			<param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> that maps one type to another. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Specifies the default namespace for all the XML elements.</summary>
			<param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can serialize. </param>
			<param name="defaultNamespace">The default namespace to use for all the XML elements. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into object of a specified type. If a property or field returns an array, the extraTypes parameter specifies objects that can be inserted into the array.</summary>
			<param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can serialize. </param>
			<param name="extraTypes">A <see cref="T:System.Type"></see> array of additional object types to serialize. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</summary>
			<param name="type">The type of the object to serialize. </param>
			<param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"></see>. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML documents, and deserialize an XML document into object of the specified type. It also specifies the class to use as the XML root element.</summary>
			<param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can serialize. </param>
			<param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> that represents the XML root element. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of type <see cref="T:System.Object"></see> into XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object"></see>. Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes. This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</summary>
			<param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can serialize. </param>
			<param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"></see> that extends or overrides the behavior of the class specified in the type parameter. </param>
			<param name="defaultNamespace">The default namespace of all XML elements in the XML document. </param>
			<param name="extraTypes">A <see cref="T:System.Type"></see> array of additional object types to serialize. </param>
			<param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> that defines the XML root element properties. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML document instances, and deserialize XML document instances into objects of the specified type. This overload allows you to supply other types that can be encountered during a serialization or deserialization operation, as well as a default namespace for all XML elements, the class to use as the XML root element, its location, and credentials required for access.</summary>
			<param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can serialize.</param>
			<param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"></see> that extends or overrides the behavior of the class specified in the type parameter.</param>
			<param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
			<param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence"></see> class that contains credentials required to access types.</param>
			<param name="location">The location of the types.</param>
			<param name="extraTypes">A <see cref="T:System.Type"></see> array of additional object types to serialize.</param>
			<param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> that defines the XML root element properties.</param>
		</member>
		<member name="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
			<summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> encounters an XML attribute of unknown type during deserialization.</summary>
		</member>
		<member name="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
			<summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> encounters an XML element of unknown type during deserialization.</summary>
		</member>
		<member name="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
			<summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> encounters an XML node of unknown type during deserialization.</summary>
		</member>
		<member name="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
			<summary>Occurs during deserialization of a SOAP-encoded XML stream, when the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> encounters a recognized type that is not used or is unreferenced.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
			<summary>Gets a value that indicates whether this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can deserialize a specified XML document.</summary>
			<returns>true if this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can deserialize the object that the <see cref="T:System.Xml.XmlReader"></see> points to; otherwise, false.</returns>
			<param name="xmlReader">An <see cref="T:System.Xml.XmlReader"></see> that points to the document to deserialize. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.CreateReader">
			<summary>Returns an object used to read the XML document to be serialized.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlSerializationReader"></see> used to read the XML document.</returns>
			<exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.CreateWriter">
			<summary>When overridden in a derived class, returns a writer used to serialize the object.</summary>
			<returns>An instance that implements the <see cref="T:System.Xml.Serialization.XmlSerializationWriter"></see> class.</returns>
			<exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
			<summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream"></see>.</summary>
			<returns>The <see cref="T:System.Object"></see> being deserialized.</returns>
			<param name="stream">The <see cref="T:System.IO.Stream"></see> that contains the XML document to deserialize. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
			<summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader"></see>.</summary>
			<returns>The <see cref="T:System.Object"></see> being deserialized.</returns>
			<param name="textReader">The <see cref="T:System.IO.TextReader"></see> that contains the XML document to deserialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
			<summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader"></see>.</summary>
			<returns>The <see cref="T:System.Object"></see> being deserialized.</returns>
			<param name="xmlReader">The <see cref="T:System.xml.XmlReader"></see> that contains the XML document to deserialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
			<summary>Deserializes the XML document contained by the specified <see cref="T:System.Xml.Serialization.XmlSerializationReader"></see>.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">The <see cref="T:System.Xml.Serialization.XmlSerializationReader"></see> that contains the XML document to deserialize. </param>
			<exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
			<summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader"></see> and encoding style.</summary>
			<returns>The deserialized object.</returns>
			<param name="encodingStyle">The encoding style of the serialized XML. </param>
			<param name="xmlReader">The <see cref="T:System.xml.XmlReader"></see> that contains the XML document to deserialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
			<summary>Deserializes an XML document contained by the specified <see cref="T:System.Xml.XmlReader"></see> and allows the overriding of events that occur during deserialization.</summary>
			<returns>The <see cref="T:System.Object"></see> being deserialized.</returns>
			<param name="events">An instance of the XmlDeserializationEvents class. </param>
			<param name="xmlReader">The <see cref="T:System.Xml.XmlReader"></see> that contains the document to deserialize.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
			<summary>Deserializes the object using the data contained by the specified <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<returns>The object being deserialized.</returns>
			<param name="encodingStyle">The encoding used.</param>
			<param name="events">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents"></see> class. </param>
			<param name="xmlReader">An instance of the <see cref="T:System.Xml.XmlReader"></see> class used to read the document.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])">
			<summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer"></see> objects created from an array of <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> objects.</summary>
			<returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer"></see> objects.</returns>
			<param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> that maps one type to another. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)">
			<summary>Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class created from mappings of one XML type to another.</summary>
			<returns>An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class.</returns>
			<param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence"></see> class that contains host and assembly data presented to the common language runtime policy system.</param>
			<param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlMapping"></see> objects used to map one type to another.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
			<summary>Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class from the specified mappings.</summary>
			<returns>An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class.</returns>
			<param name="type">The <see cref="T:System.Type"></see> of the deserialized object.</param>
			<param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlMapping"></see> objects.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
			<summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer"></see> objects created from an array of types.</summary>
			<returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer"></see> objects.</returns>
			<param name="types">An array of <see cref="T:System.Type"></see> objects. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])">
			<summary>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings.</summary>
			<returns>An <see cref="T:System.Reflection.Assembly"></see> object that contains serializers for the supplied types and mappings.</returns>
			<param name="types">A collection of types.</param>
			<param name="mappings">A collection of <see cref="T:System.Xml.Serialization.XmlMapping"></see> objects used to convert one type to another.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)">
			<summary>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings and compiler settings and options. </summary>
			<returns>An <see cref="T:System.Reflection.Assembly"></see> that contains special versions of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</returns>
			<param name="types">An array of type <see cref="T:System.Type"></see> that contains objects used to serialize and deserialize data.</param>
			<param name="mappings">An array of type <see cref="T:System.Xml.Serialization.XmlMapping"></see> that maps the XML data to the type data.</param>
			<param name="parameters">An instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters"></see> class that represents the parameters used to invoke a compiler.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
			<summary>Returns the name of the assembly that contains one or more versions of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> especially created to serialize or deserialize the specified type.</summary>
			<returns>The name of the assembly that contains an <see cref="T:System.Xml.Serialization.XmlSerializer"></see> for the type.</returns>
			<param name="type">The <see cref="T:System.Type"></see> you are deserializing.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
			<summary>Returns the name of the assembly that contains the serializer for the specified type in the specified namespace.</summary>
			<returns>The name of the assembly that contains specially built serializers.</returns>
			<param name="type">The <see cref="T:System.Type"></see> you are interested in.</param>
			<param name="defaultNamespace">The namespace of the type.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
			<summary>Serializes the specified <see cref="T:System.Object"></see> and writes the XML document to a file using the specified <see cref="T:System.Xml.Serialization.XmlSerializationWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.Serialization.XmlSerializationWriter"></see> used to write the XML document. </param>
			<param name="o">The <see cref="T:System.Object"></see> to serialize. </param>
			<exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
			<summary>Serializes the specified <see cref="T:System.Object"></see> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream"></see>.</summary>
			<param name="stream">The <see cref="T:System.IO.Stream"></see> used to write the XML document. </param>
			<param name="o">The <see cref="T:System.Object"></see> to serialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
			<summary>Serializes the specified <see cref="T:System.Object"></see> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="textWriter">The <see cref="T:System.IO.TextWriter"></see> used to write the XML document. </param>
			<param name="o">The <see cref="T:System.Object"></see> to serialize. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
			<summary>Serializes the specified <see cref="T:System.Object"></see> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="xmlWriter">The <see cref="T:System.xml.XmlWriter"></see> used to write the XML document. </param>
			<param name="o">The <see cref="T:System.Object"></see> to serialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
			<summary>Serializes the specified <see cref="T:System.Object"></see> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream"></see>that references the specified namespaces.</summary>
			<param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> referenced by the object. </param>
			<param name="stream">The <see cref="T:System.IO.Stream"></see> used to write the XML document. </param>
			<param name="o">The <see cref="T:System.Object"></see> to serialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
			<summary>Serializes the specified <see cref="T:System.Object"></see> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter"></see> and references the specified namespaces.</summary>
			<param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> that contains namespaces for the generated XML document. </param>
			<param name="textWriter">The <see cref="T:System.IO.TextWriter"></see> used to write the XML document. </param>
			<param name="o">The <see cref="T:System.Object"></see> to serialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
			<summary>Serializes the specified <see cref="T:System.Object"></see> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter"></see> and references the specified namespaces.</summary>
			<param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> referenced by the object. </param>
			<param name="xmlWriter">The <see cref="T:System.xml.XmlWriter"></see> used to write the XML document. </param>
			<param name="o">The <see cref="T:System.Object"></see> to serialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
			<summary>Serializes the specified object and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter"></see> and references the specified namespaces and encoding style.</summary>
			<param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> referenced by the object. </param>
			<param name="encodingStyle">The encoding style of the serialized XML. </param>
			<param name="xmlWriter">The <see cref="T:System.xml.XmlWriter"></see> used to write the XML document. </param>
			<param name="o">The object to serialize. </param>
			<exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException"></see> property. </exception>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
			<summary>Serializes the specified <see cref="T:System.Object"></see> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter"></see>, XML namespaces, and encoding. </summary>
			<param name="namespaces">An instance of the XmlSerializaerNamespaces that contains namespaces and prefixes to use.</param>
			<param name="encodingStyle">The encoding used in the document.</param>
			<param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter"></see> used to write the XML document.</param>
			<param name="o">The object to serialize.</param>
			<param name="id">For SOAP encoded messages, the base used to generate id attributes. </param>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute">
			<summary>Applied to a Web service client proxy, enables you to specify an assembly that contains custom-made serializers. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute"></see> class with the specified assembly name.</summary>
			<param name="assemblyName">The simple, unencrypted name of the assembly. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute"></see> class with the specified assembly name and location of the assembly.</summary>
			<param name="codeBase">A string that is the URL location of the assembly.</param>
			<param name="assemblyName">The simple, unencrypted name of the assembly. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerAssemblyAttribute.AssemblyName">
			<summary>Gets or sets the name of the assembly that contains serializers for a specific set of types.</summary>
			<returns>The simple, unencrypted name of the assembly. </returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerAssemblyAttribute.CodeBase">
			<summary>Gets or sets the location of the assembly that contains the serializers.</summary>
			<returns>A location, such as a path or URI, that points to the assembly.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializerFactory">
			<summary>Creates typed versions of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> for more efficient serialization.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type)">
			<summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory"></see> class that is used to serialize the specified type.</summary>
			<returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that is specifically created to serialize the specified type.</returns>
			<param name="type">The <see cref="T:System.Type"></see> to serialize.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Xml.Serialization.XmlTypeMapping)">
			<summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory"></see> class using an object that maps one type to another.</summary>
			<returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that is specifically created to serialize the mapped type.</returns>
			<param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping"></see> that maps one type to another.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.String)">
			<summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory"></see> class that is used to serialize the specified type and namespace.</summary>
			<returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that is specifically created to serialize the specified type.</returns>
			<param name="type">The <see cref="T:System.Type"></see> to serialize.</param>
			<param name="defaultNamespace">The default namespace to use for all the XML elements. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Type[])">
			<summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory"></see> class that is used to serialize the specified type. If a property or field returns an array, the extraTypes parameter specifies objects that can be inserted into the array.</summary>
			<returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</returns>
			<param name="type">The <see cref="T:System.Type"></see> to serialize.</param>
			<param name="extraTypes">A <see cref="T:System.Type"></see> array of additional object types to serialize.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
			<summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML documents, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</summary>
			<returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</returns>
			<param name="type">The <see cref="T:System.Type"></see> to serialize.</param>
			<param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"></see> that contains fields that override the default serialization behavior.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlRootAttribute)">
			<summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML documents, and vice versa. Specifies the object that represents the XML root element.</summary>
			<returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</returns>
			<param name="type">The <see cref="T:System.Type"></see> to serialize.</param>
			<param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> that represents the XML root element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
			<summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
			<returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</returns>
			<param name="type">The <see cref="T:System.Type"></see> to serialize.</param>
			<param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"></see> that contains fields that override the default serialization behavior.</param>
			<param name="defaultNamespace">The default namespace of all XML elements in the XML document. </param>
			<param name="extraTypes">A <see cref="T:System.Type"></see> array of additional object types to serialize.</param>
			<param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> that represents the XML root element.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
			<summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
			<returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</returns>
			<param name="type">The <see cref="T:System.Type"></see> of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer"></see> can serialize.</param>
			<param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"></see> that extends or overrides the behavior of the class specified in the type parameter.</param>
			<param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
			<param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence"></see> class that contains credentials needed to access types.</param>
			<param name="location">The path that specifies the location of the types.</param>
			<param name="extraTypes">A <see cref="T:System.Type"></see> array of additional object types to serialize.</param>
			<param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute"></see> that defines the XML root element properties.</param>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializerImplementation">
			<summary>Defines the reader, writer, and methods for pre-generated, typed serializers.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerImplementation.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerImplementation"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerImplementation.CanSerialize(System.Type)">
			<summary>Gets a value that determines whether a type can be serialized.</summary>
			<returns>true if the type can be serialized; otherwise, false.</returns>
			<param name="type">The <see cref="T:System.Type"></see> to be serialized.</param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerImplementation.GetSerializer(System.Type)">
			<summary>Returns a serializer for the specified type.</summary>
			<returns>An instance of a type derived from the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> class. </returns>
			<param name="type">The <see cref="T:System.Type"></see> to be serialized.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerImplementation.Reader">
			<summary>Gets the XML reader object that is used by the serializer.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlSerializationReader"></see> that is used to read an XML document or data stream.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerImplementation.ReadMethods">
			<summary>Gets the collection of methods that is used to read a data stream.</summary>
			<returns>A <see cref="T:System.Collections.Hashtable"></see> that contains the methods.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerImplementation.TypedSerializers">
			<summary>Gets the collection of typed serializers that is found in the assembly.</summary>
			<returns>A <see cref="T:System.Collections.Hashtable"></see> that contains the typed serializers.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerImplementation.WriteMethods">
			<summary>Get the collection of methods that is used to write to a data stream.</summary>
			<returns>A <see cref="T:System.Collections.Hashtable"></see> that contains the methods.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerImplementation.Writer">
			<summary>Gets the XML writer object for the serializer.</summary>
			<returns>An <see cref="T:System.Xml.Serialization.XmlSerializationWriter"></see> that is used to write to an XML data stream or document.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
			<summary>Contains the XML namespaces and prefixes that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> uses to generate qualified names in an XML-document instance.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> class.</summary>
			<param name="namespaces">An array of <see cref="T:System.Xml.XmlQualifiedName"></see> objects. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> class, using the specified instance of XmlSerializerNamespaces containing the collection of prefix and namespace pairs.</summary>
			<param name="namespaces">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see>containing the namespace and prefix pairs. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
			<summary>Adds a prefix and namespace pair to an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> object.</summary>
			<param name="prefix">The prefix associated with an XML namespace. </param>
			<param name="ns">An XML namespace. </param>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
			<summary>Gets the array of prefix and namespace pairs in an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"></see> object.</summary>
			<returns>An array of <see cref="T:System.Xml.XmlQualifiedName"></see> objects that are used as qualified names in an XML document.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
			<summary>Gets the number of prefix and namespace pairs in the collection.</summary>
			<returns>The number of prefix and namespace pairs in the collection.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlSerializerVersionAttribute">
			<summary>Signifies that the code was generated by the serialization infrastructure and can be reused for increased performance, when this attribute is applied to an assembly.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute"></see> class for the specified type.</summary>
			<param name="type">The type that is being serialized.</param>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Namespace">
			<summary>Gets or sets the common language runtime (CLR) namespace of the assembly.</summary>
			<returns>A <see cref="T:System.String"></see> containing the common language runtime (CLR) namespace of the assembly.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.ParentAssemblyId">
			<summary>Gets or sets the identity of the parent assembly.</summary>
			<returns>The version of the parent assembly.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Type">
			<summary>Gets or sets the type that the serializer operates on.</summary>
			<returns>The <see cref="T:System.Type"></see> to be serialized.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Version">
			<summary>Gets or sets the assembly's version number.</summary>
			<returns>The version of the assembly.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlTextAttribute">
			<summary>Indicates to the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> that the member must be treated as XML text when the class that contains it is serialized or deserialized.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute"></see> class.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the member to be serialized. </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
			<summary>Gets or sets the XML Schema definition language (XSD) data type of the text generated by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
			<returns>An XML Schema (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: Datatypes".</returns>
			<exception cref="T:System.InvalidOperationException">The XML Schema data type you have specified is invalid for the property and cannot be converted to the member type. </exception>
			<exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type. </exception>
		</member>
		<member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
			<summary>Gets or sets the type of the member.</summary>
			<returns>The <see cref="T:System.Type"></see> of the member.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlTypeAttribute">
			<summary>Controls the XML schema that is generated when the attribute target is serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute"></see> class and specifies the name of the XML type.</summary>
			<param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
		</member>
		<member name="P:System.Xml.Serialization.XmlTypeAttribute.AnonymousType">
			<summary>Gets or sets a value that determines whether the resulting schema type is an XSD anonymous type.</summary>
			<returns>true, if the resulting schema type is an XSD anonymous type; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
			<summary>Gets or sets a value that indicates whether to include the type in XML schema documents.</summary>
			<returns>true to include the type in XML schema documents; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
			<summary>Gets or sets the namespace of the XML type.</summary>
			<returns>The namespace of the XML type.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
			<summary>Gets or sets the name of the XML type.</summary>
			<returns>The name of the XML type.</returns>
		</member>
		<member name="T:System.Xml.Serialization.XmlTypeMapping">
			<summary>Contains a mapping of one type to another.</summary>
		</member>
		<member name="P:System.Xml.Serialization.XmlTypeMapping.TypeFullName">
			<summary>The fully qualified type name that includes the namespace (or namespaces) and type.</summary>
			<returns>The fully qualified type name.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlTypeMapping.TypeName">
			<summary>Gets the type name of the mapped object.</summary>
			<returns>The type name of the mapped object.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeName">
			<summary>Gets the XML element name of the mapped object.</summary>
			<returns>The XML element name of the mapped object. The default is the class name of the object.</returns>
		</member>
		<member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeNamespace">
			<summary>Gets the XML namespace of the mapped object.</summary>
			<returns>The XML namespace of the mapped object. The default is an empty string ("").</returns>
		</member>
		<member name="N:System.Xml.Serialization.Advanced">
			<summary>The System.Xml.Serialization.Advanced namespace contains classes that allow you to customize the code generated from a Web Services Description Language (WSDL) document.</summary>
		</member>
		<member name="T:System.Xml.Serialization.Advanced.SchemaImporterExtension">
			<summary>Allows you to customize the code generated from a Web Services Description Language (WSDL) document when using automated query tools.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement(System.Xml.Schema.XmlSchemaAny,System.Boolean,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
			<summary>Handles the importation of the &lt;xsd:any&gt; elements in the schema.</summary>
			<returns>The name of the CLR type that the element maps to. </returns>
			<param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that represents the current namespace for the element.</param>
			<param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> that is the importer being used.</param>
			<param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> to which you can add CodeDOM structures to generate alternative code for the XSD. </param>
			<param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> that is the CodeDOM provider used to generate the new code. </param>
			<param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> for the setting options on the code compiler.</param>
			<param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see> that contains the collection of schemas found in the XSD.</param>
			<param name="any">An <see cref="T:System.Xml.Schema.XmlSchemaAny"></see> that represents the xsd:any element found in the XML Schema Document (XSD).</param>
			<param name="mixed">A <see cref="T:System.Boolean"></see> that indicates whether the XSD complex attribute has been set to "mixed". true, if the attribute has been set to mixed, otherwise false. </param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue(System.String,System.String)">
			<summary>Allows you to specify the default value for the XSD type being imported.</summary>
			<returns>A <see cref="T:System.CodeDom.CodeExpression"></see> setting the new default value.</returns>
			<param name="type">The XSD type name.</param>
			<param name="value">The value found in the original XSD.</param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
			<summary>Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.</summary>
			<returns>The name of the CLR type that this maps to.</returns>
			<param name="type">An <see cref="T:System.Xml.Schema.XmlSchemaType"></see> that represents the XSD type.</param>
			<param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> that is the importer being used.</param>
			<param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that represents schema information, such as the line number of the XML element.</param>
			<param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
			<param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> that is used to generate the new code.</param>
			<param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that represents the current namespace for the element.</param>
			<param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see> that contains the collection of schemas in the document.</param>
			<param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> for the setting options on the code compiler.</param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
			<summary>Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.</summary>
			<returns>The name of the CLR type that this maps to.</returns>
			<param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that represents the current namespace for the element.</param>
			<param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> that is the importer being used.</param>
			<param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that represents schema information, such as the line number of the XML element.</param>
			<param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
			<param name="name">The name of the element.</param>
			<param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> for the setting options on the code compiler.</param>
			<param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see> that contains the collection of schemas in the document.</param>
			<param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> that is used to generate the new code.</param>
			<param name="ns">The namespace of the element.</param>
		</member>
		<member name="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection">
			<summary>Represents a collection of <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> objects.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
			<summary>Adds the specified importer extension to the collection.</summary>
			<returns>The index of the added extension.</returns>
			<param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"></see> to add.</param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.String,System.Type)">
			<summary>Adds the specified importer extension to the collection. The name parameter allows you to supply a custom name for the extension.</summary>
			<returns>The index of the newly added item.</returns>
			<param name="type">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"></see> to add.</param>
			<param name="name">A custom name for the extension.</param>
			<exception cref="T:System.ArgumentException">The value of type does not inherit from <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"></see>.</exception>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Clear">
			<summary>Clears the collection of importer extensions.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Contains(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
			<summary>Gets a value that indicates whether the specified importer extension exists in the collection.</summary>
			<returns>true if the extension is found; otherwise, false.</returns>
			<param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"></see> to search for.</param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.CopyTo(System.Xml.Serialization.Advanced.SchemaImporterExtension[],System.Int32)">
			<summary>Copies all the elements of the current <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"></see> to the specified array of <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> objects at the specified index. </summary>
			<param name="array">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> to copy the current collection to.</param>
			<param name="index">The zero-based index at which the collection is added.</param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.IndexOf(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
			<summary>Searches for the specified item and returns the zero-based index of the first occurrence within the collection.</summary>
			<returns>The index of the found item.</returns>
			<param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> to search for.</param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Insert(System.Int32,System.Xml.Serialization.Advanced.SchemaImporterExtension)">
			<summary>Inserts the specified <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> into the collection at the specified index.</summary>
			<param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> to insert.</param>
			<param name="index">The zero-base index at which the extension should be inserted.</param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Remove(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
			<summary>Removes the specified <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> from the collection.</summary>
			<param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> to remove. </param>
		</member>
		<member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Remove(System.String)">
			<summary>Removes the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see>, specified by name, from the collection.</summary>
			<param name="name">The name of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"></see> to remove. The name is set using the <see cref="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.String,System.Type)"></see> method.</param>
		</member>
		<member name="P:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Item(System.Int32)">
			<summary>Gets the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"></see> at the specified index.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"></see> at the specified index.</returns>
			<param name="index">The index of the item to find.</param>
		</member>
		<member name="N:System.Xml.Serialization.Configuration">
			<summary>The <see cref="N:System.Xml.Serialization.Configuration"></see> namespace contains classes used to read the values found in application configuration files under the system.xml.serialization section. </summary>
		</member>
		<member name="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection">
			<summary>Handles configuration settings for XML serialization of <see cref="T:System.DateTime"></see> instances.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.DateTimeSerializationSection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.DateTimeSerializationSection.Mode">
			<summary>Gets or sets a value that determines the serialization format.</summary>
			<returns>One of the <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode"></see> values.</returns>
		</member>
		<member name="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode">
			<summary>Determines XML serialization format of <see cref="T:System.DateTime"></see> objects.</summary>
		</member>
		<member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Default">
			<summary>Same as Roundtrip.</summary>
		</member>
		<member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Local">
			<summary>The serializer formats all <see cref="T:System.DateTime"></see> objects as local time. This is for version 1.0 and 1.1 compatibility.</summary>
		</member>
		<member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Roundtrip">
			<summary>The serializer examines individual <see cref="T:System.DateTime"></see>  instances to determine the serialization format: UTC, local, or unspecified.</summary>
		</member>
		<member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement">
			<summary>Handles the configuration for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> class. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"></see> class and specifies the name and type of the extension.</summary>
			<param name="type">The type of the new extension, specified as a string.</param>
			<param name="name">The name of the new extension. The name must be unique.</param>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor(System.String,System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"></see> class using the specified name and type.</summary>
			<param name="type">The <see cref="T:System.Type"></see> of the new extension.</param>
			<param name="name">The name of the new extension. The name must be unique.</param>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.Name">
			<summary>Gets or sets the name of the extension.</summary>
			<returns>The name of the extension.</returns>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.Type">
			<summary>Gets or sets the type of the extension.</summary>
			<returns>A type of the extension.</returns>
		</member>
		<member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection">
			<summary>Handles the XML elements used to configure the operation of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see>. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Add(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
			<summary>Adds an item to the end of the collection.</summary>
			<param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"></see> to add to the collection.</param>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Clear">
			<summary>Removes all items from the collection.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.IndexOf(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
			<summary>Returns the zero-based index of the first element in the collection with the specified value.</summary>
			<returns>The index of the found element.</returns>
			<param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"></see> to find.</param>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Remove(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
			<summary>Removes the first occurrence of a specific item from the collection.</summary>
			<param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"></see> to remove.</param>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Remove(System.String)">
			<summary>Removes the item with the specified name from the collection.</summary>
			<param name="name">The name of the item to remove.</param>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.RemoveAt(System.Int32)">
			<summary>Removes the item at the specified index from the collection.</summary>
			<param name="index">The index of the object to remove.</param>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Item(System.Int32)">
			<summary>Gets or sets the object that represents the XML element at the specified index.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"></see> at the specified index.</returns>
			<param name="index">The zero-based index of the XML element to get or set.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or- index is equal to or greater than Countms-help://MS.NETFramework.v20.en/cpref/html/P_System_Collections_ArrayList_Count.htm.</exception>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Item(System.String)">
			<summary>Gets or sets the item with the specified name.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"></see> with the specified name.</returns>
			<param name="name">The name of the item to get or set.</param>
		</member>
		<member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection">
			<summary>Handles the configuration for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> class. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection.SchemaImporterExtensions">
			<summary>Gets the object that represents the collection of extensions.</summary>
			<returns>A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"></see> that contains the objects that represent configuration elements.</returns>
		</member>
		<member name="T:System.Xml.Serialization.Configuration.SerializationSectionGroup">
			<summary>Handles the XML elements used to configure XML serialization.</summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.SerializationSectionGroup.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SerializationSectionGroup"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.DateTimeSerialization">
			<summary>Gets the object that represents the <see cref="T:System.DateTime"></see> serialization configuration element.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection"></see> object that represents the configuration element.</returns>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.SchemaImporterExtensions">
			<summary>Gets the object that represents the section that contains configuration elements for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see>.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection"></see> that represents the schemaImporterExtenstion element in the configuration file.</returns>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.XmlSerializer">
			<summary>Gets the object that represents the configuration group for the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</summary>
			<returns>The <see cref="T:System.Xml.Serialization.Configuration.XmlSerializerSection"></see> that represents the <see cref="T:System.Xml.Serialization.XmlSerializer"></see>.</returns>
		</member>
		<member name="T:System.Xml.Serialization.Configuration.XmlSerializerSection">
			<summary>Handles the XML elements used to configure XML serialization. </summary>
		</member>
		<member name="M:System.Xml.Serialization.Configuration.XmlSerializerSection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.XmlSerializerSection"></see> class. </summary>
		</member>
		<member name="P:System.Xml.Serialization.Configuration.XmlSerializerSection.CheckDeserializeAdvances">
			<summary>Gets or sets a value that determines whether an additional check of progress of the <see cref="T:System.Xml.Serialization.XmlSerializer"></see> is done.</summary>
			<returns>true if the check is made; otherwise, false. The default is true.</returns>
		</member>
		<member name="N:System.Xml.XPath">
			<summary>The <see cref="N:System.Xml.XPath"></see> namespace contains the classes that define a cursor model for navigating and editing XML information items as instances of the XQuery 1.0 and XPath 2.0 Data Model.</summary>
		</member>
		<member name="T:System.Xml.XPath.IXPathNavigable">
			<summary>Provides an accessor to the <see cref="T:System.Xml.XPath.XPathNavigator"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
			<summary>Returns a new <see cref="T:System.Xml.XPath.XPathNavigator"></see> object. </summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object.</returns>
		</member>
		<member name="T:System.Xml.XPath.XmlCaseOrder">
			<summary>Specifies the sort order for uppercase and lowercase letters.</summary>
		</member>
		<member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
			<summary>Lowercase letters are sorted before uppercase letters.</summary>
		</member>
		<member name="F:System.Xml.XPath.XmlCaseOrder.None">
			<summary>Ignore the case.</summary>
		</member>
		<member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
			<summary>Uppercase letters are sorted before lowercase letters.</summary>
		</member>
		<member name="T:System.Xml.XPath.XmlDataType">
			<summary>Specifies the data type used to determine sort order.</summary>
		</member>
		<member name="F:System.Xml.XPath.XmlDataType.Number">
			<summary>Values are sorted numerically.</summary>
		</member>
		<member name="F:System.Xml.XPath.XmlDataType.Text">
			<summary>Values are sorted alphabetically.</summary>
		</member>
		<member name="T:System.Xml.XPath.XmlSortOrder">
			<summary>Specifies the sort order.</summary>
		</member>
		<member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
			<summary>Nodes are sorted in ascending order. For example, if the numbers 1,2,3, and 4 are sorted in ascending order, they appear as 1,2,3,4.</summary>
		</member>
		<member name="F:System.Xml.XPath.XmlSortOrder.Descending">
			<summary>Nodes are sorted in descending order. For example, if the numbers 1,2,3, and 4 are sorted in descending order, they appear as, 4,3,2,1. </summary>
		</member>
		<member name="T:System.Xml.XPath.XPathDocument">
			<summary>Provides a fast, read-only, in-memory representation of an XML document using the XPath data model.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.Stream)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument"></see> class from the XML data in the specified <see cref="T:System.IO.Stream"></see> object.</summary>
			<param name="stream">The <see cref="T:System.IO.Stream"></see> object that contains the XML data.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.IO.Stream"></see> object passed as a parameter is null.</exception>
			<exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument"></see> remains empty. </exception>
		</member>
		<member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument"></see> class from the XML data in the specified file.</summary>
			<param name="uri">The path of the file that contains the XML data.</param>
			<exception cref="T:System.ArgumentNullException">The file path parameter is null.</exception>
			<exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument"></see> remains empty. </exception>
		</member>
		<member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.TextReader)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument"></see> class from the XML data that is contained in the specified <see cref="T:System.IO.TextReader"></see> object.</summary>
			<param name="textReader">The <see cref="T:System.IO.TextReader"></see> object that contains the XML data.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.IO.TextReader"></see> object passed as a parameter is null.</exception>
			<exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument"></see> remains empty. </exception>
		</member>
		<member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument"></see> class from the XML data that is contained in the specified <see cref="T:System.Xml.XmlReader"></see> object.</summary>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> object that contains the XML data. </param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader"></see> object passed as a parameter is null.</exception>
			<exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument"></see> remains empty. </exception>
		</member>
		<member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String,System.Xml.XmlSpace)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument"></see> class from the XML data in the file specified with the white space handling specified.</summary>
			<param name="space">An <see cref="T:System.Xml.XmlSpace"></see> object.</param>
			<param name="uri">The path of the file that contains the XML data.</param>
			<exception cref="T:System.ArgumentNullException">The file path parameter or <see cref="T:System.Xml.XmlSpace"></see> object parameter is null.</exception>
			<exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument"></see> remains empty. </exception>
		</member>
		<member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader,System.Xml.XmlSpace)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument"></see> class from the XML data that is contained in the specified <see cref="T:System.Xml.XmlReader"></see> object with the specified white space handling.</summary>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> object that contains the XML data.</param>
			<param name="space">An <see cref="T:System.Xml.XmlSpace"></see> object.</param>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader"></see> object parameter or <see cref="T:System.Xml.XmlSpace"></see> object parameter is null.</exception>
			<exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument"></see> remains empty. </exception>
		</member>
		<member name="M:System.Xml.XPath.XPathDocument.CreateNavigator">
			<summary>Initializes a read-only <see cref="T:System.Xml.XPath.XPathNavigator"></see> object for navigating through nodes in this <see cref="T:System.Xml.XPath.XPathDocument"></see>.</summary>
			<returns>A read-only <see cref="T:System.Xml.XPath.XPathNavigator"></see> object.</returns>
		</member>
		<member name="T:System.Xml.XPath.XPathException">
			<summary>Provides the exception thrown when an error occurs while processing an XPath expression. </summary>
		</member>
		<member name="M:System.Xml.XPath.XPathException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException"></see> class with the specified exception message.</summary>
			<param name="message">The description of the error condition.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Uses the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects to initialize a new instance of the <see cref="T:System.Xml.XPath.XPathException"></see> class.</summary>
			<param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object. </param>
			<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains all the properties of an <see cref="T:System.Xml.XPath.XPathException"></see>. </param>
		</member>
		<member name="M:System.Xml.XPath.XPathException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException"></see> class using the specified exception message and <see cref="T:System.Exception"></see> object.</summary>
			<param name="message">The description of the error condition. </param>
			<param name="innerException">The <see cref="T:System.Exception"></see> that threw the <see cref="T:System.Xml.XPath.XPathException"></see>, if any. This value can be null. </param>
		</member>
		<member name="M:System.Xml.XPath.XPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Streams all the <see cref="T:System.Xml.XPath.XPathException"></see> properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> class for the specified <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
			<param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object.</param>
			<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object.</param>
		</member>
		<member name="P:System.Xml.XPath.XPathException.Message">
			<summary>Gets the description of the error condition for this exception.</summary>
			<returns>The string description of the error condition for this exception.</returns>
		</member>
		<member name="T:System.Xml.XPath.XPathExpression">
			<summary>Provides a typed class that represents a compiled XPath expression.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
			<summary>When overridden in a derived class, sorts the nodes selected by the XPath expression according to the specified <see cref="T:System.Collections.IComparer"></see> object.</summary>
			<param name="expr">An object representing the sort key. This can be the string value of the node or an <see cref="T:System.Xml.XPath.XPathExpression"></see> object with a compiled XPath expression.</param>
			<param name="comparer">An <see cref="T:System.Collections.IComparer"></see> object that provides the specific data type comparisons for comparing two objects for equivalence. </param>
			<exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XPath.XPathExpression"></see> or sort key includes a prefix and either an <see cref="T:System.Xml.XmlNamespaceManager"></see> is not provided, or the prefix cannot be found in the supplied <see cref="T:System.Xml.XmlNamespaceManager"></see>.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
			<summary>When overridden in a derived class, sorts the nodes selected by the XPath expression according to the supplied parameters.</summary>
			<param name="order">An <see cref="T:System.Xml.XPath.XmlSortOrder"></see> value indicating the sort order. </param>
			<param name="caseOrder">An <see cref="T:System.Xml.XPath.XmlCaseOrder"></see> value indicating how to sort uppercase and lowercase letters.</param>
			<param name="dataType">An <see cref="T:System.Xml.XPath.XmlDataType"></see> value indicating the sort order for the data type. </param>
			<param name="lang">The language to use for comparison. Uses the <see cref="T:System.Globalization.CultureInfo"></see> class that can be passed to the <see cref="Overload:System.String.Compare"></see> method for the language types, for example, "us-en" for U.S. English. If an empty string is specified, the system environment is used to determine the <see cref="T:System.Globalization.CultureInfo"></see>. </param>
			<param name="expr">An object representing the sort key. This can be the string value of the node or an <see cref="T:System.Xml.XPath.XPathExpression"></see> object with a compiled XPath expression. </param>
			<exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XPath.XPathExpression"></see> or sort key includes a prefix and either an <see cref="T:System.Xml.XmlNamespaceManager"></see> is not provided, or the prefix cannot be found in the supplied <see cref="T:System.Xml.XmlNamespaceManager"></see>. </exception>
		</member>
		<member name="M:System.Xml.XPath.XPathExpression.Clone">
			<summary>When overridden in a derived class, returns a clone of this <see cref="T:System.Xml.XPath.XPathExpression"></see>.</summary>
			<returns>A new <see cref="T:System.Xml.XPath.XPathExpression"></see> object.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
			<summary>Compiles the XPath expression specified and returns an <see cref="T:System.Xml.XPath.XPathExpression"></see> object representing the XPath expression.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathExpression"></see> object.</returns>
			<param name="xpath">An XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
			<exception cref="T:System.ArgumentException">The XPath expression parameter is not a valid XPath expression.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
			<summary>Compiles the specified XPath expression, with the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified for namespace resolution, and returns an <see cref="T:System.Xml.XPath.XPathExpression"></see> object that represents the XPath expression.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathExpression"></see> object.</returns>
			<param name="nsResolver">An object that implements the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> interface for namespace resolution.</param>
			<param name="xpath">An XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
			<exception cref="T:System.ArgumentException">The XPath expression parameter is not a valid XPath expression.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
			<summary>When overridden in a derived class, specifies the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object to use for namespace resolution.</summary>
			<param name="nsResolver">An object that implements the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> interface to use for namespace resolution.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object parameter is not derived from <see cref="T:System.Xml.IXmlNamespaceResolver"></see>. </exception>
		</member>
		<member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
			<summary>When overridden in a derived class, specifies the <see cref="T:System.Xml.XmlNamespaceManager"></see> object to use for namespace resolution.</summary>
			<param name="nsManager">An <see cref="T:System.Xml.XmlNamespaceManager"></see> object to use for namespace resolution. </param>
			<exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XmlNamespaceManager"></see> object parameter is not derived from the <see cref="T:System.Xml.XmlNamespaceManager"></see> class. </exception>
		</member>
		<member name="P:System.Xml.XPath.XPathExpression.Expression">
			<summary>When overridden in a derived class, gets a string representation of the <see cref="T:System.Xml.XPath.XPathExpression"></see>.</summary>
			<returns>A string representation of the <see cref="T:System.Xml.XPath.XPathExpression"></see>.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathExpression.ReturnType">
			<summary>When overridden in a derived class, gets the result type of the XPath expression.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathResultType"></see> value representing the result type of the XPath expression.</returns>
		</member>
		<member name="T:System.Xml.XPath.XPathItem">
			<summary>Represents an item in the XQuery 1.0 and XPath 2.0 Data Model.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathItem.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathItem"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
			<summary>Returns the item's value as the specified type.</summary>
			<returns>The value of the item as the type requested.</returns>
			<param name="returnType">The type to return the item value as.</param>
			<exception cref="T:System.FormatException">The item's value is not in the correct format for the target type.</exception>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
			<summary>When overridden in a derived class, returns the item's value as the type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified to resolve namespace prefixes.</summary>
			<returns>The value of the item as the type requested.</returns>
			<param name="returnType">The type to return the item's value as.</param>
			<param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used to resolve namespace prefixes.</param>
			<exception cref="T:System.FormatException">The item's value is not in the correct format for the target type.</exception>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.IsNode">
			<summary>When overridden in a derived class, gets a value indicating whether the item represents an XPath node or an atomic value.</summary>
			<returns>true if the item represents an XPath node; false if the item represents an atomic value.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.TypedValue">
			<summary>When overridden in a derived class, gets the current item as a boxed object of the most appropriate Microsoft .NET Framework version 2.0 type according to its schema type.</summary>
			<returns>The current item as a boxed object of the most appropriate .NET Framework type.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.Value">
			<summary>When overridden in a derived class, gets the string value of the item.</summary>
			<returns>The string value of the item.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
			<summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.Boolean"></see>.</summary>
			<returns>The item's value as a <see cref="T:System.Boolean"></see>.</returns>
			<exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Boolean"></see> type.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean"></see> is not valid.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
			<summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.DateTime"></see>.</summary>
			<returns>The item's value as a <see cref="T:System.DateTime"></see>.</returns>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime"></see> is not valid.</exception>
			<exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.DateTime"></see> type.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
			<summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.Double"></see>.</summary>
			<returns>The item's value as a <see cref="T:System.Double"></see>.</returns>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double"></see> is not valid.</exception>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Double"></see> type.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
			<summary>When overridden in a derived class, gets the item's value as an <see cref="T:System.Int32"></see>.</summary>
			<returns>The item's value as an <see cref="T:System.Int32"></see>.</returns>
			<exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Int32"></see> type.</exception>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32"></see> is not valid.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
			<summary>When overridden in a derived class, gets the item's value as an <see cref="T:System.Int64"></see>.</summary>
			<returns>The item's value as an <see cref="T:System.Int64"></see>.</returns>
			<exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Int64"></see> type.</exception>
			<exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64"></see> is not valid.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.ValueType">
			<summary>When overridden in a derived class, gets the Microsoft .NET Framework version 2.0 type of the item.</summary>
			<returns>The .NET Framework type of the item. The default value is <see cref="T:System.String"></see>.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathItem.XmlType">
			<summary>When overridden in a derived class, gets the <see cref="T:System.Xml.Schema.XmlSchemaType"></see> for the item.</summary>
			<returns>The <see cref="T:System.Xml.Schema.XmlSchemaType"></see> for the item.</returns>
		</member>
		<member name="T:System.Xml.XPath.XPathNamespaceScope">
			<summary>Defines the namespace scope.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNamespaceScope.All">
			<summary>Returns all namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
			<summary>Returns all namespaces defined in the scope of the current node, excluding the xmlns:xml namespace. The xmlns:xml namespace is always declared implicitly. The order of the namespaces returned is not defined.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
			<summary>Returns all namespaces that are defined locally at the current node. </summary>
		</member>
		<member name="T:System.Xml.XPath.XPathNavigator">
			<summary>Provides a cursor model for navigating and editing XML data.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
			<summary>Returns an <see cref="T:System.Xml.XmlWriter"></see> object used to create a new child node at the end of the list of child nodes of the current node.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object used to create a new child node at the end of the list of child nodes of the current node.</returns>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on is not the root node or an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
			<summary>Creates a new child node at the end of the list of child nodes of the current node using the XML data string specified.</summary>
			<param name="newChild">The XML data string for the new child node.</param>
			<exception cref="T:System.ArgumentNullException">The XML data string parameter is null.</exception>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on is not the root node or an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.Xml.XmlException">The XML data string parameter is not well-formed.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
			<summary>Creates a new child node at the end of the list of child nodes of the current node using the XML contents of the <see cref="T:System.Xml.XmlReader"></see> object specified.</summary>
			<param name="newChild">An <see cref="T:System.Xml.XmlReader"></see> object positioned on the XML data for the new child node.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader"></see> object is in an error state or closed.</exception>
			<exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader"></see> object parameter is not well-formed.</exception>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on is not the root node or an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
			<summary>Creates a new child node at the end of the list of child nodes of the current node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> specified.</summary>
			<param name="newChild">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object positioned on the node to add as the new child node.</param>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on is not the root node or an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
			<summary>Creates a new child element node at the end of the list of child nodes of the current node using the namespace prefix, local name and namespace URI specified with the value specified.</summary>
			<param name="localName">The local name of the new child element node (if any).</param>
			<param name="namespaceURI">The namespace URI of the new child element node (if any). <see cref="F:System.String.Empty"></see> and null are equivalent.</param>
			<param name="prefix">The namespace prefix of the new child element node (if any).</param>
			<param name="value">The value of the new child element node. If <see cref="F:System.String.Empty"></see> or null are passed, an empty element is created.</param>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on is not the root node or an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
			<summary>Verifies that the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> conforms to the XML Schema definition language (XSD) schema provided.</summary>
			<returns>true if no schema validation errors occurred; otherwise, false.</returns>
			<param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> containing the schemas used to validate the XML data contained in the <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</param>
			<param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> that receives information about schema validation warnings and errors.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on a node that is not an element, attribute, or the root node or there is not type information to perform validation.</exception>
			<exception cref="T:System.ArgumentException">The <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)"></see> method was called with an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> parameter when the <see cref="T:System.Xml.XPath.XPathNavigator"></see> was not positioned on the root node of the XML data.</exception>
			<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation error occurred, and no <see cref="T:System.Xml.Schema.ValidationEventHandler"></see> was specified to handle validation errors.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Clone">
			<summary>When overridden in a derived class, creates a new <see cref="T:System.Xml.XPath.XPathNavigator"></see> positioned at the same node as this <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
			<returns>A new <see cref="T:System.Xml.XPath.XPathNavigator"></see> positioned at the same node as this <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
			<summary>Compares the position of the current <see cref="T:System.Xml.XPath.XPathNavigator"></see> with the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> specified.</summary>
			<returns>An <see cref="T:System.Xml.XmlNodeOrder"></see> value representing the comparative position of the two <see cref="T:System.Xml.XPath.XPathNavigator"></see> objects.</returns>
			<param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> to compare against.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
			<summary>Compiles a string representing an XPath expression and returns an <see cref="T:System.Xml.XPath.XPathExpression"></see> object.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathExpression"></see> object representing the XPath expression.</returns>
			<param name="xpath">A string representing an XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
			<exception cref="T:System.ArgumentException">The xpath parameter contains an XPath expression that is not valid.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
			<summary>Creates an attribute node on the current element node using the namespace prefix, local name and namespace URI specified with the value specified.</summary>
			<param name="localName">The local name of the new attribute node which cannot <see cref="F:System.String.Empty"></see> or null.</param>
			<param name="namespaceURI">The namespace URI for the new attribute node (if any).</param>
			<param name="prefix">The namespace prefix of the new attribute node (if any).</param>
			<param name="value">The value of the new attribute node. If <see cref="F:System.String.Empty"></see> or null are passed, an empty attribute node is created.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
			<summary>Returns an <see cref="T:System.Xml.XmlWriter"></see> object used to create new attributes on the current element.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object used to create new attributes on the current element.</returns>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
			<summary>Returns a copy of the <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNavigator"></see> copy of this <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
			<summary>Deletes a range of sibling nodes from the current node to the node specified.</summary>
			<param name="lastSiblingToDelete">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> positioned on the last sibling node in the range to delete.</param>
			<exception cref="T:System.InvalidOperationException">The last node to delete specified is not a valid sibling node of the current node.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> specified is null.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
			<summary>Deletes the current node and its child nodes.</summary>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on the root node or a namespace node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
			<summary>Evaluates the specified XPath expression and returns the typed result.</summary>
			<returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean"></see>, <see cref="T:System.Double"></see>, <see cref="T:System.String"></see>, or <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> objects respectively.</returns>
			<param name="xpath">A string representing an XPath expression that can be evaluated.</param>
			<exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
			<summary>Evaluates the <see cref="T:System.Xml.XPath.XPathExpression"></see> and returns the typed result.</summary>
			<returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean"></see>, <see cref="T:System.Double"></see>, <see cref="T:System.String"></see>, or <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> objects respectively.</returns>
			<param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression"></see> that can be evaluated.</param>
			<exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
			<summary>Evaluates the specified XPath expression and returns the typed result, using the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified to resolve namespace prefixes in the XPath expression.</summary>
			<returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean"></see>, <see cref="T:System.Double"></see>, <see cref="T:System.String"></see>, or <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> objects respectively.</returns>
			<param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used to resolve namespace prefixes in the XPath expression.</param>
			<param name="xpath">A string representing an XPath expression that can be evaluated.</param>
			<exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
			<summary>Uses the supplied context to evaluate the <see cref="T:System.Xml.XPath.XPathExpression"></see>, and returns the typed result.</summary>
			<returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean"></see>, <see cref="T:System.Double"></see>, <see cref="T:System.String"></see>, or <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> objects respectively.</returns>
			<param name="context">An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that points to the selected node set that the evaluation is to be performed on.</param>
			<param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression"></see> that can be evaluated.</param>
			<exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
			<summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the value of the specified attribute; <see cref="F:System.String.Empty"></see> if a matching attribute is not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element node.</returns>
			<param name="localName">The local name of the attribute.</param>
			<param name="namespaceURI">The namespace URI of the attribute.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
			<summary>Returns the value of the namespace node corresponding to the specified local name.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the value of the namespace node; <see cref="F:System.String.Empty"></see> if a matching namespace node is not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element node.</returns>
			<param name="name">The local name of the namespace node.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
			<summary>Returns the in-scope namespaces of the current node.</summary>
			<returns>An <see cref="T:System.Collections.Generic.IDictionary`2"></see> collection of namespace names keyed by prefix.</returns>
			<param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value specifying the namespaces to return.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
			<summary>Returns an <see cref="T:System.Xml.XmlWriter"></see> object used to create a new sibling node after the currently selected node.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object used to create a new sibling node after the currently selected node.</returns>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted after the current node.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
			<summary>Creates a new sibling node after the currently selected node using the XML string specified.</summary>
			<param name="newSibling">The XML data string for the new sibling node.</param>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
			<exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted after the current node.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
			<summary>Creates a new sibling node after the currently selected node using the XML contents of the <see cref="T:System.Xml.XmlReader"></see> object specified.</summary>
			<param name="newSibling">An <see cref="T:System.Xml.XmlReader"></see> object positioned on the XML data for the new sibling node.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader"></see> object is in an error state or closed.</exception>
			<exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader"></see> object parameter is not well-formed.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted after the current node.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
			<summary>Creates a new sibling node after the currently selected node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object specified.</summary>
			<param name="newSibling">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object positioned on the node to add as the new sibling node.</param>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted after the current node.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
			<summary>Returns an <see cref="T:System.Xml.XmlWriter"></see> object used to create a new sibling node before the currently selected node.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object used to create a new sibling node before the currently selected node.</returns>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted before the current node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
			<summary>Creates a new sibling node before the currently selected node using the XML string specified.</summary>
			<param name="newSibling">The XML data string for the new sibling node.</param>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted before the current node.</exception>
			<exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
			<exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
			<summary>Creates a new sibling node before the currently selected node using the XML contents of the <see cref="T:System.Xml.XmlReader"></see> object specified.</summary>
			<param name="newSibling">An <see cref="T:System.Xml.XmlReader"></see> object positioned on the XML data for the new sibling node.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader"></see> object is in an error state or closed.</exception>
			<exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader"></see> object parameter is not well-formed.</exception>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted before the current node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
			<summary>Creates a new sibling node before the currently selected node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> specified.</summary>
			<param name="newSibling">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object positioned on the node to add as the new sibling node.</param>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted before the current node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
			<summary>Creates a new sibling element after the current node using the namespace prefix, local name and namespace URI specified, with the value specified.</summary>
			<param name="localName">The local name of the new child element (if any).</param>
			<param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty"></see> and null are equivalent.</param>
			<param name="prefix">The namespace prefix of the new child element (if any).</param>
			<param name="value">The value of the new child element. If <see cref="F:System.String.Empty"></see> or null are passed, an empty element is created.</param>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted after the current node.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
			<summary>Creates a new sibling element before the current node using the namespace prefix, local name, and namespace URI specified, with the value specified.</summary>
			<param name="localName">The local name of the new child element (if any).</param>
			<param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty"></see> and null are equivalent.</param>
			<param name="prefix">The namespace prefix of the new child element (if any).</param>
			<param name="value">The value of the new child element. If <see cref="F:System.String.Empty"></see> or null are passed, an empty element is created.</param>
			<exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not allow a new sibling node to be inserted before the current node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
			<summary>Determines whether the specified <see cref="T:System.Xml.XPath.XPathNavigator"></see> is a descendant of the current <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
			<returns>Returns true if the specified <see cref="T:System.Xml.XPath.XPathNavigator"></see> is a descendant of the current <see cref="T:System.Xml.XPath.XPathNavigator"></see>; otherwise, false.</returns>
			<param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
			<summary>When overridden in a derived class, determines whether the current <see cref="T:System.Xml.XPath.XPathNavigator"></see> is at the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
			<returns>Returns true if the two <see cref="T:System.Xml.XPath.XPathNavigator"></see> objects have the same position; otherwise, false.</returns>
			<param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
			<summary>Gets the namespace URI for the specified prefix.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the namespace URI assigned to the namespace prefix specified; null if no namespace URI is assigned to the prefix specified. The <see cref="T:System.String"></see> returned is atomized.</returns>
			<param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass <see cref="F:System.String.Empty"></see>.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
			<summary>Gets the prefix declared for the specified namespace URI.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the namespace prefix assigned to the namespace URI specified; otherwise, <see cref="F:System.String.Empty"></see> if no namespace URI is assigned to the prefix specified. The <see cref="T:System.String"></see> returned is atomized.</returns>
			<param name="namespaceURI">The namespace URI to resolve for the prefix.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
			<summary>Determines whether the current node matches the specified XPath expression.</summary>
			<returns>Returns true if the current node matches the specified XPath expression; otherwise, false.</returns>
			<param name="xpath">The XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
			<exception cref="T:System.ArgumentException">The XPath expression cannot be evaluated.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
			<summary>Determines whether the current node matches the specified <see cref="T:System.Xml.XPath.XPathExpression"></see>.</summary>
			<returns>Returns true if the current node matches the <see cref="T:System.Xml.XPath.XPathExpression"></see>; otherwise, false.</returns>
			<param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression"></see> object containing the compiled XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
			<exception cref="T:System.ArgumentException">The XPath expression cannot be evaluated.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator"></see>; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> positioned on the node that you want to move to. </param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the attribute with the matching local name and namespace URI.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the attribute; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="localName">The local name of the attribute.</param>
			<param name="namespaceURI">The namespace URI of the attribute; null for an empty namespace.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the child node of the <see cref="T:System.Xml.XPath.XPathNodeType"></see> specified.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the child node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"></see> of the child node to move to.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the child node with the local name and namespace URI specified.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the child node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="localName">The local name of the child node to move to.</param>
			<param name="namespaceURI">The namespace URI of the child node to move to.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the first sibling node of the current node.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the first sibling node of the current node; false if there is no first sibling, or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the first attribute of the current node.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the first attribute of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the first child node of the current node.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the first child node of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to first namespace node of the current node.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the first namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the first namespace node that matches the <see cref="T:System.Xml.XPath.XPathNamespaceScope"></see> specified.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the first namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope"></see> value describing the namespace scope. </param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the following element of the <see cref="T:System.Xml.XPath.XPathNodeType"></see> specified in document order.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> moved successfully; otherwise false.</returns>
			<param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"></see> of the element. The <see cref="T:System.Xml.XPath.XPathNodeType"></see> cannot be <see cref="F:System.Xml.XPath.XPathNodeType.Attribute"></see> or <see cref="F:System.Xml.XPath.XPathNodeType.Namespace"></see>.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the element with the local name and namespace URI specified in document order.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> moved successfully; otherwise false.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the following element of the <see cref="T:System.Xml.XPath.XPathNodeType"></see> specified, to the boundary specified, in document order.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> moved successfully; otherwise false.</returns>
			<param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"></see> of the element. The <see cref="T:System.Xml.XPath.XPathNodeType"></see> cannot be <see cref="F:System.Xml.XPath.XPathNodeType.Attribute"></see> or <see cref="F:System.Xml.XPath.XPathNodeType.Namespace"></see>.</param>
			<param name="end">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> object positioned on the element boundary which the current <see cref="T:System.Xml.XPath.XPathNavigator"></see> will not move past while searching for the following element.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the element with the local name and namespace URI specified, to the boundary specified, in document order.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> moved successfully; otherwise false.</returns>
			<param name="end">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> object positioned on the element boundary which the current <see cref="T:System.Xml.XPath.XPathNavigator"></see> will not move past while searching for the following element.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceURI">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
			<summary>When overridden in a derived class, moves to the node that has an attribute of type ID whose value matches the specified <see cref="T:System.String"></see>.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving; otherwise, false. If false, the position of the navigator is unchanged.</returns>
			<param name="id">A <see cref="T:System.String"></see> representing the ID value of the node to which you want to move.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the namespace node with the specified namespace prefix.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the specified namespace; false if a matching namespace node was not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="name">The namespace prefix of the namespace node.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the next sibling node of the current node.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the next sibling node; otherwise, false if there are no more siblings or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the next sibling node of the current node that matches the <see cref="T:System.Xml.XPath.XPathNodeType"></see> specified.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the next sibling node; otherwise, false if there are no more siblings or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"></see> of the sibling node to move to.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the next sibling node with the local name and namespace URI specified.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the next sibling node; false if there are no more siblings, or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="localName">The local name of the next sibling node to move to.</param>
			<param name="namespaceURI">The namespace URI of the next sibling node to move to.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the next attribute.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the next attribute; false if there are no more attributes. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the next namespace node.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the next namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the next namespace node matching the <see cref="T:System.Xml.XPath.XPathNamespaceScope"></see> specified.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the next namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
			<param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope"></see> value describing the namespace scope. </param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the parent node of the current node.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the parent node of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the previous sibling node of the current node.</summary>
			<returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is successful moving to the previous sibling node; otherwise, false if there is no previous sibling node or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is unchanged.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
			<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to the root node that the current node belongs to.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
			<summary>Returns an <see cref="T:System.Xml.XmlWriter"></see> object used to create a new child node at the beginning of the list of child nodes of the current node.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object used to create a new child node at the beginning of the list of child nodes of the current node.</returns>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on does not allow a new child node to be prepended.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
			<summary>Creates a new child node at the beginning of the list of child nodes of the current node using the XML string specified.</summary>
			<param name="newChild">The XML data string for the new child node.</param>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
			<exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on does not allow a new child node to be prepended.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
			<summary>Creates a new child node at the beginning of the list of child nodes of the current node using the XML contents of the <see cref="T:System.Xml.XmlReader"></see> object specified.</summary>
			<param name="newChild">An <see cref="T:System.Xml.XmlReader"></see> object positioned on the XML data for the new child node.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader"></see> object is in an error state or closed.</exception>
			<exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader"></see> object parameter is not well-formed.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on does not allow a new child node to be prepended.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
			<summary>Creates a new child node at the beginning of the list of child nodes of the current node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object specified.</summary>
			<param name="newChild">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object positioned on the node to add as the new child node.</param>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> object parameter is null.</exception>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on does not allow a new child node to be prepended.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
			<summary>Creates a new child element at the beginning of the list of child nodes of the current node using the namespace prefix, local name, and namespace URI specified with the value specified.</summary>
			<param name="localName">The local name of the new child element (if any).</param>
			<param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty"></see> and null are equivalent.</param>
			<param name="prefix">The namespace prefix of the new child element (if any).</param>
			<param name="value">The value of the new child element. If <see cref="F:System.String.Empty"></see> or null are passed, an empty element is created.</param>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on does not allow a new child node to be prepended.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
			<summary>Returns an <see cref="T:System.Xml.XmlReader"></see> object that contains the current node and its child nodes.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> object that contains the current node and its child nodes.</returns>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element node or the root node.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
			<summary>Replaces a range of sibling nodes from the current node to the node specified.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object used to specify the replacement range.</returns>
			<param name="lastSiblingToReplace">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> positioned on the last sibling node in the range to replace.</param>
			<exception cref="T:System.InvalidOperationException">The last node to replace specified is not a valid sibling node of the current node.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> specified is null.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
			<summary>Replaces the current node with the content of the string specified.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on the new node; otherwise false.</returns>
			<param name="newNode">The XML data string for the new node.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element, text, processing instruction, or comment node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
			<exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
			<summary>Replaces the current node with the contents of the <see cref="T:System.Xml.XmlReader"></see> object specified.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on the new node; otherwise false.</returns>
			<param name="newNode">An <see cref="T:System.Xml.XmlReader"></see> object positioned on the XML data for the new node.</param>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader"></see> object is in an error state or closed.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element, text, processing instruction, or comment node.</exception>
			<exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader"></see> object parameter is not well-formed.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
			<summary>Replaces the current node with the contents of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object specified.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on the new node; otherwise false.</returns>
			<param name="newNode">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object positioned on the new node.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element, text, processing instruction, or comment node.</exception>
			<exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object parameter is not well-formed.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> object parameter is null.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
			<summary>Selects a node set, using the specified XPath expression.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> pointing to the selected node set.</returns>
			<param name="xpath">A <see cref="T:System.String"></see> representing an XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
			<exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
			<summary>Selects a node set using the specified <see cref="T:System.Xml.XPath.XPathExpression"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that points to the selected node set.</returns>
			<param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression"></see> object containing the compiled XPath query.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
			<exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
			<summary>Selects a node set using the specified XPath expression with the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified to resolve namespace prefixes.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that points to the selected node set.</returns>
			<param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used to resolve namespace prefixes.</param>
			<param name="xpath">A <see cref="T:System.String"></see> representing an XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
			<exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
			<summary>Selects all the ancestor nodes of the current node that have a matching <see cref="T:System.Xml.XPath.XPathNodeType"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that contains the selected nodes. The returned nodes are in reverse document order.</returns>
			<param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"></see> of the ancestor nodes.</param>
			<param name="matchSelf">To include the context node in the selection, true; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
			<summary>Selects all the ancestor nodes of the current node that have the specified local name and namespace URI.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that contains the selected nodes. The returned nodes are in reverse document order.</returns>
			<param name="namespaceURI">The namespace URI of the ancestor nodes.</param>
			<param name="name">The local name of the ancestor nodes.</param>
			<param name="matchSelf">To include the context node in the selection, true; otherwise, false. </param>
			<exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
			<summary>Selects all the child nodes of the current node that have the matching <see cref="T:System.Xml.XPath.XPathNodeType"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that contains the selected nodes.</returns>
			<param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"></see> of the child nodes.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
			<summary>Selects all the child nodes of the current node that have the local name and namespace URI specified.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that contains the selected nodes.</returns>
			<param name="namespaceURI">The namespace URI of the child nodes. </param>
			<param name="name">The local name of the child nodes. </param>
			<exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
			<summary>Selects all the descendant nodes of the current node that have a matching <see cref="T:System.Xml.XPath.XPathNodeType"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that contains the selected nodes.</returns>
			<param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"></see> of the descendant nodes.</param>
			<param name="matchSelf">true to include the context node in the selection; otherwise, false.</param>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
			<summary>Selects all the descendant nodes of the current node with the local name and namespace URI specified.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> that contains the selected nodes.</returns>
			<param name="namespaceURI">The namespace URI of the descendant nodes. </param>
			<param name="name">The local name of the descendant nodes. </param>
			<param name="matchSelf">true to include the context node in the selection; otherwise, false.</param>
			<exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
			<summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified XPath query.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object that contains the first matching node for the XPath query specified; otherwise, null if there are no query results.</returns>
			<param name="xpath">A <see cref="T:System.String"></see> representing an XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
			<exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
			<summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified <see cref="T:System.Xml.XPath.XPathExpression"></see> object.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object that contains the first matching node for the XPath query specified; otherwise null if there are no query results.</returns>
			<param name="expression">An <see cref="T:System.Xml.XPath.XPathExpression"></see> object containing the compiled XPath query.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
			<exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
			<summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object using the specified XPath query with the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified to resolve namespace prefixes.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object that contains the first matching node for the XPath query specified; otherwise null if there are no query results.</returns>
			<param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used to resolve namespace prefixes in the XPath query.</param>
			<param name="xpath">A <see cref="T:System.String"></see> representing an XPath expression.</param>
			<exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
			<exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
			<summary>Sets the typed value of the current node.</summary>
			<param name="typedValue">The new typed value of the node.</param>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element or attribute node.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
			<exception cref="T:System.ArgumentNullException">The value specified cannot be null.</exception>
			<exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support the type of the object specified.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
			<summary>Sets the value of the current node.</summary>
			<param name="value">The new value of the node.</param>
			<exception cref="T:System.ArgumentNullException">The value parameter is null.</exception>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> is positioned on the root node, a namespace node, or the specified value is invalid.</exception>
			<exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> does not support editing.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.System.ICloneable.Clone">
			<summary>For a description of this member, see <see cref="M:System.Xml.XPath.XPathNavigator.Clone"></see>.</summary>
			<returns>An <see cref="T:System.Object"></see>.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.ToString">
			<summary>Gets the text value of the current node.</summary>
			<returns>A string that contains the text value of the current node.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
			<summary>Gets the current node's value as the <see cref="T:System.Type"></see> specified, using the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified to resolve namespace prefixes.</summary>
			<returns>The value of the current node as the <see cref="T:System.Type"></see> requested.</returns>
			<param name="returnType">The <see cref="T:System.Type"></see> to return the current node's value as.</param>
			<param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used to resolve namespace prefixes.</param>
			<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
			<exception cref="T:System.FormatException">The current node's value is not in the correct format for the target type.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
			<summary>Streams the current node and its child nodes to the <see cref="T:System.Xml.XmlWriter"></see> object specified.</summary>
			<returns>An <see cref="T:System.Xml.XmlWriter"></see> object that contains the current node and its child nodes.</returns>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> object to stream to.</param>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
			<summary>When overridden in a derived class, gets the base URI for the current node.</summary>
			<returns>The location from which the node was loaded, or <see cref="F:System.String.Empty"></see> if there is no value.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
			<summary>Gets a value indicating whether the <see cref="T:System.Xml.XPath.XPathNavigator"></see> can edit the underlying XML data.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> can edit the underlying XML data; otherwise false.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
			<summary>Gets a value indicating whether the current node has any attributes.</summary>
			<returns>Returns true if the current node has attributes; returns false if the current node has no attributes, or if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> is not positioned on an element node.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
			<summary>Gets a value indicating whether the current node has any child nodes.</summary>
			<returns>Returns true if the current node has any child nodes; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
			<summary>Gets or sets the markup representing the child nodes of the current node.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the markup of the child nodes of the current node.</returns>
			<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml"></see> property cannot be set.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
			<summary>When overridden in a derived class, gets a value indicating whether the current node is an empty element without an end element tag.</summary>
			<returns>Returns true if the current node is an empty element; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.IsNode">
			<summary>Gets a value indicating if the current node represents an XPath node.</summary>
			<returns>Always returns true.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.LocalName">
			<summary>When overridden in a derived class, gets the <see cref="P:System.Xml.XPath.XPathNavigator.Name"></see> of the current node without any namespace prefix.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the local name of the current node, or <see cref="F:System.String.Empty"></see> if the current node does not have a name (for example, text or comment nodes).</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.Name">
			<summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the qualified <see cref="P:System.Xml.XPath.XPathNavigator.Name"></see> of the current node, or <see cref="F:System.String.Empty"></see> if the current node does not have a name (for example, text or comment nodes).</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
			<summary>When overridden in a derived class, gets the namespace URI of the current node.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the namespace URI of the current node, or <see cref="F:System.String.Empty"></see> if the current node has no namespace URI.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.NameTable">
			<summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable"></see> of the <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlNameTable"></see> object enabling you to get the atomized version of a <see cref="T:System.String"></see> within the XML document.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
			<summary>Gets an <see cref="T:System.Collections.IEqualityComparer"></see> used for equality comparison of <see cref="T:System.Xml.XPath.XPathNavigator"></see> objects.</summary>
			<returns>An <see cref="T:System.Collections.IEqualityComparer"></see> used for equality comparison of <see cref="T:System.Xml.XPath.XPathNavigator"></see> objects.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.NodeType">
			<summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XPath.XPathNodeType"></see> of the current node.</summary>
			<returns>One of the <see cref="T:System.Xml.XPath.XPathNodeType"></see> values representing the current node.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
			<summary>Gets or sets the markup representing the opening and closing tags of the current node and its child nodes.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the markup representing the opening and closing tags of the current node and its child nodes.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.Prefix">
			<summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the namespace prefix associated with the current node.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
			<summary>Gets the schema information that has been assigned to the current node as a result of schema validation.</summary>
			<returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo"></see> object that contains the schema information for the current node.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
			<summary>Gets the current node as a boxed object of the most appropriate .NET Framework type.</summary>
			<returns>The current node as a boxed object of the most appropriate .NET Framework type.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
			<summary>Used by <see cref="T:System.Xml.XPath.XPathNavigator"></see> implementations which provide a "virtualized" XML view over a store, to provide access to underlying objects.</summary>
			<returns>The default is null.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
			<summary>Gets the current node's value as a <see cref="T:System.Boolean"></see>.</summary>
			<returns>The current node's value as a <see cref="T:System.Boolean"></see>.</returns>
			<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Boolean"></see>.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean"></see> is not valid.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
			<summary>Gets the current node's value as a <see cref="T:System.DateTime"></see>.</summary>
			<returns>The current node's value as a <see cref="T:System.DateTime"></see>.</returns>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime"></see> is not valid.</exception>
			<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.DateTime"></see>.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
			<summary>Gets the current node's value as a <see cref="T:System.Double"></see>.</summary>
			<returns>The current node's value as a <see cref="T:System.Double"></see>.</returns>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double"></see> is not valid.</exception>
			<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Double"></see>.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
			<summary>Gets the current node's value as an <see cref="T:System.Int32"></see>.</summary>
			<returns>The current node's value as an <see cref="T:System.Int32"></see>.</returns>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32"></see> is not valid.</exception>
			<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int32"></see>.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
			<summary>Gets the current node's value as an <see cref="T:System.Int64"></see>.</summary>
			<returns>The current node's value as an <see cref="T:System.Int64"></see>.</returns>
			<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int64"></see>.</exception>
			<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64"></see> is not valid.</exception>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.ValueType">
			<summary>Gets the .NET Framework <see cref="T:System.Type"></see> of the current node.</summary>
			<returns>The .NET Framework <see cref="T:System.Type"></see> of the current node. The default value is <see cref="T:System.String"></see>.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
			<summary>Gets the xml:lang scope for the current node.</summary>
			<returns>A <see cref="T:System.String"></see> that contains the value of the xml:lang scope, or <see cref="F:System.String.Empty"></see> if the current node has no xml:lang scope value to return.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNavigator.XmlType">
			<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaType"></see> information for the current node.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaType"></see> object; default is null.</returns>
		</member>
		<member name="T:System.Xml.XPath.XPathNodeIterator">
			<summary>Provides an iterator over a selected set of nodes.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> class.</summary>
		</member>
		<member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
			<summary>When overridden in a derived class, returns a clone of this <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> object.</summary>
			<returns>A new <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> object clone of this <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> object.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
			<summary>Returns an <see cref="T:System.Collections.IEnumerator"></see> object to iterate through the selected node set.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerator"></see> object to iterate through the selected node set.</returns>
			<exception cref="T:System.InvalidOperationException">An attempt was made to move the <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> object after the <see cref="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator"></see> method was called, or after a For Each loop over the <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> object has begun.</exception>
		</member>
		<member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
			<summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object returned by the <see cref="P:System.Xml.XPath.XPathNodeIterator.Current"></see> property to the next node in the selected node set.</summary>
			<returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object moved to the next node; false if there are no more selected nodes.</returns>
		</member>
		<member name="M:System.Xml.XPath.XPathNodeIterator.System.ICloneable.Clone">
			<summary>For a description of this member, see <see cref="M:System.Xml.XPath.XPathNodeIterator.Clone"></see>.</summary>
			<returns>An <see cref="T:System.Object"></see>.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNodeIterator.Count">
			<summary>Gets the index of the last node in the selected set of nodes.</summary>
			<returns>The int index of the last node in the selected set of nodes, or 0 if there are no selected nodes.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNodeIterator.Current">
			<summary>When overridden in a derived class, returns the <see cref="T:System.Xml.XPath.XPathNavigator"></see> object for this <see cref="T:System.Xml.XPath.XPathNodeIterator"></see>, positioned on the current context node.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object positioned on the context node from which the node set was selected. The <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext"></see> method must be called to move the <see cref="T:System.Xml.XPath.XPathNodeIterator"></see> to the first node in the selected set.</returns>
		</member>
		<member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
			<summary>When overridden in a derived class, gets the index of the current position in the selected set of nodes.</summary>
			<returns>The int index of the current position.</returns>
		</member>
		<member name="T:System.Xml.XPath.XPathNodeType">
			<summary>Defines the XPath node types that can be returned from the <see cref="T:System.Xml.XPath.XPathNavigator"></see> class.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.All">
			<summary>Any of the <see cref="T:System.Xml.XPath.XPathNodeType"></see> node types.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.Attribute">
			<summary>An attribute, such as id='123'.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.Comment">
			<summary>A comment, such as &lt;!-- my comment --&gt;</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.Element">
			<summary>An element, such as &lt;element&gt;.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.Namespace">
			<summary>A namespace, such as xmlns="namespace".</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
			<summary>A processing instruction, such as &lt;?pi test?&gt;. This does not include XML declarations, which are not visible to the <see cref="T:System.Xml.XPath.XPathNavigator"></see> class. </summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.Root">
			<summary>The root node of the XML document or node tree.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
			<summary>A node with white space characters and xml:space set to preserve.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.Text">
			<summary>The text content of a node. Equivalent to the Document Object Model (DOM) Text and CDATA node types. Contains at least one character.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
			<summary>A node with only white space characters and no significant white space. White space characters are #x20, #x9, #xD, or #xA.</summary>
		</member>
		<member name="T:System.Xml.XPath.XPathResultType">
			<summary>Specifies the return type of the XPath expression.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathResultType.Any">
			<summary>Any of the XPath node types.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathResultType.Boolean">
			<summary>A <see cref="T:System.Boolean"></see>true or false value.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathResultType.Error">
			<summary>The expression does not evaluate to the correct XPath type.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathResultType.Navigator">
			<summary>A tree fragment.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathResultType.NodeSet">
			<summary>A node collection.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathResultType.Number">
			<summary>A numeric value.</summary>
		</member>
		<member name="F:System.Xml.XPath.XPathResultType.String">
			<summary>A <see cref="T:System.String"></see> value.</summary>
		</member>
		<member name="N:System.Xml.Xsl">
			<summary>The System.Xml.Xsl namespace provides support for Extensible Stylesheet Transformation (XSLT) transforms. It supports the W3C XSL Transformations (XSLT) Version 1.0 Recommendation (www.w3.org/TR/xslt).</summary>
		</member>
		<member name="T:System.Xml.Xsl.IXsltContextFunction">
			<summary>Provides an interface to a given function defined in the Extensible Stylesheet Language for Transformations (XSLT) style sheet during runtime execution.</summary>
		</member>
		<member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
			<summary>Provides the method to invoke the function with the given arguments in the given context.</summary>
			<returns>An <see cref="T:System.Object"></see> representing the return value of the function.</returns>
			<param name="xsltContext">The XSLT context for the function call. </param>
			<param name="args">The arguments of the function call. Each argument is an element in the array. </param>
			<param name="docContext">The context node for the function call. </param>
		</member>
		<member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
			<summary>Gets the supplied XML Path Language (XPath) types for the function's argument list. This information can be used to discover the signature of the function which allows you to differentiate between overloaded functions.</summary>
			<returns>An array of <see cref="T:System.Xml.XPath.XPathResultType"></see> representing the types for the function's argument list.</returns>
		</member>
		<member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
			<summary>Gets the maximum number of arguments for the function. This enables the user to differentiate between overloaded functions.</summary>
			<returns>The maximum number of arguments for the function.</returns>
		</member>
		<member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
			<summary>Gets the minimum number of arguments for the function. This enables the user to differentiate between overloaded functions.</summary>
			<returns>The minimum number of arguments for the function.</returns>
		</member>
		<member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
			<summary>Gets the <see cref="T:System.Xml.XPath.XPathResultType"></see> representing the XPath type returned by the function.</summary>
			<returns>An <see cref="T:System.Xml.XPath.XPathResultType"></see> representing the XPath type returned by the function </returns>
		</member>
		<member name="T:System.Xml.Xsl.IXsltContextVariable">
			<summary>Provides an interface to a given variable that is defined in the style sheet during runtime execution.</summary>
		</member>
		<member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
			<summary>Evaluates the variable at runtime and returns an object that represents the value of the variable.</summary>
			<returns>An <see cref="T:System.Object"></see> representing the value of the variable. Possible return types include number, string, Boolean, document fragment, or node set.</returns>
			<param name="xsltContext">An <see cref="T:System.Xml.Xsl.XsltContext"></see> representing the execution context of the variable. </param>
		</member>
		<member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
			<summary>Gets a value indicating whether the variable is local.</summary>
			<returns>true if the variable is a local variable in the current context; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
			<summary>Gets a value indicating whether the variable is an Extensible Stylesheet Language Transformations (XSLT) parameter. This can be a parameter to a style sheet or a template.</summary>
			<returns>true if the variable is an XSLT parameter; otherwise, false.</returns>
		</member>
		<member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
			<summary>Gets the <see cref="T:System.Xml.XPath.XPathResultType"></see> representing the XML Path Language (XPath) type of the variable.</summary>
			<returns>The <see cref="T:System.Xml.XPath.XPathResultType"></see> representing the XPath type of the variable.</returns>
		</member>
		<member name="T:System.Xml.Xsl.XslCompiledTransform">
			<summary>Transforms XML data using an XSLT style sheet.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform"></see> class. </summary>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform"></see> class with the specified debug setting. </summary>
			<param name="enableDebug">true to generate debug information; otherwise false. Setting this to true enables you to debug the style sheet with the Microsoft Visual Studio Debugger.</param>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
			<summary>Compiles the style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> object.</summary>
			<param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the style sheet.</param>
			<exception cref="T:System.ArgumentNullException">The stylesheet value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
			<summary>Loads and compiles the style sheet located at the specified URI.</summary>
			<param name="stylesheetUri">The URI of the style sheet.</param>
			<exception cref="T:System.IO.FileNotFoundException">The style sheet cannot be found.</exception>
			<exception cref="T:System.Xml.XmlException">There was a parsing error loading the style sheet.</exception>
			<exception cref="T:System.UriFormatException">stylesheetUri is not a valid URI.</exception>
			<exception cref="T:System.Net.WebException">The stylesheetUri value cannot be resolved.-or-An error occurred while processing the request.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">The stylesheetUri value includes a filename or directory that cannot be found.</exception>
			<exception cref="T:System.ArgumentNullException">The stylesheetUri value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
			<summary>Compiles the style sheet contained in the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="stylesheet">An <see cref="T:System.Xml.XmlReader"></see> containing the style sheet.</param>
			<exception cref="T:System.ArgumentNullException">The stylesheet value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
			<summary>Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see>. The <see cref="T:System.Xml.XmlResolver"></see> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
			<param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the style sheet.</param>
			<param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve any style sheets referenced in XSLT import and include elements. If this is null, external resources are not resolved.</param>
			<param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"></see> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default"></see> setting is applied.</param>
			<exception cref="T:System.ArgumentNullException">The stylesheet value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
			<summary>Loads and compiles the XSLT style sheet specified by the URI. The <see cref="T:System.Xml.XmlResolver"></see> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
			<param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"></see> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default"></see> setting is applied.</param>
			<param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the style sheet URI and any style sheets referenced in XSLT import and include elements. </param>
			<param name="stylesheetUri">The URI of the style sheet.</param>
			<exception cref="T:System.IO.FileNotFoundException">The style sheet cannot be found.</exception>
			<exception cref="T:System.Xml.XmlException">There was a parsing error loading the style sheet.</exception>
			<exception cref="T:System.UriFormatException">stylesheetUri is not a valid URI.</exception>
			<exception cref="T:System.Net.WebException">The stylesheetUri value cannot be resolved.-or-An error occurred while processing the request.</exception>
			<exception cref="T:System.ArgumentNullException">The stylesheetUri or stylesheetResolver value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">The stylesheetUri value includes a filename or directory that cannot be found.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
			<summary>Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader"></see>. The <see cref="T:System.Xml.XmlResolver"></see> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
			<param name="stylesheet">The <see cref="T:System.Xml.XmlReader"></see> containing the style sheet.</param>
			<param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve any style sheets referenced in XSLT import and include elements. If this is null, external resources are not resolved.</param>
			<param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings"></see> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default"></see> setting is applied.</param>
			<exception cref="T:System.ArgumentNullException">The stylesheet value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> object and outputs the results to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="results">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter"></see> using the <see cref="T:System.Xml.XmlWriterSettings"></see> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property. This ensures that the <see cref="T:System.Xml.XmlWriter"></see> has the correct output settings.</param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
			<summary>Executes the transform using the input document specified by the URI and outputs the results to a file.</summary>
			<param name="resultsFile">The URI of the output file.</param>
			<param name="inputUri">The URI of the input document.</param>
			<exception cref="T:System.IO.FileNotFoundException">The input document cannot be found.</exception>
			<exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
			<exception cref="T:System.UriFormatException">inputUri or resultsFile is not a valid URI.</exception>
			<exception cref="T:System.Net.WebException">The inputUri or resultsFile value cannot be resolved.-or-An error occurred while processing the request</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">The inputUri or resultsFile value includes a filename or directory cannot be found.</exception>
			<exception cref="T:System.ArgumentNullException">The inputUri or resultsFile value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
			<summary>Executes the transform using the input document specified by the URI and outputs the results to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="results">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter"></see> using the <see cref="T:System.Xml.XmlWriterSettings"></see> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property. This ensures that the <see cref="T:System.Xml.XmlWriter"></see> has the correct output settings.</param>
			<param name="inputUri">The URI of the input document.</param>
			<exception cref="T:System.Net.WebException">The inputUri value cannot be resolved.-or-An error occurred while processing the request.</exception>
			<exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">The inputUri value includes a filename or directory cannot be found.</exception>
			<exception cref="T:System.UriFormatException">inputUri is not a valid URI.</exception>
			<exception cref="T:System.ArgumentNullException">The inputUri or results value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader"></see> object and outputs the results to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="results">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter"></see> using the <see cref="T:System.Xml.XmlWriterSettings"></see> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property. This ensures that the <see cref="T:System.Xml.XmlWriter"></see> has the correct output settings.</param>
			<param name="input">The <see cref="T:System.Xml.XmlReader"></see> containing the input document.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> object and outputs the results to a stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional runtime arguments.</summary>
			<param name="results">The stream to which you want to output.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> object and outputs the results to an <see cref="T:System.IO.TextWriter"></see>. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional run-time arguments.</summary>
			<param name="results">The <see cref="T:System.IO.TextWriter"></see> to which you want to output.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> object and outputs the results to an <see cref="T:System.Xml.XmlWriter"></see>. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional run-time arguments.</summary>
			<param name="results">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter"></see> using the <see cref="T:System.Xml.XmlWriterSettings"></see> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property. This ensures that the <see cref="T:System.Xml.XmlWriter"></see> has the correct output settings.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
			<summary>Executes the transform using the input document specified by the URI and outputs the results to stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional run-time arguments.</summary>
			<param name="results">The stream to which you want to output.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="inputUri">The URI of the input document.</param>
			<exception cref="T:System.Net.WebException">The inputUri value cannot be resolved.-or-An error occurred while processing the request</exception>
			<exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">The inputUri value includes a filename or directory cannot be found.</exception>
			<exception cref="T:System.UriFormatException">inputUri is not a valid URI.</exception>
			<exception cref="T:System.ArgumentNullException">The inputUri or results value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
			<summary>Executes the transform using the input document specified by the URI and outputs the results to a <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="results">The <see cref="T:System.IO.TextWriter"></see> to which you want to output.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="inputUri">The URI of the input document.</param>
			<exception cref="T:System.Net.WebException">The inputUri value cannot be resolved.-or-An error occurred while processing the request</exception>
			<exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">The inputUri value includes a filename or directory cannot be found.</exception>
			<exception cref="T:System.UriFormatException">inputUri is not a valid URI.</exception>
			<exception cref="T:System.ArgumentNullException">The inputUri or results value is null.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
			<summary>Executes the transform using the input document specified by the URI and outputs the results to an <see cref="T:System.Xml.XmlWriter"></see>. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional run-time arguments.</summary>
			<param name="results">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter"></see> using the <see cref="T:System.Xml.XmlWriterSettings"></see> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property. This ensures that the <see cref="T:System.Xml.XmlWriter"></see> has the correct output settings.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="inputUri">The URI of the input document.</param>
			<exception cref="T:System.Net.WebException">The inputUri value cannot be resolved.-or-An error occurred while processing the request.</exception>
			<exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
			<exception cref="T:System.UriFormatException">inputUri is not a valid URI.</exception>
			<exception cref="T:System.ArgumentNullException">The inputUri or results value is null.</exception>
			<exception cref="T:System.IO.DirectoryNotFoundException">The inputtUri value includes a filename or directory cannot be found.</exception>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader"></see> object and outputs the results to a stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional run-time arguments.</summary>
			<param name="results">The stream to which you want to output.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="input">An <see cref="T:System.Xml.XmlReader"></see> containing the input document.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader"></see> object and outputs the results to a <see cref="T:System.IO.TextWriter"></see>. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional run-time arguments.</summary>
			<param name="results">The <see cref="T:System.IO.TextWriter"></see> to which you want to output.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="input">An <see cref="T:System.Xml.XmlReader"></see> containing the input document.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader"></see> object and outputs the results to an <see cref="T:System.Xml.XmlWriter"></see>. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional run-time arguments.</summary>
			<param name="results">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter"></see> using the <see cref="T:System.Xml.XmlWriterSettings"></see> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property. This ensures that the <see cref="T:System.Xml.XmlWriter"></see> has the correct output settings.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="input">An <see cref="T:System.Xml.XmlReader"></see> containing the input document.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
			<summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader"></see> object and outputs the results to an <see cref="T:System.Xml.XmlWriter"></see>. The <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> provides additional run-time arguments and the XmlResolver resolves the XSLT document() function.</summary>
			<param name="results">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter"></see> using the <see cref="T:System.Xml.XmlWriterSettings"></see> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings"></see> property. This ensures that the <see cref="T:System.Xml.XmlWriter"></see> has the correct output settings.</param>
			<param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
			<param name="input">An <see cref="T:System.Xml.XmlReader"></see> containing the input document.</param>
			<param name="documentResolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.</param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
			<exception cref="T:System.ArgumentNullException">The input or results value is null.</exception>
		</member>
		<member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
			<summary>Gets an <see cref="T:System.Xml.XmlWriterSettings"></see> object that contains the output information derived from the xsl:output element of the style sheet.</summary>
			<returns>A read-only <see cref="T:System.Xml.XmlWriterSettings"></see> object that contains the output information derived from the xsl:output element of the style sheet. This value can be null.</returns>
		</member>
		<member name="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles">
			<summary>Gets the <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> that contains the temporary files generated on disk after a successful call to the <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load"></see> method. </summary>
			<returns>The <see cref="T:System.CodeDom.Compiler.TempFileCollection"></see> that contains the temporary files generated on disk. This value is null if the <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load"></see> method has not been successfully called, or if debugging has not been enabled.</returns>
		</member>
		<member name="T:System.Xml.Xsl.XsltArgumentList">
			<summary>Contains a variable number of arguments which are either XSLT parameters or extension objects.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
			<summary>Implements a new instance of the <see cref="T:System.Xml.Xsl.XsltArgumentList"></see>.</summary>
		</member>
		<member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
			<summary>Occurs when a message is specified in the style sheet by the xsl:message element. </summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
			<summary>Adds a new object to the <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> and associates it with the namespace URI.</summary>
			<param name="namespaceUri">The namespace URI to associate with the object. To use the default namespace, specify an empty string. </param>
			<param name="extension">The object to add to the list. </param>
			<exception cref="T:System.Security.SecurityException">The caller does not have sufficient permissions to call this method. </exception>
			<exception cref="T:System.ArgumentException">The namespaceUri is either null or http://www.w3.org/1999/XSL/Transform The namespaceUri already has an extension object associated with it. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
			<summary>Adds a parameter to the <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> and associates it with the namespace qualified name.</summary>
			<param name="parameter">The parameter value or object to add to the list. </param>
			<param name="namespaceUri">The namespace URI to associate with the parameter. To use the default namespace, specify an empty string. </param>
			<param name="name">The name to associate with the parameter. </param>
			<exception cref="T:System.ArgumentException">The namespaceUri is either null or http://www.w3.org/1999/XSL/Transform.The name is not a valid name according to the W3C XML specification.The namespaceUri already has a parameter associated with it. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
			<summary>Removes all parameters and extension objects from the <see cref="T:System.Xml.Xsl.XsltArgumentList"></see>.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
			<summary>Gets the object associated with the given namespace.</summary>
			<returns>The namespace URI object or null if one was not found.</returns>
			<param name="namespaceUri">The namespace URI of the object. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
			<summary>Gets the parameter associated with the namespace qualified name.</summary>
			<returns>The parameter object or null if one was not found.</returns>
			<param name="namespaceUri">The namespace URI associated with the parameter. </param>
			<param name="name">The name of the parameter. <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> does not check to ensure the name passed is a valid local name; however, the name cannot be null. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
			<summary>Removes the object with the namespace URI from the <see cref="T:System.Xml.Xsl.XsltArgumentList"></see>.</summary>
			<returns>The object with the namespace URI or null if one was not found.</returns>
			<param name="namespaceUri">The namespace URI associated with the object to remove. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
			<summary>Removes the parameter from the <see cref="T:System.Xml.Xsl.XsltArgumentList"></see>.</summary>
			<returns>The parameter object or null if one was not found.</returns>
			<param name="namespaceUri">The namespace URI of the parameter to remove. </param>
			<param name="name">The name of the parameter to remove. <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> does not check to ensure the name passed is a valid local name; however, the name cannot be null. </param>
		</member>
		<member name="T:System.Xml.Xsl.XsltCompileException">
			<summary>The exception that is thrown by the Load method when an error is found in the XSLT style sheet.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException"></see> class with a specified error message.</summary>
			<param name="message">The message that describes the error.</param>
		</member>
		<member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the XsltCompileException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects.</summary>
			<param name="context">The StreamingContext object containing the context information. </param>
			<param name="info">The SerializationInfo object containing all the properties of an XsltCompileException. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException"></see> class specified error message and a reference to the inner exception that is the cause of this exception.</summary>
			<param name="message">The message that describes the error.</param>
			<param name="innerException">The exception that is the cause of the current exception, or null if no inner exception is specified. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
			<summary>Initializes a new instance of the XsltCompileException class.</summary>
			<param name="sourceUri">The location path of the style sheet. </param>
			<param name="inner">The <see cref="T:System.Exception"></see> that threw the XsltCompileException. </param>
			<param name="linePosition">The line position indicating where the error occurred in the style sheet. </param>
			<param name="lineNumber">The line number indicating where the error occurred in the style sheet. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Streams all the XsltCompileException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
			<param name="context">The StreamingContext object. </param>
			<param name="info">The SerializationInfo object. </param>
		</member>
		<member name="T:System.Xml.Xsl.XsltContext">
			<summary>Encapsulates the current execution context of the Extensible Stylesheet Language for Transformations (XSLT) processor allowing XML Path Language (XPath) to resolve functions, parameters, and namespaces within XPath expressions.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltContext.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext"></see> class with the specified <see cref="T:System.Xml.NameTable"></see>.</summary>
			<param name="table">The <see cref="T:System.Xml.NameTable"></see> to use. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
			<summary>When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based upon the order the documents were loaded by the XSLT processor (that is, the <see cref="T:System.Xml.Xsl.XslTransform"></see> class).</summary>
			<returns>An integer value describing the relative order of the two base URIs: -1 if baseUri occurs before nextbaseUri; 0 if the two base URIs are identical; and 1 if baseUri occurs after nextbaseUri.</returns>
			<param name="baseUri">The base URI of the first document to compare. </param>
			<param name="nextbaseUri">The base URI of the second document to compare. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
			<summary>When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.</summary>
			<returns>Returns true if the white space is to be preserved or false if the white space is to be stripped.</returns>
			<param name="node">The white space node that is to be preserved or stripped in the current context. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
			<summary>When overridden in a derived class, resolves a function reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextFunction"></see> representing the function. The <see cref="T:System.Xml.Xsl.IXsltContextFunction"></see> is used at execution time to get the return value of the function.</summary>
			<returns>An <see cref="T:System.Xml.Xsl.IXsltContextFunction"></see> representing the function.</returns>
			<param name="name">The name of the function. </param>
			<param name="prefix">The prefix of the function as it appears in the XPath expression. </param>
			<param name="ArgTypes">An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods). </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
			<summary>When overridden in a derived class, resolves a variable reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextVariable"></see> representing the variable.</summary>
			<returns>An <see cref="T:System.Xml.Xsl.IXsltContextVariable"></see> representing the variable at runtime.</returns>
			<param name="name">The name of the variable. </param>
			<param name="prefix">The prefix of the variable as it appears in the XPath expression. </param>
		</member>
		<member name="P:System.Xml.Xsl.XsltContext.Whitespace">
			<summary>When overridden in a derived class, gets a value indicating whether to include white space nodes in the output.</summary>
			<returns>true to check white space nodes in the source document for inclusion in the output; false to not evaluate white space nodes. The default is true.</returns>
		</member>
		<member name="T:System.Xml.Xsl.XsltException">
			<summary>The exception that is thrown when an error occurs while processing an XSLT transformation.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltException"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltException"></see> class with a specified error message. </summary>
			<param name="message">The message that describes the error.</param>
		</member>
		<member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the XsltException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see> objects.</summary>
			<param name="context">The StreamingContext object. </param>
			<param name="info">The SerializationInfo object containing all the properties of an XsltException. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the XsltException class.</summary>
			<param name="message">The description of the error condition. </param>
			<param name="innerException">The <see cref="T:System.Exception"></see> which threw the XsltException, if any. This value can be null. </param>
		</member>
		<member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Streams all the XsltException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext"></see>.</summary>
			<param name="context">The StreamingContext object. </param>
			<param name="info">The SerializationInfo object. </param>
		</member>
		<member name="P:System.Xml.Xsl.XsltException.LineNumber">
			<summary>Gets the line number indicating where the error occurred in the style sheet.</summary>
			<returns>The line number indicating where the error occurred in the style sheet.</returns>
		</member>
		<member name="P:System.Xml.Xsl.XsltException.LinePosition">
			<summary>Gets the line position indicating where the error occurred in the style sheet.</summary>
			<returns>The line position indicating where the error occurred in the style sheet.</returns>
		</member>
		<member name="P:System.Xml.Xsl.XsltException.Message">
			<summary>Gets the formatted error message describing the current exception.</summary>
			<returns>The formatted error message describing the current exception.</returns>
		</member>
		<member name="P:System.Xml.Xsl.XsltException.SourceUri">
			<summary>Gets the location path of the style sheet.</summary>
			<returns>The location path of the style sheet.</returns>
		</member>
		<member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
			<summary>Provides data for the <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered"></see> event.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs"></see> class.</summary>
		</member>
		<member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
			<summary>Gets the contents of the xsl:message element.</summary>
			<returns>The contents of the xsl:message element.</returns>
		</member>
		<member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
			<summary>Represents the method that will handle the <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered"></see> event.</summary>
		</member>
		<member name="T:System.Xml.Xsl.XslTransform">
			<summary>Transforms XML data using an Extensible Stylesheet Language for Transformations (XSLT) style sheet.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslTransform"></see> class.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see>.</summary>
			<param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the XSLT style sheet. </param>
			<exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
			<summary>Loads the XSLT style sheet specified by a URL.</summary>
			<param name="url">The URL that specifies the XSLT style sheet to load. </param>
			<exception cref="T:System.Security.SecurityException">The style sheet contains embedded script, and the caller does not have UnmanagedCode permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="stylesheet">An <see cref="T:System.Xml.XmlReader"></see> object that contains the XSLT style sheet. </param>
			<exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
			<param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object that contains the XSLT style sheet. </param>
			<exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load"></see> method completes. </param>
			<param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the XSLT style sheet. </param>
			<exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
			<summary>Loads the XSLT style sheet specified by a URL.</summary>
			<param name="url">The URL that specifies the XSLT style sheet to load. </param>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> to use to load the style sheet and any style sheet(s) referenced in xsl:import and xsl:include elements.If this is null, a default <see cref="T:System.Xml.XmlUrlResolver"></see> with no user credentials is used to open the style sheet. The default <see cref="T:System.Xml.XmlUrlResolver"></see> is not used to resolve any external resources in the style sheet, so xsl:import and xsl:include elements are not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)"></see> method completes. </param>
			<exception cref="T:System.Security.SecurityException">The style sheet contains embedded script, and the caller does not have UnmanagedCode permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)"></see>  method completes. </param>
			<param name="stylesheet">An <see cref="T:System.Xml.XmlReader"></see> object that contains the XSLT style sheet. </param>
			<exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load"></see> method completes. </param>
			<param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object that contains the XSLT style sheet. </param>
			<exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see>. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load"></see> method completes. </param>
			<param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the XSLT style sheet. </param>
			<param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
			<exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader"></see>. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load"></see> method completes. </param>
			<param name="stylesheet">An <see cref="T:System.Xml.XmlReader"></see> object containing the style sheet to load. </param>
			<param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
			<exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
			<summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator"></see>. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load"></see> method completes. </param>
			<param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> object containing the style sheet to load. </param>
			<param name="evidence">The <see cref="T:System.Security.Policy.Evidence"></see> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
			<exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
			<exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> containing the results of the transformation.</returns>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed. </param>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
			<summary>Transforms the XML data in the input file and outputs the result to an output file.</summary>
			<param name="outputfile">The URL of the output file. </param>
			<param name="inputfile">The URL of the source document to be transformed. </param>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> containing the results of the transformation.</returns>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> using the specified args and outputs the result to a <see cref="T:System.IO.Stream"></see>.</summary>
			<param name="output">The stream to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> using the specified args and outputs the result to a <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="output">The <see cref="T:System.IO.TextWriter"></see> to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> containing the results of the transformation.</returns>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)"></see> method completes. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed. </param>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="output">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the input file and outputs the result to an output file.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform"></see> method completes. </param>
			<param name="outputfile">The URL of the output file. </param>
			<param name="inputfile">The URL of the source document to be transformed. </param>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified args and outputs the result to a <see cref="T:System.IO.Stream"></see>.</summary>
			<param name="output">The stream to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified args and outputs the result to a <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="output">The <see cref="T:System.IO.TextWriter"></see> to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlReader"></see> containing the results of the transformation.</returns>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)"></see> method completes. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="output">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> using the specified args and outputs the result to a <see cref="T:System.IO.Stream"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform"></see> method completes. </param>
			<param name="output">The stream to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> using the specified args and outputs the result to a <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)"></see> method completes. </param>
			<param name="output">The <see cref="T:System.IO.TextWriter"></see> to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)"></see> method completes. </param>
			<param name="output">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable"></see> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode"></see> (typically an <see cref="T:System.Xml.XmlDocument"></see>), or an <see cref="T:System.Xml.XPath.XPathDocument"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified args and outputs the result to a <see cref="T:System.IO.Stream"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)"></see> method completes. </param>
			<param name="output">The stream to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified args and outputs the result to a <see cref="T:System.IO.TextWriter"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)"></see> method completes. </param>
			<param name="output">The <see cref="T:System.IO.TextWriter"></see> to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
			<summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator"></see> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="resolver">The <see cref="T:System.Xml.XmlResolver"></see> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver"></see> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)"></see> method completes. </param>
			<param name="output">The <see cref="T:System.Xml.XmlWriter"></see> to which you want to output. </param>
			<param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList"></see> containing the namespace-qualified arguments used as input to the transformation. </param>
			<param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator"></see> containing the data to be transformed. </param>
			<exception cref="T:System.Xml.Xsl.XsltException">There was an error processing the XSLT transformation. </exception>
		</member>
		<member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
			<summary>Sets the <see cref="T:System.Xml.XmlResolver"></see> used to resolve external resources when the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform"></see> method is called.</summary>
			<returns>The <see cref="T:System.Xml.XmlResolver"></see> to use during transformation. If set to null, the XSLT document() function is not resolved.</returns>
		</member>
		<member name="T:System.Xml.Xsl.XsltSettings">
			<summary>Specifies the XSLT features to support during execution of the XSLT style sheet.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltSettings.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltSettings"></see> class with default settings.</summary>
		</member>
		<member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltSettings"></see> class with the specified settings.</summary>
			<param name="enableScript">true to enable support for embedded scripts blocks; otherwise, false.</param>
			<param name="enableDocumentFunction">true to enable support for the XSLT document() function; otherwise, false.</param>
		</member>
		<member name="P:System.Xml.Xsl.XsltSettings.Default">
			<summary>Gets an <see cref="T:System.Xml.Xsl.XsltSettings"></see> object with default settings. Support for the XSLT document() function and embedded script blocks is disabled.</summary>
			<returns>An <see cref="T:System.Xml.Xsl.XsltSettings"></see> object with the <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction"></see> and <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript"></see> properties set to false.</returns>
		</member>
		<member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
			<summary>Gets or sets a value indicating whether to enable support for the XSLT document() function.</summary>
			<returns>true to support the XSLT document() function; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
			<summary>Gets or sets a value indicating whether to enable support for embedded script blocks.</summary>
			<returns>true to support script blocks in XSLT style sheets; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
			<summary>Gets an <see cref="T:System.Xml.Xsl.XsltSettings"></see> object that enables support for the XSLT document() function and embedded script blocks.</summary>
			<returns>An <see cref="T:System.Xml.Xsl.XsltSettings"></see> object with the <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction"></see> and <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript"></see> properties set to true.</returns>
		</member>
	</members>
</doc>