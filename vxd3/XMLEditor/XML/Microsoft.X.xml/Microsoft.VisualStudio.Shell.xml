<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>Microsoft.VisualStudio.Shell</name>
	</assembly>
	<members>
		<member name="T:Microsoft.VisualStudio.ErrorHandler">
			<summary>Provides methods for dealing with common COM error codes.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.ErrorHandler.Failed(System.Int32)">
			<summary>Checks if a HRESULT is an error return code.</summary>
			<returns>Returns true if hr represents an error, otherwise returns false.</returns>
			<param name="hr">The HRESULT to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.ErrorHandler.Succeeded(System.Int32)">
			<summary>Checks if a HRESULT is a success return code.</summary>
			<returns>Returns true if hr represents a success otherwise returns false.</returns>
			<param name="hr">The HRESULT to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(System.Int32)">
			<summary>Checks if the parameter is a success or failure HRESULT and throws an exception in case of failure.</summary>
			<param name="hr">The HRESULT to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.ErrorHandler.ThrowOnFailure(System.Int32,System.Int32[])">
			<summary>Checks if the parameter is a success or failure HRESULT and throws an exception if it is a failure that is not included in the array of well-known failures.</summary>
			<param name="hr">The HRESULT to test.</param>
			<param name="expectedHRFailure">If hr is found in this array of expected failures no exception should be thrown.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.IEventHandler">
			<summary>Provides the methods necessary to add, removed, and test for the existence of handlers in an underlying handler collection.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.IEventHandler.AddHandler(System.String)">
			<summary>Adds a named handler to its underlying handler collection.</summary>
			<param name="bstrEventName">The name of the handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.IEventHandler.HandlesEvent(System.String)">
			<summary>Tests if a named handler is in the underlying handler collection.</summary>
			<returns>Returns true if the handler is in the underlying handler collection, otherwise returns false.</returns>
			<param name="bstrEventName">The name of the evaluated handler.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants">
			<summary>Use this class to access common Visual Studio constants.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.BuildOrder">
			<summary>Use this legacy GUID to access a specific output pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.BuildOutput">
			<summary>Use this legacy GUID to access a specific output pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CEF_CLONEFILE">
			<summary>An obsolete flag combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)"></see></summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CEF_OPENASNEW">
			<summary>Combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)"></see>, this indicates the editor factory should perform necessary corrections.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CEF_OPENFILE">
			<summary>Combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)"></see>, this flag is mutually exclusive with <see cref="F:Microsoft.VisualStudio.VSConstants.CEF_CLONEFILE"></see>. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CEF_SILENT">
			<summary>Indicates the editor factory should create the editor silently. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmDocData">
			<summary>The document's data is HTML format.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmedPackage">
			<summary>GUID of the HTML package.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmlLanguageService">
			<summary>GUID of the HTML language service.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_MiscellaneousFilesProject">
			<summary>CLSID for Miscellaneous Files project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_SolutionItemsProject">
			<summary>Project type CLSID for Solution Items project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsCfgProviderEventsHelper">
			<summary>Provide notifications when configuration-related events are fired. Implemented by the environment.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsDocOutlinePackage">
			<summary>The CLSID of the document outline package window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsEnvironmentPackage">
			<summary>The CLSID for Visual Studio Environment Package.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsTaskList">
			<summary>The CLSID for Visual Studio Environment Task List.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsTaskListPackage">
			<summary>The CLSID for Visual Studio Environment Task List Package.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsUIHierarchyWindow">
			<summary>The CLSID for Visual Studio Environment Hierarchy Window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.cmdidToolsOptions">
			<summary>On the Tools menu, the command for options.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPDN_SELCHANGED">
			<summary>Sent from a page dialog to Component Selector dialog, informs of selection change on page.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPDN_SELDBLCLICK">
			<summary>Sent from a page dialog to Component Selector dialog, informs of a double click on a selected item.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_CLEARSELECTION">
			<summary>Resets and clears selection in list of available components on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_GETSELECTION">
			<summary>Retrieves information about selection on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_INITIALIZELIST">
			<summary>Initializes the list of available components on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_INITIALIZETAB">
			<summary>Initializes a tab with <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> in <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT"></see> on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_QUERYCANSELECT">
			<summary>Determine whether the Select button should be enabled on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.CPPM_SETMULTISELECT">
			<summary>Sets the multiple-selection mode on the Component Selector dialog.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DebugOutput">
			<summary>Use this legacy GUID to access a specific output pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_ARRAYISLOCKED">
			<summary>An HRESULT that indicates that the array is currently locked.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADCALLEE">
			<summary>A COM return value.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADINDEX">
			<summary>A return value that indicates subscript out of range.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADPARAMCOUNT">
			<summary>An error return value that indicates that the number of elements provided to the method is different from the number of arguments accepted by the method.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADVARTYPE">
			<summary>One of the method arguments is not a valid variant type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BUFFERTOOSMALL">
			<summary>A return error that indicates the destination token buffer is too small.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_DIVBYZERO">
			<summary>A return error that indicates a divide by zero error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_EXCEPTION">
			<summary>This return value indicates that the call generated an exception.  The usual implementation is to specify that an argument of the method that returned this error is a pointer to a structure that contains exception information.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_MEMBERNOTFOUND">
			<summary>A return value indicating that the requested member does not exist, or the call to Invoke tried to set the value of a read-only property.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_NONAMEDARGS">
			<summary>A return value indicating that the invoked implementation of IDispatch does not support named arguments.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_NOTACOLLECTION">
			<summary>A return value indicating an unexpected argument type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_OVERFLOW">
			<summary>An error that indicates that a value could not be coerced to its expected representation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_PARAMNOTFOUND">
			<summary>A return value that indicates that one of the parameter DISPIDs does not correspond to a parameter on the method.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_PARAMNOTOPTIONAL">
			<summary>A return value that indicates that a required parameter was omitted.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_TYPEMISMATCH">
			<summary>A return value that indicates that one or more of the parameters could not be coerced.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNINTERFACE">
			<summary>A return value that indicates that the interface identifier passed in riid is not equal to IID_NULL.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNLCID">
			<summary>A return value that indicates that the member being invoked interprets string arguments according to the Locale ID (LCID), and the LCID is not recognized.  If the LCID is not needed to interpret arguments, this error should not be returned.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNNAME">
			<summary>A return value that indicates that one or more of the names were not known. The returned DISPIDs contain DISPID_UNKNOWN for each entry that corresponds to an unknown name.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.DocumentFrame">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_ABORT">
			<summary>A return value that may indicate an explicit cancellation action or some process that could no longer proceed after (for instance) both undo and rollback failed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_ACCESSDENIED">
			<summary>A return value that describes a general access denied error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_FAIL">
			<summary>Error HRESULT for a generic failure.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_HANDLE">
			<summary>A return value that indicates an invalid handle.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG">
			<summary>Error HRESULT for an invalid argument.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE">
			<summary>Error HRESULT for the request of a not implemented interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL">
			<summary>Error HRESULT for the call to a method that is not implemented.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_OUTOFMEMORY">
			<summary>Error HRESULT for out of memory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_PENDING">
			<summary>A return value that indicates the availability of an asynchronously accessed interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_POINTER">
			<summary>A return value that indicates that an invalid pointer, usually null, was passed as a parameter.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED">
			<summary>A return value that indicates that the result of the method call is outside of the error cases the client code can readily handle.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_BuildOutputWindowPane">
			<summary>This constant represents the GUID for the interface <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane"></see> which is implemented by the shell's OutputWindow tool window.  It is used by client code to display messages in the output window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_COMClassicPage">
			<summary>A Visual Studio component selector page GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_COMPlusPage">
			<summary>A Visual Studio component selector page GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_DefaultEditor">
			<summary>A common system defined editor GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ExternalEditor">
			<summary>A common editor GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_HTMEDAllowExistingDocData">
			<summary>GUID used to mark a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer"></see> in order to tell to the HTML editor factory to accept preexisting doc data.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_HtmlEditorFactory">
			<summary>GUID of the HTML editor factory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFile">
			<summary>A GUID constant used to specify that the type is a physical file on disk or the Web.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFolder">
			<summary>A GUID constant used to specify that the type is a physical folder on disk or the Web.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_SubProject">
			<summary>A GUID constant used to specify that the type is a nested hierarchy project.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_VirtualFolder">
			<summary>A GUID constant used to specify that the type is a non-physical folder.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_OutWindowDebugPane">
			<summary>A GUID constant used to specify the debug pane inside the output window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_OutWindowGeneralPane">
			<summary>The GUID of the pseudo service that returns the General output pane <see cref="F:Microsoft.VisualStudio.VSConstants.SID_SVsGeneralOutputWindowPane"></see> in the VS environment.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_SolutionPage">
			<summary>A Visual Studio component selector page GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_TextEditorFactory">
			<summary>GUID of the Text editor factory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsNewProjectPseudoFolder">
			<summary>String resource ID for Visual Studio pseudo-folder.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97">
			<summary>This GUID identifies the standard set of commands known by Visual Studio 97 (version 6).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewAll">
			<summary>The GUID for the highest abstraction task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCheckedTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCommentTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCompilerTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCurrentFileTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewHTMLTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewShortcutTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewUncheckedTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewUserTasks">
			<summary>The GUID for a certain flavor or task lists.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsUIHierarchyWindowCmds">
			<summary>A GUID that defines the command group related to the hierarchy window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown">
			<summary>GUID of the IUnknown COM interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this case on possible Code Views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this case populated with possible <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging"></see> debugging views which map to the same view as <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Designer">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this case to View Form designer views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Primary">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this case the default/primary view of the editor factory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method to get the Open With dialog, in this for a document or data text editor view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_UserChooseView">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97"></see>cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method which prompts the user to choose which user-defined view to use.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ADVF">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ADVISENOTSUPPORTED">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_BLANK">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANT_BINDTOSOURCE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANT_GETMONIKER">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANTCONVERT">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CLASSDIFF">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ENUM_NOMORE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_INVALIDHWND">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_INVALIDRECT">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOCACHE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOCONNECTION">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOSTORAGE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOT_INPLACEACTIVE">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOTRUNNING">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_OLEVERB">
			<summary>A legacy OLE error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_PROMPTSAVECANCELLED">
			<summary>The user was prompted to save but chose the Cancel button from the prompt message box.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_STATIC">
			<summary>The cache is for a static object and it already has a cache node.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_WRONGCOMPOBJ">
			<summary>The versions of COMPOBJ.DLL and OLE2.DLL on your machine are incompatible with each other.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.PropertyBrowserSID">
			<summary>Describes what component of the shell has just been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.S_FALSE">
			<summary>HRESULT for false.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.S_OK">
			<summary>Generic HRESULT for success.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.SID_SUIHostCommandDispatcher">
			<summary>The name of the Visual Studio service that implements <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.SID_SVsGeneralOutputWindowPane">
			<summary>Returns an IID_IVsOutputWindowPane interface of the General output pane in the Visual Studio environment.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.SID_SVsToolboxActiveXDataProvider">
			<summary>A Visual Studio toolbox service.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.StartupProject">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected, in this case in response to project startup.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_CodeWindow">
			<summary>Returns the GUID of the command associated with a change in UI context.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_Debugging">
			<summary>Specifies that UI context is the switch to a debugging window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_DesignMode">
			<summary>Returns the GUID of the command associated with a change to design mode in UI context.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_Dragging">
			<summary>Returns the GUID of the command associated with the UI drag/drop operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_EmptySolution">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_EmptySolution to return the GUID of the command associated with this UI state.  In this case the UI context is an empty solution.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_FullScreenMode">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_FullScreenMode to return the GUID of the command associated with this UI state.  In this case the UI context is that the Full Screen command from the View menu has been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_NoSolution">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_NoSolution to return the GUID of the command associated with this UI state.  In this case the UI context is that there is no solution.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionBuilding">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_SolutionBuilding to return the GUID of the command associated with this UI state.  In this case the UI context is Build solution or build project mode is in effect.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionExists">
			<summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_SolutionExists to return the GUID of the command associated with this UI state.  In this case the UI context is that a solution exists, though the number of projects loaded is not pertinent to this call.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasMultipleProjects">
			<summary>Packages may define a command that is associated with a change in UI context. Use UICONTEXT_SolutionHasMultipleProjects to return the GUID of the command associated with this UI state. In this case the UI context is that a solution exists and has multiple projects loaded.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasSingleProject">
			<summary>Packages may define a command that is associated with a change in UI context. Use UICONTEXT_SolutionHasMultipleProjects to return the GUID of the command associated with this UI state. In this case the UI context is that a solution exists and has a single project loaded.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UNDO_E_CLIENTABORT">
			<summary>Error HRESULT for a client abort.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UndoManager">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.UserContext">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_BUSY">
			<summary>A constant returned by interfaces to asynchronous behavior when the object in question in already busy.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_INCOMPATIBLEDOCDATA">
			<summary>A Visual Studio specific error HRESULT for "Incompatible document data".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PACKAGENOTLOADED">
			<summary>A Visual Studio specific error HRESULT that indicates "Package not loaded."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTALREADYEXISTS">
			<summary>A Visual Studio-specific error HRESULT that indicates that the "Project already exists."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTMIGRATIONFAILED">
			<summary>A Visual Studio specific error HRESULT that indicates "Project configuration failed."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTNOTLOADED">
			<summary>A Visual Studio-specific error HRESULT that indicates "Project not loaded."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SOLUTIONALREADYOPEN">
			<summary>A Visual Studio-specific error HRESULT that indicates "Solution already open."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SOLUTIONNOTOPEN">
			<summary>A Visual Studio-specific error HRESULT that indicates "Solution not open."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SPECIFYING_OUTPUT_UNSUPPORTED">
			<summary>Returned by build interfaces that have parameters for specifying an array of IVsOutput's but the implementation can only apply the method to all outputs.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_UNSUPPORTEDFORMAT">
			<summary><see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)"></see> returns this value if the document has a format that cannot be opened in the editor.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_E_WIZARDBACKBUTTONPRESS">
			<summary>An HRESULT value that indicates that the user hit the back button in a Visual Studio wizard.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_S_PROJECTFORWARDED">
			<summary>A Visual Studio-specific error HRESULT that indicates "Project forwarded."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VS_S_TBXMARKER">
			<summary>A Visual Studio-specific constant for a "Toolbox marker."</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSCOOKIE_NIL">
			<summary>A Visual Studio-specific constant that indicates that a cookie has not been set.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL">
			<summary>A Visual Studio item identifier that represents the absence of a project item. This value is used when there is no current selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT">
			<summary>A Visual Studio item identifier that represents the root of a project hierarchy and is used to identify the entire hierarchy, as opposed to a single item.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION">
			<summary>A Visual Studio item identifier that represents the currently selected item or items, which can include the root of the hierarchy.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSM_ENTERMODAL">
			<summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)"></see> that indicates the beginning of modality.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSM_EXITMODAL">
			<summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)"></see> that indicates the end of modality.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSM_TOOLBARMETRICSCHANGE">
			<summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)"></see> indicating that the command bar metrics have changed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2K">
			<summary>GUID for the Windows 2000 command set. This is a set of standard editor commands.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.WindowFrame">
			<summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID">
			<summary>Constants used in <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents"></see> to indicate a new selection state.  The selections may be propagated through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_DocumentFrame">
			<summary>Visual Studio tracks this selection automatically so it cannot be set via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)"></see>, but the value may be observed by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentElementValue(System.UInt32,System.Object@)"></see></summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_LastWindowFrame">
			<summary>The value of <see cref="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame"></see> before it received its current value.  It is guaranteed to be different from <see cref="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame"></see> unless both are empty.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_PropertyBrowserSID">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown"></see> of the active <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyBrowser"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_ResultList">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown"></see> of the active <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see> for list navigation commands.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_StartupProject">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown"></see> of the active StartupProject.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_UndoManager">
			<summary><see cref="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown"></see> of the active <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager"></see> object.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_UserContext">
			<summary>An event that indicates selection only by document windows that do not push selection context to the property browser.  The alternative case is <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_UserContext"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSSELELEMID.SEID_WindowFrame">
			<summary>Visual Studio tracks this selection automatically so it cannot be set via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)"></see>, but the value may be observed by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentElementValue(System.UInt32,System.Object@)"></see></summary>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID">
			<summary>These constants make some basic menu commands available to managed code.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ACTIVATEFILTER">
			<summary>Activate Filter </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BACKSPACE">
			<summary>Delete Backwards; Delete the current selection, or if no selection, the previous character.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BACKTAB">
			<summary>Tab Left; Move the caret back one tab stop.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL">
			<summary>Line Start; Move the caret to the start of the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL_EXT">
			<summary>Line Start Extend; Move the caret to the start of the line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL_EXT_COL">
			<summary>Line Start Extend Column; Move the caret to the start of the line, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOTTOMLINE">
			<summary>View Bottom; Move the caret to the last line in view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOTTOMLINE_EXT">
			<summary>View Bottom Extend; Move the caret to the last line in view, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CANCEL">
			<summary>Selection Cancel; Cancel the current selection moving the caret to the anchor point.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMENT_BLOCK">
			<summary>Comment Block; Comment out the selected block.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMENTBLOCK">
			<summary>Comment Block; Comment out the selected block.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMPLETEWORD">
			<summary>Complete Word; Display Word Completion based on the current language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COPY">
			<summary>Copy; Copy the current selection to the clipboard.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CUT">
			<summary>Cut; Cut the current selectionto the clipboard.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CUTLINE">
			<summary>Line Cut; Cut all selected lines, or the current line if no selection, to the clipboard..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETE">
			<summary>Delete; Delete the current selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEALLTEMPBOOKMARKS">
			<summary>Clear Bookmarks; Clear all unnamed bookmarks in the current document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEBLANKLINES">
			<summary>Delete Blank Lines; Delete all blank lines in the selection, or the current blank line if no selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETELINE">
			<summary>Delete Line; Delete all selected lines, or the current line if no selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETETOBOL">
			<summary>Delete To BOL; Delete from the caret position to the beginning of the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETETOEOL">
			<summary>Delete To EOL; Delete from the caret position to the end of the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWHITESPACE">
			<summary>Delete Horizontal White Space; Collapse white space in the selection, or delete white space adjacent to the caret if no selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWORDLEFT">
			<summary>Word Delete To Start; Delete the word to the left of the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWORDRIGHT">
			<summary>Word Delete To End; Delete the word to the right of the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOUBLECLICK">
			<summary>Double Click.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN">
			<summary>Line Down; Move the caret down one line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN_EXT">
			<summary>Line Down Extend; Move the caret down one line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN_EXT_COL">
			<summary>Line Down Extend Column; Move the caret down one line, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.END">
			<summary>Document End; Move the caret to the end of the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.END_EXT">
			<summary>Document End Extend; Move the caret to the end of the document, extending the selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL">
			<summary>Line End; Move the caret to the end of the line..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL_EXT">
			<summary>Line End Extend; Move the caret to the end of the line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL_EXT_COL">
			<summary>Line End Extend Column; Move the caret to the end of the line, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXTERNALLY_HANDLED_WIDGET_CLICK">
			<summary>Externally handled widget click;A mouse click event in the widget margin passed to an external handler. The widget margin is used to set breakpoints or bookmarks.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIND">
			<summary>Find; Find the occurance.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDAGAIN">
			<summary>Find Again; Repeat the find operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDNEXT">
			<summary>Find Next; Find the next occurance</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDNEXTWORD">
			<summary>Find Next Word; Find the next occurance of word.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDPREV">
			<summary>Find Prev; Find the previous occurance </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDPREVWORD">
			<summary>Find Prev Word; Find the previous occurance of word.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTCHAR">
			<summary>Line Start After Indentation; Move the caret to first non-white space character on the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTCHAR_EXT">
			<summary>Line Start After Indentation Extend; Move the caret to first non-white space character on the line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTNONWHITENEXT">
			<summary>Line Start After Indentation Next; Move the caret to the first non-white-space character on the next line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTNONWHITEPREV">
			<summary>Line Start After Indentation Next; Move the caret to the first non-white-space character on the previous line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATSELECTION">
			<summary>Format Selection; Format the currently selected text.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOBACK">
			<summary>Go Back; Go back one character.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOBRACE">
			<summary>Goto Brace; Move the caret forward to the matching brace.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOBRACE_EXT">
			<summary>Goto Brace Extend; Move the caret forward to the matching brace, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOLINE">
			<summary>Go To Line; Go to the indicated line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTONEXTBOOKMARK">
			<summary>Next Bookmark; Move the caret to the next unnamed bookmark.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOPREVBOOKMARK">
			<summary>Previous Bookmark; Move the caret to the previous unnamed bookmark.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HELPKEYWORD">
			<summary>Help Keyword</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HOME">
			<summary>Document Start; Move the caret to the start of the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HOME_EXT">
			<summary>Document Start Extend; Move the caret to the start of the document, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INDENT">
			<summary>Increase Line Indent; Increase Indent.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTFILE">
			<summary>Insert File As Text; Insert a file into the current document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ISEARCH">
			<summary>Incremental Search; Reverse Incremental Search.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ISEARCHBACK">
			<summary>Reverse Incremental Search.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LASTCHAR">
			<summary>Line Last Char; Move the caret after the last non-white space character on the line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LASTCHAR_EXT">
			<summary>Line Last Char Extend; Move the caret after the last non-white space character on the line, extending the selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT">
			<summary>Char Left; Move the caret left one character..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT_EXT">
			<summary>Char Left Extend; Move the caret left one character, extending the selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT_EXT_COL">
			<summary>Char Left Extend Column; Move the caret left one character, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NAVIGATETOURL">
			<summary>Open URL; Invoke the default browser and opens the URL under the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENFILE">
			<summary>Open File; Open file under caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENLINEABOVE">
			<summary>Line Open Above; Open a new line above the current line..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENLINEBELOW">
			<summary>Line Open Below: Open a new line below the current line..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENURL">
			<summary>Open URL; Invoke the default browser and opens the URL under the caret..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_COLLAPSE_TO_DEF">
			<summary>Collapse to Definitions; Outline Collapse To Definitions.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_HIDE_SELECTION">
			<summary>Hide Selection; Outline Hide Selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_STOP_HIDING_ALL">
			<summary>Stop Outlining; Outline Stop Hiding All.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_STOP_HIDING_CURRENT">
			<summary>Stop Hiding Current; Outline Stop Hiding Current.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_TOGGLE_ALL">
			<summary>Toggle All Outlining; Toggle all hidden regions.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_TOGGLE_CURRENT">
			<summary>Toggle Outlining Expansion; Outline Toggle Current.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEDN">
			<summary>Page Down; . Move the caret down one page. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEDN_EXT">
			<summary>Page Down Extend; Move the caret down one page, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEUP">
			<summary>Page Up; Move the caret up one page.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEUP_EXT">
			<summary>Page Up Extend; Move the caret up one page, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PARAMINFO">
			<summary>Parameter Info; Display Parameter Info based on the current language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PASTE">
			<summary>Paste; Paste the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.QUICKINFO">
			<summary>Quick Info; Display Quick Info based on the current language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REDO">
			<summary>Redo; Repeat the operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REPLACE">
			<summary>Replace; Replace the occurance.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REPLACE_ALL">
			<summary>Replace All; Replace all instances of the occurance.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RETURN">
			<summary>Break Line; Insert a line break at the current caret position.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT">
			<summary>Char Right; Move the caret right one character.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT_EXT">
			<summary>Char Right Extend; Move the caret right one character, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT_EXT_COL">
			<summary>Char Right Extend Column; Move the caret right one character, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLBOTTOM">
			<summary>Scroll Line Bottom; Scroll the current line to the bottom of the view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLCENTER">
			<summary>Scroll Line Center; Scroll the current line to the center of the view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLDN">
			<summary>Scroll Line Down; Scroll the document down one line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLLEFT">
			<summary>Scroll Column Left; Scroll the document left one column.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLPAGEDN">
			<summary>Scroll Page Down: Scroll the document down one page.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLPAGEUP">
			<summary>Scroll Page Up: Scroll the document up one page..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLRIGHT">
			<summary>Scroll Column Right; Scroll the document right one column.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLTOP">
			<summary>Scroll Line Top: Scroll the current line to the top of the view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLUP">
			<summary>Scroll Line Up: Scroll the document up one line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTALL">
			<summary>Select All; Select all of the document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTCURRENTWORD">
			<summary>Select Current Word; Select the word under the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTMODE">
			<summary>Select Mode; Toggle the selection mode.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELLOWCASE">
			<summary>Make Lowercase; Change the text in the current selection to all lower case.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELSWAPANCHOR">
			<summary>Swap Anchor; Swap the anchor and end points of the current selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTABIFY">
			<summary>Tabify Selection: Replace spaces in the current selection with tabs.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTITLECASE">
			<summary>Capitalize; Capitalize the first letter of words in the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTOGGLECASE">
			<summary>Toggle Case: Toggle the case of the text in the current selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELUNTABIFY">
			<summary>Untabify Selection; Replace tabs in the current selection with spaces.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELUPCASE">
			<summary>Make Uppercase; Change the text in the current selection to all upper case.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWCONTEXTMENU">
			<summary>Displays a context menu.  If unhandled this most editors display a default context menu without any language-specific commands.  If you want your own commands on this menu, handle the command and bring up a context menu yourself.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWMEMBERLIST">
			<summary>Show Member List; Display an object Member List based on the current language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TAB">
			<summary>Insert Tab; Insert a tab character at the current caret position.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLE_OVERTYPE_MODE">
			<summary>Overtype Mode; Toggle between insert and overtype insertion modes.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLECARETPASTEPOS">
			<summary>Paste Moves Caret; Toggle where the caret is positioned after a paste operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLESHORTCUT">
			<summary>Toggle Task List Shortcut; Toggle a task list shortcut on the current line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLETEMPBOOKMARK">
			<summary>Toggle Bookmark; Toggle an unnamed bookmark on the current line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLEVISSPACE">
			<summary>View White Space; Toggle the visibility of white space characters.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLEWORDWRAP">
			<summary>Toggle Word Wrap; Toggle Word Wrap mode.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOPLINE">
			<summary>View Top; Move the caret to the top line in view.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOPLINE_EXT">
			<summary>View Top Extend; Move the caret to the top line in view, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSECHAR">
			<summary>Char Transpose: Transpose the characters on either side of the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSELINE">
			<summary>Line Transpose; Transpose the current line and the line below.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSEWORD">
			<summary>Word Transpose; Transpose the words on either side of the caret.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOMMENT_BLOCK">
			<summary>Uncomment Selection; Uncomment the selected lines.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOMMENTBLOCK">
			<summary>Uncomment Block; Uncomment the selected block. If the block is not commented, make no change.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNDO">
			<summary>Undo; Undo the last operation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNINDENT">
			<summary>Decrease Line Indent; Line Unindent.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP">
			<summary>Line Up.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP_EXT">
			<summary>Line Up Extend; Move the caret up one line, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP_EXT_COL">
			<summary>Line Up Extend Column; Move the caret up one line, extending the column selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WIDGETMARGIN_LBTNDOWN">
			<summary> Widget Margin Left Button Down; A left button down event in the widget margin. The widget margin is used to set breakpoints or bookmarks.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT">
			<summary>Word Next; Move the caret right one word.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT_EXT">
			<summary>Word Next Extend; Move the caret right one word, extending the selection.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT_EXT_COL">
			<summary>Word Next Extend Column; Move the caret right one word, extending the column selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV">
			<summary>Word Previous; Move the caret left one word..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV_EXT">
			<summary>Word Previous Extend; Move the caret left one word, extending the selection..</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV_EXT_COL">
			<summary>Word Previous Extend Column; Move the caret left one word, extending the column selection.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants.VSStd97CmdID">
			<summary>These constants make some basic menu commands available to managed code.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.CloseSolution">
			<summary>Command id for "close solution".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Copy">
			<summary>Command id for "copy".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Cut">
			<summary>Command id for "cut".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Delete">
			<summary>Command id for "delete".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Exit">
			<summary>Command id for "exit".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileClose">
			<summary>Command id for "file close".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileNew">
			<summary>Command id for "file new".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.FileOpen">
			<summary>Command id for "file open".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Find">
			<summary>Command id for "find".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Goto">
			<summary>Command id for "go to".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.NewProject">
			<summary>Command id for "new project".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenProject">
			<summary>Command id for "open project".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.OpenSolution">
			<summary>Command id for "open solution".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PageSetup">
			<summary>Command id for "page setup".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Paste">
			<summary>Command id for "paste".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Print">
			<summary>Command id for "print".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.PrintPreview">
			<summary>Command id for "print preview".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Redo">
			<summary>Command id for "redo".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Replace">
			<summary>Command id for "replace".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Save">
			<summary>Command id for "save".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveAs">
			<summary>Command id for "save as".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveOptions">
			<summary>Command id for "save options".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveProjectItemAs">
			<summary>Command id for "save project item as".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveSolution">
			<summary>Command id for "save solution".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SaveSolutionAs">
			<summary>Command id for "save solution as".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.SelectAll">
			<summary>Command id for "select all".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ToolsOptions">
			<summary>Command id for "tools options".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.Undo">
			<summary>Command id for "undo".</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds">
			<summary>An enumeration of commands that apply to events unique to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_CancelLabelEdit">
			<summary>Occurs when the user hits the escape key and causes an editable tree node to turn back into static text.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_CommitLabelEdit">
			<summary>Occurs when a tree node turns from an editable entry field back into static text.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_DoubleClick">
			<summary>Occurs when the user double clicks the mouse on the tree's pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_EnterKey">
			<summary>Occurs when the user hits the Enter key while the tree's pane has focus.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_RightClick">
			<summary>Occurs when the user right clicks the mouse over the tree's pane.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_StartLabelEdit">
			<summary>Occurs when tree node text becomes an editable entry field.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Win32Methods">
			<summary>Provides Win32 window management functions.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Win32Methods.#ctor">
			<summary>Initializes a new instance of the class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Win32Methods.IsDialogMessageA(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG@)">
			<summary>Determines if a message is intended for a modeless dialog box.</summary>
			<param name="msg">The message in question.</param>
			<param name="hDlg">A handle to the child window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Win32Methods.SetParent(System.IntPtr,System.IntPtr)">
			<summary>Changes the parent window of the specified child window.</summary>
			<param name="hWndParent">The new parent window.</param>
			<param name="hWnd">The child window that should receive a new parent.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute">
			<summary>Defines the default registry root used to register VSPackage information. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute.#ctor(System.String)">
			<summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute"></see> object with the given registry root.</summary>
			<param name="root">The default registry root used to register VSPackage information.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute.Root">
			<summary>Gets the value of the default registry root for the VSPackage.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar">
			<summary>Used to change the control contained by the form to an IVsWindowPane.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor">
			<summary>Initializes a new instance of the class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider)">
			<summary>Initializes a new instance of the class and sets the service provider.</summary>
			<param name="sp">The service provider that the window can subsequently query to retrieve Visual Studio services.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider,System.Windows.Forms.Control)">
			<summary>Initializes a new instance of the class and sets the service provider as well as the control contained by the form.</summary>
			<param name="sp">The service provider that the window can subsequently query to retrieve Visual Studio services.</param>
			<param name="contained">The control contained by the form.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Dispose(System.Boolean)">
			<summary>Explicitly called to release resources.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar.GetBorder(Microsoft.VisualStudio.OLE.Interop.RECT[])">
			<summary>Return the client area of this form.</summary>
			<param name="rect">The left and top coordinates are both equal to zero. The right is equal to ClientSize.Width and the bottom is equal to ClientSize.Height.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar.SetBorderSpace(Microsoft.VisualStudio.OLE.Interop.RECT[])">
			<summary>Store the toolbar to the provided size rect and resizes the main pane to leave room for the commandbar.</summary>
			<param name="rect">The new desired bounds.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.SetSite(System.IServiceProvider)">
			<param name="sp"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.System.IServiceProvider.GetService(System.Type)">
			<param name="serviceType">The kind of service requested.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.System.Windows.Forms.IMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
			<summary>Provided processing for input mouse messages.</summary>
			<param name="m">A message from the toolbar.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarLocation">
			<summary>Gets and sets the value of the enumeration that describes the toolbar location.</summary>
			<returns>The enumeration is defined as:typedef enum {VSTWT_LEFT, VSTWT_TOP, VSTWT_RIGHT, VSTWT_BOTTOM} VSTWT_LOCATION;Which corresponds to toolbar locations of left, top, right and bottom.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DialogPage">
			<summary>Provides a standard dialog functionality for implementing Toolbox property sheets, ToolsOptions pages, or custom UI dialog boxes with support for the Visual Studio automation model, Windows Forms, and state persistence through the Visual Studio settings mechanism.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.#ctor">
			<summary>Creates a new dialog page object</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.Dispose(System.Boolean)">
			<summary>Releases the unmanaged resources used by a dialog page class and optionally releases the managed resources; the parent class, <see cref="T:System.ComponentModel.Component"></see> supports unmanaged resources.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingsFromStorage">
			<summary>Called by Visual Studio to load a dialog page's settings from local storage, generally the registry.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingsFromXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader)">
			<summary>Called by Visual Studio to load a dialog page's settings from the Visual Studio settings storage on disk.</summary>
			<param name="reader">[in]An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader"></see> interface provided by the environment to the VSPackage providing read access to the Visual Studio settings file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnActivate(System.ComponentModel.CancelEventArgs)">
			<summary>Handles Windows Activate messages from the Visual Studio environment.</summary>
			<param name="e">[in] Arguments to event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnApply(Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs)">
			<summary>Handles Apply messages from the Visual Studio environment.</summary>
			<param name="e">[in] Arguments to event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnClosed(System.EventArgs)">
			<summary>Handles Close messages from the Visual Studio environment.</summary>
			<param name="e">[in] Arguments to event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnDeactivate(System.ComponentModel.CancelEventArgs)">
			<summary>Handles Deactive messages from the Visual Studio environment.</summary>
			<param name="e">[in] Arguments to event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSettingsToStorage">
			<summary>Called by Visual Studio to store a dialog page's settings in local storage, generally the registry.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSettingsToXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
			<summary>Called by Visual Studio to store a dialog page's settings to the Visual Studio settings storage on disk.</summary>
			<param name="Writer">[in]A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter"></see> interface provided by the environment to the VSPackage providing write access to the Visual Studio settings file.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.AutomationObject">
			<summary>Gets the DTE automation model object for a given instance of a dialog page class.</summary>
			<returns>An instance of the automation object, or null if no automation support is available.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.SettingsRegistryPath">
			<summary>Gets and sets the sub-key under the Visual Studio version specific root for storing a <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see> class's settings data.</summary>
			<returns>A string is returned containing the sub-key of the Visual Studio version specific registry tree for containing the settings for a given dialog page..</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.DialogPage.Window">
			<summary>Gets the window an instance of <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see> that it uses as its user interface.</summary>
			<returns>An <see cref="T:System.Windows.Forms.IWin32Window"></see> providing the handle to the window acting as the user interface for dialog page.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind">
			<summary>An enumeration that describes dialog page apply behavior.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.Apply">
			<summary>Allows the changes to be applied</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.Cancel">
			<summary>Cancels the apply event and navigates to the page cancelling the event.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.CancelNoNavigate">
			<summary>Cancels the apply event and returns the active page, not the page canceling the event.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs">
			<summary>Event arguments that allow the <see cref="M:Microsoft.VisualStudio.Shell.DialogPage.OnApply(Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs)"></see> method to indicate how to handle the apply event.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs.#ctor">
			<summary>Initializes a new instance of this class.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ErrorListProvider">
			<summary>This task provider is used to provide tasks for the Visual StudioError List window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.#ctor(System.IServiceProvider)">
			<summary>Creates an ErrorListProvider object.</summary>
			<param name="provider"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.BringToFront">
			<summary>Activates the Error List window and makes it visible.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Dispose(System.Boolean)">
			<summary>Activates the Error List window and makes it visible.</summary>
			<param name="disposing">Parameter is set to true if the task list can be disposed, that is, if the <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection"></see> contains tasks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Finalize">
			<summary>Destructor for ErrorListProvider.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.ForceShowErrors">
			<summary>Shows the errors in the Error List window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Show">
			<summary>Creates a Error List tool window and shows the errors in it. </summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ErrorListProvider.VsTaskList">
			<summary>Returns the service that allows VSPackage implementers to store and manage their tasks as a part of the environment's task list.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList"></see> object.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ErrorTask">
			<summary>This class implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsErrorItem"></see>. </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorTask.#ctor">
			<summary>Creates an <see cref="T:Microsoft.VisualStudio.Shell.ErrorTask"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ErrorTask.#ctor(System.Exception)">
			<summary>Creates an <see cref="T:Microsoft.VisualStudio.Shell.ErrorTask"></see> object.</summary>
			<param name="error">An <see cref="T:System.Exception"></see> error object.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ErrorTask.HierarchyItem">
			<summary>Gets and sets the hierarchy item associated with this task.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> item associated with the task.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.EventSinkCollection">
			<summary>Maps objects to and from integer "cookies". </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.#ctor">
			<summary>Creates an EventSinkCollection object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Add(System.Object)">
			<summary>Adds an event synchronization and returns its cookie.</summary>
			<returns>Returns a uint specifying the event synchronization added.</returns>
			<param name="o">An Object to be added to the event synchronization collection <see cref="T:System.Collections.ArrayList"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Clear">
			<summary>Removes all event synchronizations.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Remove(System.Object)">
			<summary>Removes the specified event synchronization from the collection.</summary>
			<param name="obj">The object specifying the event to be removed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.RemoveAt(System.UInt32)">
			<summary>Removes the event synchronization specified by the cookie integer returned from the <see cref="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Add(System.Object)"></see> method.</summary>
			<param name="cookie">Specifies the particular event synchronization added in <see cref="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Add(System.Object)"></see>. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.SetAt(System.UInt32,System.Object)">
			<summary>Updates the event synchronization associated with the given cookie.</summary>
			<param name="cookie">A cookie specifying a particular event synchronization.</param>
			<param name="value">An object to which the event sink is set.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>Microsoft Internal Only.</summary>
			<returns>Returns an <see cref="T:System.Collections.IEnumerator"></see>.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.EventSinkCollection.Count">
			<summary>Returns the total number of synchronizations in the collection.</summary>
			<returns>Returns an int containing the number of events sinks in the collection.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.EventSinkCollection.Item(System.UInt32)">
			<param name="cookie"> </param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem">
			<summary>Provides the ability to dynamically configure <see cref="T:System.Drawing.Design.ToolboxItem"></see>, including modifying their reflection accessible metadata.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IConfigureToolboxItem.ConfigureToolboxItem(System.Drawing.Design.ToolboxItem)">
			<summary>Called by the Toolbox service to configure <see cref="T:System.Drawing.Design.ToolboxItem"></see> objects provided by specified assemblies.</summary>
			<param name="item">[in] a <see cref="T:System.Drawing.Design.ToolboxItem"></see> object whose configuration is to be modified.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute">
			<summary>Provides information for the Visual Studio splash screen and the Help About dialog box when applied to a <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>-derived class or a class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see>. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.#ctor(System.Boolean,System.String,System.String,System.String)">
			<summary>Creates a new InstalledProductRegistrationAttribute instance to register your package with the Help About dialog box and enables it to present information on the Visual Studio splash screen.</summary>
			<param name="productName"> </param>
			<param name="productId"> </param>
			<param name="useInterface"> </param>
			<param name="productDetails"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>This method, which is called to register this attribute with the given context, inserts registration information about a VSPackage when called by an external registration tool such as regpkg.exe. </summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. </summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.IconResourceID">
			<summary>Gets or sets a value that represents the resource ID of the icon associated with the product.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductDetails">
			<summary>Gets or sets a value that contains a detailed description of the product.</summary>
			<returns>A detailed description of the product.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductDetailsResourceID">
			<summary>Gets or sets a value for the product details resource ID.</summary>
			<returns>Resource ID for the product details.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductId">
			<summary>Gets or sets a value for the product ID.</summary>
			<returns>The ID of the product.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductName">
			<summary>Gets or sets a value for the name of the product.</summary>
			<returns>The name of the product.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductNameResourceID">
			<summary>Gets or sets a value that represents the resource ID corresponding to the product name.</summary>
			<returns>Resource ID corresponding to the product name.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UseInterface">
			<summary>Gets or sets a value indicating whether the product installation uses the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct"></see> interface to display a bitmap in the splash screen and information in the About dialog box on the Help menu.</summary>
			<returns>The value is true if the product installation supports the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct"></see> interface and false otherwise.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UsePackage">
			<summary>Gets or sets a value indicating whether the product installation uses the VSPackage ID.</summary>
			<returns>The value is TRUE if the product installation uses the VSPackage ID, and FALSE otherwise.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.IProfileManager">
			<summary>Interface implemented by classes supporting VSPackages by persisting their state information through the Visual Studio settings mechanism.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.LoadSettingsFromStorage">
			<summary>Reads a VSPackage's configuration from local storage (typically the registry) and updates its state.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.LoadSettingsFromXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader)">
			<summary>Writes a VSPackage's configuration to disk using the Visual Studio settings mechanism when the export option of an Import/Export Settings feature available on the IDE’s Tools menu is selected by a user.</summary>
			<param name="reader">[in]A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader"></see> interface provided by the environment to the VSPackage providing read access to the Visual Studio settings file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.SaveSettingsToStorage">
			<summary>Writes a VSPackage's configuration to local storage (typically the registry) following state update.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IProfileManager.SaveSettingsToXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
			<summary>Reads a VSPackage's configuration to disk using the Visual Studio settings mechanism when an import option of the Import/Export Settings feature, available on the IDE’s Tools menu, is selected by a user.</summary>
			<param name="writer">[in]A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter"></see> interface provided by the environment to the VSPackage providing write access to the Visual Studio settings file.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.IResXResourceService">
			<summary>An abstraction layer that lets clients control the resx readers and writers used within Visual Studio.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceReader(System.String,System.Boolean)">
			<summary>Returns a resx resource reader that matches a given a resXFullName.</summary>
			<param name="useResXDataNodes">If this value is true the reader returns one or more <see cref="T:System.Resources.ResXDataNode"></see>s instead of the object type the resource becomes at runtime in order to figure out which files the resx references</param>
			<param name="resXFullName">Creates a reader for the specified file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceReader(System.IO.TextReader,System.Boolean,System.String)">
			<summary>Returns a resx resource reader given a basepath and name.</summary>
			<param name="useResXDataNodes">If this value is true the reader returns one or more <see cref="T:System.Resources.ResXDataNode"></see>s instead of the object type the resource becomes at runtime in order to figure out which files the resx references</param>
			<param name="basePath">The path of the resource file.</param>
			<param name="textReader">The <see cref="T:System.IO.TextReader"></see> that is wrapped by the returned <see cref="T:System.Resources.IResourceReader"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceWriter(System.String)">
			<summary>Returns a resx resource writer given resXFullName.</summary>
			<param name="resXFullName">Creates a reader for the specified file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceWriter(System.IO.TextWriter,System.String)">
			<summary>Returns a resx resource writer given a textWriter and basepath.</summary>
			<param name="textWriter">The <see cref="T:System.IO.TextWriter"></see> that is wrapped by the returned <see cref="T:System.Resources.IResourceWriter"></see>.</param>
			<param name="basePath">The path of the resource file.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.LocalizableProperties">
			<summary><see cref="T:Microsoft.VisualStudio.Shell.LocalizableProperties"></see> provides a class that supplies custom type information on localizable properties for an object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.#ctor">
			<summary>This default constructor creates a <see cref="T:Microsoft.VisualStudio.Shell.LocalizableProperties"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.CreateDesignPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
			<summary>Returns a <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor"></see> wrapper on the given property descriptor.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor"></see>.</returns>
			<param name="p">Property descriptor.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetAttributes">
			<summary>Gets a collection of attributes for this component.</summary>
			<returns>Returns a collection of attributes.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetClassName">
			<summary>Returns the class name of this object.</summary>
			<returns>A string containing the class name.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetComponentName">
			<summary>Returns the name of this object.</summary>
			<returns>A string containing the component name.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetConverter">
			<summary>Returns a type converter for this object.</summary>
			<returns>Returns a <see cref="T:System.ComponentModel.TypeConverter"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetDefaultEvent">
			<summary>Returns the default event for this object.</summary>
			<returns>Returns an <see cref="T:System.ComponentModel.EventDescriptor"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetDefaultProperty">
			<summary>Gets the default property for a component.</summary>
			<returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEditor(System.Type)">
			<summary>Retrieves the editor for this object.</summary>
			<returns>Returns the editor object.</returns>
			<param name="editorBaseType">A <see cref="T:System.Type"></see> that represents the base type of the editor you want to find. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEvents">
			<summary>Gets the collection of events for a specified component.</summary>
			<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events for this component.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEvents(System.Attribute[])">
			<summary>Gets the collection of events for a specified component using a specified array of attributes as a filter.</summary>
			<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> with the events that match the specified attributes for this component.</returns>
			<param name="attributes">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetProperties">
			<summary>Gets the collection of properties.</summary>
			<returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetProperties(System.Attribute[])">
			<summary>Returns the properties for selected object using the attribute array as a filter.</summary>
			<returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>.</returns>
			<param name="attributes">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
			<summary>Returns the brows-able object.</summary>
			<returns>Returns the brows-able object.</returns>
			<param name="pd"><see cref="T:System.ComponentModel.PropertyDescriptor"></see> object.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.LogicalView">
			<summary>This enumeration lists the supported logical views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Any">
			<summary>The corresponding GUID value is FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Code">
			<summary>The corresponding GUID value is 7651A701-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Debugging">
			<summary>The corresponding GUID value is 7651A700-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Designer">
			<summary>The corresponding GUID value is 7651A702-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Primary">
			<summary>The corresponding GUID value is 00000000-0000-0000-0000-000000000000.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.ProjectSpecific">
			<summary>The corresponding GUID value is 80A3471A-6B87-433E-A75A-9D461DE0645F.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.Text">
			<summary>The corresponding GUID value is 7651A703-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.LogicalView.UserChoose">
			<summary>The corresponding GUID value is 7651A704-06E5-11D1-8EBD-00A0C90F26EA.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute">
			<summary>Defines the Windows Installer component ID. The component ID is used by the Windows Installer to indicate the installation path to the VSPackage.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute.#ctor(System.String)">
			<summary>This constructor creates a new MsiComponentIdAttribute object.</summary>
			<param name="id">The Windows Installer component ID. The MSI component registration ID is used to indicate the installation path to the component within the Windows Installer.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute.Id">
			<summary>The Id property returns a string containing the Windows Installer component registration ID.</summary>
			<returns>Returns a string containing the Windows Installer component registration ID.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.MsiTokenAttribute">
			<summary>Defines a token string for the MSI installer.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.MsiTokenAttribute.#ctor(System.String,System.String)">
			<summary>Creates an MsiTokenAttribute object.</summary>
			<param name="name">Name of the MsiTokenAttribute.</param>
			<param name="value">Value of the MsiTokenAttribute.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.MsiTokenAttribute.Name">
			<summary>Returns the MsiTokenAttribute name.</summary>
			<returns>Returns a string containing the MsiTokenAttribute name.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.MsiTokenAttribute.Value">
			<summary>Returns the MsiTokenAttribute value.</summary>
			<returns>Returns a string containing the MsiTokenAttribute value.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.OleDataObject">
			<summary>A managed code interop for the IOleDataObject interface.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor">
			<summary>Initializes a new instance of the class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
			<summary>Initializes a new instance of the class.</summary>
			<param name="oleData">The underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(System.Runtime.InteropServices.ComTypes.IDataObject)">
			<summary>Initializes a new instance of the class.</summary>
			<param name="comData">The underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(System.Windows.Forms.IDataObject)">
			<summary>Initializes a new instance of the class.</summary>
			<param name="winData">The underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)">
			<summary>Establishes a connection between the data object and an advise sink.</summary>
			<param name="pFormatetc">Pointer to a FORMATETC structure that defines the format, target device, aspect, and medium that will be used for future notifications. For example, one sink may want to know only when the bitmap representation of the data in the data object changes. Another sink may be interested in only the metafile format of the same object. Each advise sink is notified when the data of interest changes. This data is passed back to the advise sink when notification occurs.</param>
			<param name="pdwConnection">Pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection (by passing it to <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DUnadvise(System.UInt32)"></see>. If this value is zero, the connection was not established.</param>
			<param name="pAdvSink">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink"></see> interface on the advisory sink that will receive the change notification.</param>
			<param name="ADVF">DWORD that specifies a group of flags for controlling the advisory connection. Valid values are from the enumeration ADVF. However, only some of the possible ADVF values are relevant for this method.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DUnadvise(System.UInt32)">
			<summary>Terminates a connection previously established through <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)"></see>.</summary>
			<param name="dwConnection">DWORD token that specifies the connection to remove. Use the value returned by <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)"></see> when the connection was originally established.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.EnumDAdvise(Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA@)">
			<summary>Creates an enumerator to iterate through the current advisory connections.</summary>
			<param name="ppenumAdvise">Address of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA"></see>* pointer variable that receives the interface pointer to the new enumerator object. If the implementation sets *ppenumAdvise to NULL, there are no connections to advise sinks at this time.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.EnumFormatEtc(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC@)">
			<summary>Creates an enumerator to iterate through the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structures supported by the data object.</summary>
			<param name="dwDirection">Direction of the data through a value from the enumeration <see cref="T:Microsoft.VisualStudio.OLE.Interop.DATADIR"></see>.</param>
			<param name="ppenumFormatEtc">Address of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC"></see>* pointer variable that receives the interface pointer to the new enumerator object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetCanonicalFormatEtc(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
			<summary>Retrieves a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that is logically equivalent to one that is more complex.</summary>
			<param name="pformatetcOut">Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to pFormatetcIn.</param>
			<param name="pformatectIn">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])"></see>. The TYMED member is not significant in this case and should be ignored.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
			<summary>Transfers data from the data object to the client. The pformatetcIn parameter must specify a storage medium type of <see cref="F:Microsoft.VisualStudio.OLE.Interop.TYMED.TYMED_MFPICT"></see>.</summary>
			<param name="pRemoteMedium">Pointer to the STGMEDIUM structure that indicates the storage medium containing the returned data through its tymed member, and the responsibility for releasing the medium through the value of its punkOuter member.</param>
			<param name="pformatetcIn">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device to use when passing the data.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
			<summary>Similar to <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])"></see>, except the client must allocate the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM"></see> structure.</summary>
			<param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the tymed member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
			<param name="pRemoteMedium">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM"></see> structure that defines the storage medium containing the data being transferred.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.QueryGetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
			<summary>Determines whether the data object supports a particular <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure for transferring data.</summary>
			<param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the tymed member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)">
			<summary>Transfers data from the client to the data object.</summary>
			<param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC"></see> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the tymed member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
			<param name="pmedium">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM"></see> structure that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])"></see>. The caller must also free the medium. The implementation of this method must always supply a value of NULL for the punkForRelease member of the STGMEDIUM structure to which this parameter points.</param>
			<param name="fRelease">If TRUE, the data object called, which implements <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)"></see>, owns the storage medium after the call returns.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs">
			<summary>The set of arguments passed to an <see cref="T:Microsoft.VisualStudio.Shell.OleMenuCommand"></see> object when the <see cref="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object)"></see> function is called.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.#ctor(System.Object,System.IntPtr)">
			<summary>This overloaded constructor initializes the instance of OleMenuCmdEventArgs.</summary>
			<param name="inParam">The input parameter to the command function.</param>
			<param name="outParam">A pointer to the parameter returned by the function.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.OleMenuCommand">
			<summary>This class is an expansion of the <see cref="T:System.ComponentModel.Design.MenuCommand"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
			<summary>Builds a new OleMenuCommand.</summary>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
			<summary>Builds a new OleMenuCommand.</summary>
			<param name="Text">The text of the command.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
			<summary>Builds a new OleMenuCommand.</summary>
			<param name="statusHandler">The event handler called when the command's status changes.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
			<summary>Builds a new OleMenuCommand.</summary>
			<param name="Text">The text of the command.</param>
			<param name="statusHandler">The event handler called when the command's status changes.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
			<summary>Builds a new OleMenuCommand.</summary>
			<param name="beforeQueryStatus">Event handler called when a client requests the command status.</param>
			<param name="statusHandler">The event handler called when the command's status changes.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
			<summary>Builds a new OleMenuCommand.</summary>
			<param name="Text">The text of the command.</param>
			<param name="beforeQueryStatus">Event handler called when a client requests the command status.</param>
			<param name="statusHandler">The event handler called when the command's status changes.</param>
			<param name="invokeHandler">The event handler called to execute the command.</param>
			<param name="id">ID of the command.</param>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.OleMenuCommand.BeforeQueryStatus">
			<summary>Event fired when a client requests the status of the command.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.DynamicItemMatch(System.Int32)">
			<summary>Allows a dynamic item command to match the subsequent items in its list. This must be overridden when implementing a menu via How to: Dynamically Add a Menu Item using DYNAMICITEMSTART.</summary>
			<param name="cmdId">Command ID.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object)">
			<summary>Executes the command.</summary>
			<param name="inArg">The parameter passed to the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object,System.IntPtr)">
			<summary>Executes the command.</summary>
			<param name="outArg">The parameter returned by the command.</param>
			<param name="inArg">The parameter passed to the command.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.MatchedCommandId">
			<summary>Gets or sets a value that represents the command ID.</summary>
			<returns>The command id that was most recently used to match this command.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.OleStatus">
			<summary>Gets the OLE command status code for this menu item.</summary>
			<returns>An integer containing a mixture of status flags that reflects the state of this menu item.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.Text">
			<summary>Gets or sets the text for the command.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.OleMenuCommandService">
			<summary>This class derives from the <see cref="T:System.ComponentModel.Design.MenuCommandService"></see> class and implements <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see>. <see cref="T:System.ComponentModel.Design.MenuCommandService"></see> is the managed class used to add handlers for menu commands and to define verbs.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.#ctor(System.IServiceProvider)">
			<summary>Creates a new menu command service.</summary>
			<param name="serviceProvider">The service provider that this service uses to obtain other services. If the service is being used with a designer, this should be the service provider for the designer (such as the <see cref="T:System.ComponentModel.Design.DesignSurface"></see> instance).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
			<summary>Creates a new menu command service.</summary>
			<param name="serviceProvider">The service provider that this service uses to obtain other services. If the service is being used with a designer, this should be the service provider for the designer (such as the <see cref="T:System.ComponentModel.Design.DesignSurface"></see> instance).</param>
			<param name="parentCommandTarget">Allows the service to defer command searching to a parent IOleCommandTarget if the command is not found in this object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
			<summary>Can be used to invoke any command within Visual Studio.</summary>
			<returns>true if the invocation succeeded; otherwise, false.</returns>
			<param name="commandID">The command ID of the command to search for and execute.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID,System.Object)">
			<summary>Can be used to invoke any command within Visual Studio.</summary>
			<returns>true if the invocation succeeded; otherwise, false.</returns>
			<param name="arg">The optional command argument.</param>
			<param name="commandID">The command ID of the command to search for and execute.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Executes the selected command.</summary>
			<returns>An HRESULT code indicating the success or failure of the call.  The following HRESULTs may be returned:ValueDescription<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>The command was successfully invoked.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP"></see>The group guid did not match the commandID’s Guid property for any command or verb.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED"></see>The group was found, but there is no command or verb with an ID that matches.  This is also returned if the OleStatus property of a command that was found returns zero.</returns>
			<param name="nCmdId">System.UInt32 nCmdId. The ID code of the command.  This implementation maps nCmdId to CommandID.ID.</param>
			<param name="guidGroup">System.Guid guidGroup. The menu group.  This implementation maps the group to CommandID.Guid.</param>
			<param name="pIn">System.Object[] pIn. Actual command options.  This implementation ignores this parameter.</param>
			<param name="nCmdExcept">System.UInt32 nCmdExcept. Count of command options.  This implementation ignores this parameter.</param>
			<param name="vOut">System.IntPtr vOut. Output data for the command.  This implementation ignores this parameter.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<summary>Sets command status.</summary>
			<returns>An HRESULT code indicating the success or failure of the call.  The following HRESULTs may be returned:ValueDescription<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>The command was successfully invoked.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP"></see>The group guid did not match the commandID’s Guid property for any command or verb.<see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED"></see>The group was found, but there is no command or verb with an ID that matches.  This is also returned if the OleStatus property of a command that was found returns zero.</returns>
			<param name="nCmdId">System.UInt32 nCmdId. The ID code of the command.  This implementation maps nCmdId to CommandID.ID.</param>
			<param name="guidGroup">System.Guid guidGroup. The menu group.  This implementation maps the group to CommandID.Guid.</param>
			<param name="oleCmd">Microsoft.OLE.Interop._tagOLECMD[] oleCmd. A command structure that contains data about the status of the command.</param>
			<param name="oleText">System.IntPtr oleText. A pointer to a text BSTR.  If the command is a verb the name of the verb will be filled in here.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)">
			<summary>Called by a menu command when its status has changed.</summary>
			<param name="e">Signifies that there has been a change in <see cref="T:System.Windows.Forms.Design.MenuCommands"></see> (added or removed) on the related object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
			<summary>Shows the shortcut menu with the given command ID at the given location.</summary>
			<param name="y">The vertical position, in screen coordinates, of the top, left corner of the shortcut menu. If the shortcut menu does not fit on the screen, the operating system relocates it to fit.</param>
			<param name="menuID">A command ID representing the shortcut menu to show.</param>
			<param name="x">The horizontal position, in screen coordinates, of the top, left corner of the shortcut menu. If the shortcut menu does not fit on the screen, the operating system relocates it to fit.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.Package">
			<summary>Provides a managed implementation of the VSIP interfaces required to create a fully functional VSPackage.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.#ctor">
			<summary>This constructor creates a new Package object.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized">
			<summary>Event generated whenever Visual Studio initializes its Toolbox.</summary>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.Package.ToolboxUpgraded">
			<summary>Event generated whenever Visual Studio upgrades its Toolbox.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.AddOptionKey(System.String)">
			<summary>Adds a user option key name into the list of option keys.</summary>
			<param name="name">The name of the option key to add. An option key name must not have any periods in it.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.CreateInstance(System.Guid@,System.Guid@,System.Type)">
			<summary>Creates the specified COM object using the Visual Studio's local registry CLSID object.</summary>
			<returns>An instance of the created object.</returns>
			<param name="type">The managed type of the object to return.</param>
			<param name="iid">The interface IID the object implements.</param>
			<param name="clsid">The CLSID of the object to create.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.CreateTool(System.Guid@)">
			<summary>Enables derived classes to provide an implementation if necessary.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if successful, otherwise returns an error code.</returns>
			<param name="persistenceSlot">The GUID of the tool window that should be created.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type,System.Int32)">
			<summary>Creates a tool window of the specified type with the specified ID.</summary>
			<returns>An instance of the requested tool window.</returns>
			<param name="toolWindowType">The type of tool window to create.</param>
			<param name="id">The tool window ID. This is zero for a single instance tool window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Dispose(System.Boolean)">
			<summary>Releases the resources used by the <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> object.</summary>
			<param name="disposing">true if the object is being disposed, false if it is being finalized.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.FindToolWindow(System.Type,System.Int32,System.Boolean)">
			<summary>Returns the tool window corresponding to the specified type and ID.</summary>
			<returns>Returns an instance of the requested tool window. If create is false and the tool window does not exist, null is returned.</returns>
			<param name="create">If true, the tool window is created if it does not exist.</param>
			<param name="toolWindowType">The type of tool window to create.</param>
			<param name="id">The tool window ID. This is zero for a single instance tool window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetAutomationObject(System.String)">
			<summary>Returns the automation object for the VSPackage.</summary>
			<returns>An instance of the automation object, or null if no automation support is available.</returns>
			<param name="name">The name of the automation object to return. If name is null, GetAutomationObject returns the default automation object for the VSPackage.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetDialogPage(System.Type)">
			<summary>Gets the requested dialog page.</summary>
			<returns>An instance of the requested page.</returns>
			<param name="dialogPageType">The type of dialog page to retrieve.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetGlobalService(System.Type)">
			<param name="serviceType"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetOutputPane(System.Guid,System.String)">
			<summary>Gets the requested output window.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane"></see> interface. Returns null in case of failure.</returns>
			<param name="page">The GUID corresponding to the pane. (See <see cref="T:Microsoft.VisualStudio.VSConstants"></see> class for the GUIDs which correspond to output panes.)</param>
			<param name="caption">The caption to create if the pane does not exist.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetProviderLocale">
			<summary>Returns the locale associated with this service provider.</summary>
			<returns>Returns the locale identifier for the service provider.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.GetService(System.Type)">
			<summary>Gets type-based services from the VSPackage service container.</summary>
			<returns>An instance of the requested service, or null if the service could not be found.</returns>
			<param name="serviceType">The type of service to retrieve.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Initialize">
			<summary>Called when the VSPackage is loaded by Visual Studio.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<param name="nCmdId"> </param>
			<param name="guidGroup"> </param>
			<param name="pIn"> </param>
			<param name="nCmdExcept"> </param>
			<param name="vOut"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<param name="nCmdId"> </param>
			<param name="guidGroup"> </param>
			<param name="oleCmd"> </param>
			<param name="oleText"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
			<summary>Internal IServiceProvider implementation.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise it returns an error code.</returns>
			<param name="sid">GUID of the service.</param>
			<param name="iid">GUID of the requested interface</param>
			<param name="ppvObj">Pointer to the object requested.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.Close">
			<summary>Internal implementation of the Close method.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.GetAutomationObject(System.String,System.Object@)">
			<summary>Enables a VSPackage to participate in the <see cref="T:EnvDTE.DTE"></see> automation object model.</summary>
			<param name="propName">String containing the automation property name.</param>
			<param name="auto">Specifies the automation object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.GetPropertyPage(System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE[])">
			<summary>Proffers access to the Tools menu Options and the property pages of the Customize Toolbox dialog boxes.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise it returns an error code.</returns>
			<param name="rguidPage">Unique identifier of the requested property page.</param>
			<param name="ppage">Specifies the property page whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE"></see> structure.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.QueryClose(System.Int32@)">
			<summary>Called to ask the VSPackage if the Visual Studio shell can be closed.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise it returns an error code.</returns>
			<param name="close">Set canClose to false if you want to prevent the shell from closing</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.ResetDefaults(System.UInt32)">
			<summary>Resets Toolbox defaults.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, otherwise it returns an error code.</returns>
			<param name="grfFlags">Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS"></see> enumeration</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPackage.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>Initializes the VSPackage in the Visual Studio environment.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="sp"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
			<summary>Loads user options for a given solution.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pPersistance"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence"></see> object.</param>
			<param name="options">User options whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS"></see></param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
			<summary>Reads user options for a given solution.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pStream"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream"></see> object from which the VSPackage should read the user-specific options</param>
			<param name="pszKey">Name of the stream.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
			<summary>Saves user options for a given solution.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pPersistance"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
			<summary>Writes user options for a given solution.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pStream"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IStream"></see> object to which the VSPackage writes the user-specific options.</param>
			<param name="pszKey">Name of the stream.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory.CreateToolWindow(System.Guid@,System.UInt32)">
			<summary>Creates a tool window of the specified type with the specified ID.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="toolWindowType">Type of the window to be created.</param>
			<param name="id">Instance ID</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ExportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
			<summary>This method implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings"></see> Interface used to manage profiles and import/export settings to XML files.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="writer"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter"></see> object.</param>
			<param name="strPageGuid">GUID of the page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ImportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,System.UInt32,System.Int32@)">
			<summary>This method implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings"></see> Interface used to manage profiles and import/export settings to XML files.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="reader"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader"></see> object.</param>
			<param name="strPageGuid">GUID of the page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.OnLoadOptions(System.String,System.IO.Stream)">
			<summary>Invoked by the package class when there are options to be read out of the solution file.</summary>
			<param name="stream">The stream to load the option data from.</param>
			<param name="key">The name of the option key to load.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.OnSaveOptions(System.String,System.IO.Stream)">
			<summary>Invoked by the <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> class when there are options to be saved to the solution file. </summary>
			<param name="stream">The stream to save the option data to.</param>
			<param name="key">The name of the option key to save.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Guid)">
			<param name="packageGuid"> </param>
			<param name="resourceData"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Resources.ResourceManager)">
			<summary>Parses an embedded text resource of appropriate format for information about which items should be added to the Toolbox.</summary>
			<param name="localizedCategories">A resource manager that provides localized lookup names for the categories provided in the resource data. This parameter can be null, in which case the category names are directly used.</param>
			<param name="resourceData">A text reader that provides toolbox item data in the format described in Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.QueryClose(System.Boolean@)">
			<param name="canClose"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.RegisterEditorFactory(Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory)">
			<summary>Registers an editor factory with Visual Studio.</summary>
			<param name="factory">The editor factory to register.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.RegisterProjectFactory(Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory)">
			<summary>Registers a project factory with Visual Studio.</summary>
			<param name="factory">The project factory to register.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.ShowOptionPage(System.Type)">
			<summary>Displays a specified tools options page.</summary>
			<param name="optionsPageType">The options page to open. The options page is identified by the GUID of the optionsPageType object passed in.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
			<summary>Adds the given service to the VSPackage's service container.</summary>
			<param name="serviceType">Type of service to add.</param>
			<param name="serviceInstance">Service object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
			<summary>Adds the given service to the VSPackage's service container.</summary>
			<param name="callback"><see cref="T:System.ComponentModel.Design.ServiceCreatorCallback"></see> object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
			<param name="serviceType">Type of service to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
			<summary>Adds the given service to the VSPackage's service container.</summary>
			<param name="promote">true if this service should be added to any parent service containers; otherwise, false.</param>
			<param name="serviceType">Type of service to add.</param>
			<param name="serviceInstance">Service object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
			<param name="promote">true if this service should be added to any parent service containers; otherwise, false.</param>
			<param name="callback"><see cref="T:System.ComponentModel.Design.ServiceCreatorCallback"></see> object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</param>
			<param name="serviceType">Type of service to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
			<summary>Removes the given service type from the service container.</summary>
			<param name="serviceType">The type of service to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
			<summary>Removes the given service type from the service container, and optionally promotes the service to parent service containers.</summary>
			<param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
			<param name="serviceType">The type of service to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Package.System.IServiceProvider.GetService(System.Type)">
			<param name="serviceType"> </param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.ApplicationRegistryRoot">
			<summary>Gets the root registry key of the current Visual Studio registry hive.</summary>
			<returns>The root <see cref="T:Microsoft.Win32.RegistryKey"></see> of the Visual Studio registry hive.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.UserDataPath">
			<summary>Gets the path to user data storage for Visual Studio.</summary>
			<returns>The path to user data storage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.UserLocalDataPath">
			<summary>Gets the path to user data storage for Visual Studio.</summary>
			<returns>The path to user data storage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.UserRegistryRoot">
			<summary>Gets a registry key that can be used to store user data.</summary>
			<returns>A RegistryKey that can be used to store user data.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.Package.Zombied">
			<summary>Gets a value indicating whether the package is being closed.</summary>
			<returns>True if the package is being closed; otherwise, false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute">
			<summary>Modify your class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see> with this attribute so that the registration tool regpkg.exe will look for additional attributes. For more information, see How to: Register Managed VSPackages.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.#ctor">
			<summary>Initializes an instance of this attribute.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates registry entries that correspond to this attribute's value.</summary>
			<param name="context">Contains information about the entire installation so that registry entries specific to this attribute may be created.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes attribute specific registry entries.</summary>
			<param name="context">Contains information about the entire installation so that registry entries specific to this attribute may be removed.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute">
			<summary>Provides an assembly filter for an <see cref="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem"></see> object by describing the assemblies such an object supports.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute.#ctor(System.String)">
			<summary>Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute"></see> object on the basis of the assembly name provided.</summary>
			<param name="assemblyFilter">[in] A string containing the full name of an assembly.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute.AssemblyFilter">
			<summary>The string containing the full assembly specification of the filter.</summary>
			<returns>A string containing the full assembly specification of the filter.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute">
			<summary>Apply this attribute to your VSPackage class to cause it to be automatically loaded when a specified UI context is active. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.#ctor(System.String)">
			<summary>Returns a new instance of this attribute with the specified cmdUiContextGuid.</summary>
			<param name="cmdUiContextGuid">The GUID of the command context which will cause this package to load.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool like regpkg.exe. </summary>
			<param name="Context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool like regpkg.exe. </summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute">
			<summary>Modifying your <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>-derived class with this attribute declares that it provides a particular automation object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.#ctor(System.String)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute"></see>.</summary>
			<param name="objectName">The name of the automation object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe. Any class derived from <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute"></see> must implement this method.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute">
			<summary>Associates a file extension to a given editor factory when applied to a class that inherits from <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> or implements the interface <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
			<summary>Initializes an instance of ProvideEditorExtensionAttribute.</summary>
			<param name="factoryType">One of following types:The type of the editor factory expressed as a string.The GUID of the editor factory.The type of the editor factory.</param>
			<param name="priority">The priority of this editor factory. The editors with the higher priority number is given a chance to read a file first. Upon failure, the next editor in priority is used.  </param>
			<param name="extension">The file extension to associate with the editor factory. This extension should include the prefix “.”.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to register this attribute with the given context. The context contains the location where the registration information should be placed. It also contains the type being registered and path information.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Extension">
			<summary>Retrieves the file extension associated with this editor.</summary>
			<returns>The file extension for this editor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Factory">
			<summary>Returns the GUID of the associated factory.</summary>
			<returns>The GUID of the editor factory.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.NameResourceID">
			<summary>Gets and sets the integer NameResourceID.</summary>
			<returns>Name resource ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Priority">
			<summary>Gets the editor's priority as set in the constructor.</summary>
			<returns>The priority for this editor for its file extension.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.ProjectGuid">
			<summary>Sets and gets the GUID of the project associated with this editor.</summary>
			<returns>The project GUID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.TemplateDir">
			<summary>Gets and sets the template directory to be used by the editor factory to retrieve its source files.</summary>
			<returns>The template directory.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute">
			<summary>This attribute declares that the VSPackage provides an editor factory.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.#ctor(System.Type,System.Int16)">
			<summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute"></see> object.</summary>
			<param name="factoryType">The object type that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory"></see>.</param>
			<param name="nameResourceID">The resource ID in the unmanaged resource file that contains the localized name of the editor factory.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to register this attribute with the given context.</summary>
			<param name="Context">Contains the location where the registration information should be placed, and also contains information about the editor type being registered, and path information.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to un-register this attribute with the given context.</summary>
			<param name="context">Contains the location where the registration information should be placed, and also contains information about the editor type being registered, and path information.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.FactoryType">
			<summary>The FactoryType property returns the value set in the <see cref="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.#ctor(System.Type,System.Int16)"></see> by the factoryType parameter.</summary>
			<returns>Returns the editor factory type.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.NameResourceID">
			<summary>The NameResourceID property returns the value of the resourceID set in the constructor.</summary>
			<returns>Returns the editor factory name resource ID, specified in the resource file.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute">
			<summary>Adds a logical view to the editor created by an editor factory.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.#ctor(System.Object,System.String)">
			<param name="factoryType">The type of factory.  This may be a Type, a GUID or a string representation of a GUID</param>
			<param name="logicalViewGuid">The GUID of the logical view to register.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute">
			<summary>Provides an extender for Visual Studio. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.#ctor(System.String,System.String,System.String)">
			<param name="extendeeCatId">The CATID of the extendee.</param>
			<param name="extenderGuid">The GUID of the extender.</param>
			<param name="extenderName">The name of the extender.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="Context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute">
			<summary>Provides a key binding table GUID. By putting this attribute on your <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>-derived class or class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see> you will declare that it has the given key binding (KEYBINDINGS_SECTION – KEYBINDINGS_END) table in its Command Table Configuration (.ctc) File.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.#ctor(System.String,System.Int16)">
			<summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute"></see> with tableGuid and nameResourceID values.</summary>
			<param name="tableGuid">The GUID of the key binding table in the Command Table Configuration (.ctc) File.</param>
			<param name="nameResourceID">The resource ID in the unmanaged resource file that contains the localized name of the key binding table. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to register this attribute with the given context.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.#ctor(System.Object,System.String,System.Int32,System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute"></see> class.</summary>
			<param name="pathToSnippetIndexFile">[in] A string containing the path to the code snippets index file for the language.</param>
			<param name="languageName">[in] The name of the language. This name is used in the registry for registry key and entry names.</param>
			<param name="languageResourceId">[in] The resource ID for the localized version of the language name. This is used to present the language name in dialog boxes and other user interface elements.</param>
			<param name="languageIdentifier">[in] A string containing an identifier specific to the language that is used to mark and identify code snippets.</param>
			<param name="languageService">[in] This is either a string containing a GUID or a type representing the class that implements the language service. The language service GUID is derived from this string or type.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.LanguageName">
			<summary>Returns the name of the language.</summary>
			<returns>Returns a string containing the name of the language. This is the same string that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.LanguageServiceSid">
			<summary>Returns the GUID of the language service.</summary>
			<returns>Returns the GUID of the language service. This is the value that was derived from the object passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.SearchPaths">
			<summary>Determines the default paths to search for snippets.</summary>
			<returns>Returns a string containing a list of paths to search for snippets.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.ShowRoots">
			<summary>OBSOLETE. Do no use.</summary>
			<returns>This property is not used.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute">
			<summary>Informs Visual Studio about a language service property page.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.#ctor(System.String,System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute"></see> class.</summary>
			<param name="optionKey">[in] The registry key to create. This can be a path of keys, for example, "formatting\\indent".</param>
			<param name="languageName">[in] The name of the language. This name is used in the registry for registry key and entry names.</param>
			<param name="localizedOptionKeyName">[in] A string containing a localized name. This string can alternatively specify a resource ID in the form "#dd" where "dd" is a decimal number. For example, "#104".</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.LanguageName">
			<summary>Returns the name of the language.</summary>
			<returns>Returns a string containing the name of the language. This is the same string that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.LocalizedOptionKey">
			<summary>Returns the localized name as a resource ID encoded in a string.</summary>
			<returns>Returns a string containing the localized name. This is the same string that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.OptionKey">
			<summary>Returns the registry key to be created.</summary>
			<returns>Returns a string containing the registry key name. This is the same string that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.OptionPageGuid">
			<summary>Determines the GUID of the option page as a string.</summary>
			<returns>Returns a string that contains the GUID of the property page.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute">
			<summary>Associates a file extension with a particular language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute"></see> attribute, using the specified language service GUID.</summary>
			<param name="languageServiceGuid">[in] A string containing the GUID of the language service.</param>
			<param name="extension">[in] A string containing the file extension to associate with the language service.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.#ctor(System.Type,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute"></see> attribute, using the type of your language service class.</summary>
			<param name="languageService">[in] The type of the language service class.</param>
			<param name="extension">[in] A string containing the file extension to associate with the language service.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Puts the file extension and language service GUID into the registry.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to create registry keys and to log progress.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the file extension and language service GUID from the registry.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to remove registry keys and to log progress.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Extension">
			<summary>Returns the associated file extension.</summary>
			<returns>Returns the string containing the file extension that was passed to the constructor of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute"></see> class.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.LanguageService">
			<summary>Returns the language GUID.</summary>
			<returns>Returns a <see cref="T:System.Guid"></see> object containing the GUID of the language service that was passed to the <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute"></see> class constructor.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute">
			<summary>Informs Visual Studio that a VSPackage provides a language service. Used with the managed package framework (MPF).</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.#ctor(System.Object,System.String,System.Int32)">
			<summary>Initializes a new instance of the Shell.ProvideLanguageServiceAttribute class.</summary>
			<param name="languageService">[in] This is either a string containing a GUID or a type representing the class that implements the language service. The language service GUID is derived from this string or type.</param>
			<param name="strLanguageName">[in] The name of the language. This name is used in the registry for registry key and entry names.</param>
			<param name="languageResourceID">[in] The resource ID for the localized version of the language name. This is used to present the language name in dialog boxes and other user interface elements.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes all of the registry keys and entries as specified by the class constructor.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext"></see> object used to manage registry keys.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.AutoOutlining">
			<summary>Determines if the language service supports automatic outlining.</summary>
			<returns>Returns true if the language service supports automatic outlining; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.CodeSense">
			<summary>Determines if the language service supports IntelliSense operations.</summary>
			<returns>Returns true if the language service supports IntelliSense operations; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.CodeSenseDelay">
			<summary>Determines the amount of time before a parse operation is started to support an IntelliSense operation.</summary>
			<returns>Returns the number of milliseconds delay before a parse is started.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DebuggerLanguageExpressionEvaluator">
			<summary>Determines the expression evaluator that is used for evaluating expressions.</summary>
			<returns>Returns a string containing the GUID of an expression evaluator; otherwise, returns a null value.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DefaultToInsertSpaces">
			<summary>Determines the default setting for the Insert spaces option in the Options dialog box for a language service.</summary>
			<returns>Returns true if the language service initially uses spaces for formatting; otherwise, returns false to indicate the language service uses tabs.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DefaultToNonHotURLs">
			<summary>Determines the initial setting of the Enable single-click URL navigation option in the Options dialog box.</summary>
			<returns>Returns true if the Enable single-click URL navigation should be turned off; otherwise, returns false, the option is initially turned on.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableAdvancedMembersOption">
			<summary>Determines whether the Hide Advanced Members option is enabled in the Options dialog box.</summary>
			<returns>Returns true if the Hide Advanced Members option is enabled; otherwise, returns false. </returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableAsyncCompletion">
			<summary>Determines whether the language supports background parsing.</summary>
			<returns>Returns true if background parsing is allowed; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableCommenting">
			<summary>Determines whether the language service can comment and uncomment source code using a single command.</summary>
			<returns>Returns true if commenting is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableFormatSelection">
			<summary>Determines if the language service supports automatic formatting of the source code.</summary>
			<returns>Returns true if formatting is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableLineNumbers">
			<summary>Determines if the Line numbers option can be selected in the Options dialog box.</summary>
			<returns>Returns true if the Line numbers option is enabled for use; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.HideAdvancedMembersByDefault">
			<summary>Determines the initial state of the Hide Advanced Members option in the Options dialog box.</summary>
			<returns>Returns true if the Hide Advanced Members is initially selected; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageName">
			<summary>Returns the name of the language.</summary>
			<returns>Returns a string containing the name of the language. This is the same string that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageResourceID">
			<summary>Returns the resource ID used to obtain the localized version of the language name.</summary>
			<returns>Returns a number representing the resource ID. This is the same value that was passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageServiceSid">
			<summary>Returns the GUID of the language service.</summary>
			<returns>Returns the GUID of the language service. This is the value that was derived from the object passed to the class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MatchBraces">
			<summary>Determines if the language service supports matching language pairs.</summary>
			<returns>Returns true if matching language pairs is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MatchBracesAtCaret">
			<summary>Determines if a language service supports matching language pairs while typing.</summary>
			<returns>Returns true if language pairs can be matched while typing; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MaxErrorMessages">
			<summary>Determines the maximum number of errors message that a language service can report for a parsing operation.</summary>
			<returns>Returns a number indicating the maximum number of errors that can be reported.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.QuickInfo">
			<summary>Determines if the language service supports the IntelliSense Quick Info.</summary>
			<returns>Returns true if the IntelliSense Quick Info is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.RequestStockColors">
			<summary>Determines if the language service is using the built-in colorable items as supplied by Visual Studio.</summary>
			<returns>Returns true if the language service uses the built-in colorable items; otherwise, returns false, indicating the language service is supplying custom colorable items.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowCompletion">
			<summary>Determines if the Statement completion options are enabled in the Options dialog box.</summary>
			<returns>Returns true if the Statement completion options are enabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowDropDownOptions">
			<summary>Determines if the Navigation bar option is enabled in the Options dialog box.</summary>
			<returns>Returns true if the Navigation bar option is to be enabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowHotURLs">
			<summary>Determines if URLs are displayed in such a way as to show they can be clicked. This option is not used.</summary>
			<returns>Returns true if URLs are to be displayed "hot" or clickable; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowMatchingBrace">
			<summary>Determines if the matching language pair is shown in the status bar.</summary>
			<returns>Returns true if the matching language pair is shown in the status bar; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowSmartIndent">
			<summary>Determines if the Smart Indenting option is enabled in the Options dialog box.</summary>
			<returns>Returns true if the Smart Indenting option is enabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.SingleCodeWindowOnly">
			<summary>Determines if the Window -&gt; New Window command is disabled for a language service.</summary>
			<returns>Returns true if the Window -&gt; New Window command is disabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.SupportCopyPasteOfHTML">
			<summary>Determines if the language service supports the clipboard format HTML for copy and paste operations.</summary>
			<returns>Returns true if the HTML clipboard format is supported, otherwise, returns false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute">
			<summary>This attribute provides a package load key for your package.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int16)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute"></see>.</summary>
			<param name="minimumEdition">The minimum edition of Visual Studio on which the VSPackage is loaded. This must be the literal edition value provided by Microsoft when obtaining your Package Load Key (PLK).</param>
			<param name="productName">Name of the product that this VSPackage delivers. Products comprised of multiple VSPackages each need their own PLK.</param>
			<param name="productVersion">The version of the product that this VSPackage implements.</param>
			<param name="companyName">VSIP Partner/creator of the VSPackage. Must exactly match the name you provided to Microsoft when you registered for a PLK. companyName is case-sensitive.</param>
			<param name="resourceId">Resource ID for VSPackage load key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Returns the registry key name for this package's load key information.</summary>
			<returns>The Registry Key name for the load key information of the VSPackage.</returns>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.CompanyName">
			<summary>Returns a string containing the CompanyName.</summary>
			<returns>The name of your company.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.MinimumEdition">
			<summary>The MinimumEdition property returns a string containing the minimum edition of Visual Studio needed to load your VSPackage.</summary>
			<returns>The minimum edition of Visual Studio needed to load your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ProductName">
			<summary>The ProductName property returns a string containing the name of your VSPackage.</summary>
			<returns>The name of your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ProductVersion">
			<summary>The ProductVersion attribute returns a string containing the version number of your VSPackage.</summary>
			<returns>The version number of your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ResourceId">
			<summary>Gets resource ID for the Package Load Key.</summary>
			<returns>The resource ID for the Package Load Key.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute">
			<summary>Provides registration information about menu resources used in a VSPackage. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.#ctor(System.Int16,System.Int32)">
			<summary>This constructor creates a new ProvideMenuResourceAttribute object with the given resource ID and version number.</summary>
			<param name="version">The version number of the menu resource.</param>
			<param name="resourceID">The ID of the menu resource. It must match the resource ID used in both the satellite (resource-only) DLL and the Command Table Configuration (.ctc) File.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.ResourceID">
			<summary>The ResourceID property returns the value of the resource ID set in the constructor.</summary>
			<returns>The resource ID of the menu resource.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Version">
			<summary>Returns the version number of the menu resource.</summary>
			<returns>The version number of the menu resource.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideObjectAttribute">
			<summary>Informs Visual Studio that the VSPackage provides an object that can be created from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry"></see>interface. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.#ctor(System.Type)">
			<summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideObjectAttribute"></see> object with the given object type.</summary>
			<param name="objectType">The type of object that the VSPackage can create. This type can have any scoping (public, internal, etc.) but must have a public constructor that takes no arguments.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.ObjectType">
			<summary>The ObjectType property returns the object type set in the constructor.</summary>
			<returns>Returns the object type set in the constructor.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute">
			<summary>Apply this attribute to independent objects to allow users to configure VSPackages through a custom Tools Options page.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean)">
			<summary>Creates a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute"></see> indicating that a particular class implements Tools Options page based user configuration support for the VSPackage through a specific class. </summary>
			<param name="supportsAutomation">If true, the Tools Options page can be accessed through the Visual Studio automation mechanism.</param>
			<param name="pageType">The <see cref="T:System.Type"></see> of the class implementing the Tools Options page.</param>
			<param name="pageNameResourceID">The localized resource ID of the Tools Options page sub-category.</param>
			<param name="categoryResourceID">The localized resource ID of the Tools Options page category. </param>
			<param name="pageName">The canonical unlocalized name of the Tools Options page sub-category.</param>
			<param name="categoryName">The  canonical unlocalized name of the Tools Options page category.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryName">
			<summary>Gets the canonical unlocalized name of the Tools Options page's category.</summary>
			<returns>A string containing the canonical unlocalized name of the Tools Options page's category.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryResourceID">
			<summary>Gets the resource ID for a Tools Options page's name.</summary>
			<returns>A short containing the resource ID for the localized Tools Options page category.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.NoShowAllView">
			<summary>Gets or sets how aggregated Tools Options pages are to be used.</summary>
			<returns>A bool indicating if the Tools Options page is to be displayed in the default (complex) view of Tools Options pages.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.PageName">
			<summary>Gets the canonical unlocalized name of the Tools Options page's sub-category.</summary>
			<returns>A string containing the canonical unlocalized name of the Tools Options page's sub-category.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.PageNameResourceID">
			<summary>Gets the resource ID for a Tools Options page's name of a sub-category.</summary>
			<returns>A short containing the resource ID for the localized Tools Options page category.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.PageType">
			<summary>Gets the <see cref="T:System.Type"></see> of the object implementing a Tools Options page.</summary>
			<returns>A <see cref="T:System.Type"></see> of the object implementing a ToolsOptions page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.SupportsAutomation">
			<summary>Read-only property indicating if a Tools Options page implementation support implementation</summary>
			<returns>A bool indicating if a Managed Package Framework based Tools Options page supports the Visual Studio automation model and can be accessed through the <see cref="N:EnvDTE"></see> mechanism.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.SupportsProfiles">
			<summary>Gets or sets if a Tools Options page implementation uses the Visual Studio settings mechanism to persist its state.</summary>
			<returns>A bool indicating if the Tools Options page implementation supports the use of the Visual Studio settings to persist its state.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.TypeId">
			<summary>Gets the current instance of the class implementing a Tools Options page.</summary>
			<returns>An object providing access to the current implementation of the class implementing a Tools Options page.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideProfileAttribute">
			<summary>Apply this attribute to independent objects used to implement a VSPackage's Visual Studio settings support.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean)">
			<summary>Creates a new instance of ProvideProfileAttribute indicating that a particular class implements Visual Studio settings support for a given VSPackage.</summary>
			<param name="objectNameResourceID">The localized resource ID of the name used to identify the object implementing a Visual Studio settings category.</param>
			<param name="objectType">The <see cref="T:System.Type"></see> of the class implementing Visual Studio settings support.</param>
			<param name="isToolsOptionPage">This argument is not implemented.</param>
			<param name="categoryResourceID">The localized resource ID of a Visual Studio settings category's name. </param>
			<param name="categoryName">The canonical, non-localized name of a Visual Studio settings category.</param>
			<param name="objectName">The canonical, non-localized name used to identify the object implementing a Visual Studio settings category.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.CategoryName">
			<summary>Gets the canonical unlocalized name of the Visual Studio settings category.</summary>
			<returns>A string containing the canonical unlocalized name of the Visual Studio settings category created by the attribute.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.CategoryResourceID">
			<summary>Gets the resource ID for the name of a Visual Studio settings category.</summary>
			<returns>A short containing the resource ID of the localized name of the Visual Studio settings category created by the attribute.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.IsToolsOptionPage">
			<summary>This argument is not currently implemented.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectName">
			<summary>Gets a canonical unlocalized name of the object implementing a Visual Studio settings category.</summary>
			<returns>A string containing the canonical, non-localized name used to identify an object implementing a Visual Studio settings category.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectNameResourceID">
			<summary>Gets the resource ID for the name of an object implementing a Visual Studio settings category.</summary>
			<returns>A short containing the resource ID of the localized name used to identify the object implementing a Visual Studio settings category</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectType">
			<summary>Gets the <see cref="T:System.Type"></see> of the object implementing a Visual Studio settings</summary>
			<returns>A <see cref="T:System.Type"></see> of the object used to implement a Visual Studio settings category.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute">
			<summary>ProvideProjectFactoryAttribute declares that a package provides a project factory.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)">
			<summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute"></see> object.</summary>
			<param name="factoryType">The type of factory the VSPackage offers.</param>
			<param name="defaultProjectExtension">The default project extension.</param>
			<param name="possibleProjectExtensions">The possible project extensions supported by this project factory.</param>
			<param name="name">The name of the project.</param>
			<param name="projectTemplatesDirectory">The directory containing this project factory’s templates.</param>
			<param name="displayProjectFileExtensionsResourceID">The resource ID of the display string representing the project file extensions.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Register is called to register the ProvideProjectFactoryAttribute attribute with the given context.</summary>
			<param name="Context">Contains the location where the registration information should be placed, the type being registered, and path information.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Unregister is called to un-register ProvideProjectFactoryAttribute attribute with the given context.</summary>
			<param name="context">Contains the location where the registration information should be placed, the type being registered, and path information.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DefaultProjectExtension">
			<summary>The DefaultProjectExtension property returns the value of the defaultProjectExtension set in the constructor.</summary>
			<returns>Value of the defaultProjectExtension set in the <see cref="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)"></see> constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisplayProjectFileExtensions">
			<summary>The DisplayProjectFileExtensionsResourceID property returns the value of the displayProjectFileExtensionsResourceID type set in the constructor.</summary>
			<returns>Returns the value of the displayProjectFileExtensionsResourceID type set in the <see cref="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)"></see> constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.FactoryType">
			<summary>The FactoryType property returns the value of the factoryType set in the constructor.</summary>
			<returns>Returns the value of the factoryType set in the <see cref="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)"></see> constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.LanguageVsTemplate">
			<summary>Sets and gets the value for the Visual Studio language template.</summary>
			<returns>Returns a string containing the registry key value of the language template.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Name">
			<summary>The tree node name in the Create New Project and Add New Item dialogs.</summary>
			<returns>Returns a string containing the project node name.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.PossibleProjectExtensions">
			<summary>The PossibleProjectExtensions property returns the value of the possibleProjectExtensions set in the constructor.</summary>
			<returns>Returns the possibleProjectExtensions value set in the <see cref="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)"></see> constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ProjectTemplatesDirectory">
			<summary>The ProjectTemplatesDirectory property returns the value of the projectTemplatesDirectory set in the constructor</summary>
			<returns>Returns a string containing the path to the directory where the project templates are located.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ShowOnlySpecifiedTemplatesVsTemplate">
			<summary>ShowOnlySpecifiedTemplatesVsTemplate sets or gets the registry key that specifies the template to be shown in the New Project dialog.</summary>
			<returns>Returns a string containing the value of the specific template.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.SortPriority">
			<summary>SortPriority gets or sets the order in which projects are displayed in the New Project dialog.</summary>
			<returns>Returns an int containing the sort priority for the New Project dialog.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.TemplateGroupIDsVsTemplate">
			<summary>TemplateGroupIDsVsTemplate gets or sets the value for the Visual Studio template group ID.</summary>
			<returns>Returns a string containing the template group ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.TemplateIDsVsTemplate">
			<summary>TemplateIDsVsTemplate gets or sets the value for the Visual Studio template ID.</summary>
			<returns>Returns a string containing the template ID.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideServiceAttribute">
			<summary>When applied to a subclass of <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> or a class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see> this attribute indicates that the package proffers a service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.#ctor(System.Object)">
			<param name="serviceType">Must evaluate to the GUID of the class of the proferred type.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates registry entries that correspond to this attribute's value.</summary>
			<param name="context">Contains information about the entire installation so that registry entries specific to this attribute may be created.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes attribute specific registry entries.</summary>
			<param name="context">Contains information about the entire installation so that registry entries specific to this attribute may be removed.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute">
			<summary>Apply this attribute to classes implementing VSPackages to declare that the VSPackage provides Toolbox items with the specified clipboard format and to enable support for drag-and-drop onto the Visual Studio Toolbox.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute.#ctor(System.String)">
			<summary>Creates a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute"></see> for the specified format.</summary>
			<param name="format">String containing the name of a supported format.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute.Format">
			<summary>Represents the string containing the name of a supported clipboard format.</summary>
			<returns>String containing the name of the clipboard format supported by the VSPackage the attribute was applied to.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute">
			<summary>Registers a VSPackage as supplying a particular implementation of <see cref="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem"></see>. Used in conjunction with <see cref="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.#ctor(System.Type)">
			<summary>Creates a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute"></see>. </summary>
			<param name="objectType">[in] A reference to a <see cref="T:System.Type"></see> object.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.ObjectType">
			<summary>Returns the <see cref="T:System.Type"></see> used to construct the <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute"></see>.</summary>
			<returns>Returns a <see cref="T:System.Type"></see> of the <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute"></see> used to construct the <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute"></see>.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute">
			<summary>Apply this attribute to classes implementing VSPackages to declare if they offer a set of items to the Visual StudioToolbox.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.#ctor(System.Int32)">
			<summary>Creates a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute"></see> which indicates if a class implementing a VSPackage is providing Toolbox items.</summary>
			<param name="version">The version of the Toolbox items a VSPackage supplies.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Registers a VSPackage as a Toolbox item provider for specified formats when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context is used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Reverses the changes that the <see cref="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)"></see> method had applied to the registry.</summary>
			<param name="context">A registration context provided by an external registration tool. The context is used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Version">
			<summary>Property returning the version of Toolbox items a VSPackage provides.</summary>
			<returns>An integer value containing the version number of the Toolbox items a VSPackage supports.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute">
			<summary>Registers a particular VSPackage as providing one or more dialog pages in the Customize Toolbox dialog page of the Visual Studio IDE.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16)">
			<summary>Provides a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute"></see>, using the <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page, and a resource ID.</summary>
			<param name="pageType">[in] The <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see> class.</param>
			<param name="nameResourceID">[in] The numeric identifier of a native resource in a VSPackage's satellite dll containing the name for the tab of hosting this Customize Toolbox dialog page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16,System.Int16)">
			<summary>Provides a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute"></see>, using the <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page, a resource ID, and a page order.</summary>
			<param name="pageOrder">[in] Indicates the Customize Toolbox dialog page placement in the pages of the Visual StudioCustomize Toolbox Dialog. A value of zero indicates that no order is requested. </param>
			<param name="pageType">[in] The <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see> class.</param>
			<param name="nameResourceID">[in] The numeric identifier of a native resource in a VSPackage's satellite dll containing the name for the tab of hosting this Customize Toolbox dialog page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16,System.Int16,System.String)">
			<summary>Provides a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute"></see>, using the <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page, a resource ID, a page order, and a help string.</summary>
			<param name="pageOrder">[in] Indicates the Customize Toolbox dialog page placement in the pages of the Visual StudioCustomize Toolbox Dialog box. A value of zero indicates that no order is requested. </param>
			<param name="pageType">[in] The <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page. This type must derive from the <see cref="T:Microsoft.VisualStudio.Shell.DialogPage"></see> class.</param>
			<param name="helpKeyword">[in] A string containing a help key word used by the help system to index to the correct help topic information.</param>
			<param name="nameResourceID">[in] The numeric identifier of a native resource in a VSPackage's satellite dll containing the name for the tab of hosting this Customize Toolbox dialog page.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.HelpKeyword">
			<summary>Returns a help key work associated with the Customize Toolbox dialog page.</summary>
			<returns>A string containing the help key word used to obtain information about the Customize Toolbox dialog page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.NameResourceID">
			<summary>Returns the resource ID of the name of the tab containing the Customize Toolbox dialog page.</summary>
			<returns>A short containing the resource ID of the name of the tab containing the Customize Toolbox dialog page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.PageOrder">
			<summary>Returns the page order requested for the Customize Toolbox dialog page</summary>
			<returns>A short containing the page order requested for the Customize Toolbox dialog page.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.PageType">
			<summary>Returns the <see cref="T:System.Type"></see> of the class implementing the Customize Toolbox dialog page.</summary>
			<returns>A <see cref="T:System.Type"></see> value corresponding to the value returned by the <see cref="T:System.Object.GetType"></see> method of the class implementing the Customize Toolbox dialog page. </returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.TypeId">
			<summary>Returns the instance of the class implementing the Customize Toolbox dialog page.</summary>
			<returns>An <see cref="T:System.Object"></see> referring to the instance of the class implementing the Customize Toolbox dialog page.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute">
			<summary>Notifies Visual Studio that a VSPackage owns a tool window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.#ctor(System.Type)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute"></see> object.</summary>
			<param name="toolType">The type of the tool window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.MultiInstances">
			<summary>Describes if one ore many instances of the Tool Window are allowed.</summary>
			<returns>TRUE if multiple instances are allowed, otherwise FALSE.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Style">
			<summary>Gets and sets the default docking style for the Tool Window.</summary>
			<returns>The allowable docking styles are MDI, Float, Linked, Tabbed, AlwaysFloat and none.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute">
			<summary>Maps a tool window to one or more UI contexts so that the shell shows the window on a switch to one of those contexts and hides the window on a user switch from one of those mapped contexts.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.#ctor(System.Object,System.String)">
			<summary>This overloaded constructor sets the class of the ToolWindow and a GUID to associate with its visibility so that the shell automatically hides and shows it.</summary>
			<param name="toolWindow">The class of the tool window.</param>
			<param name="commandUIGuid">The GUID of the tool window that the automatic visibility behavior should be applied to.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Creates registry entries that correspond to this attribute's value.</summary>
			<param name="context">Contains information about the entire installation so that registry entries specific to this attribute may be created.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes attribute specific registry entries.</summary>
			<param name="context">Contains information about the entire installation so that registry entries specific to this attribute may be removed.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.CommandUIGuid">
			<summary>Returns the GUID of a command associated with showing or hiding the tool window.</summary>
			<returns>The GUID of a command associated with showing or hiding the tool window.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ProvideViewAttribute">
			<summary>This attribute declares that an editor factory class offers a particular logical view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ProvideViewAttribute.#ctor(Microsoft.VisualStudio.Shell.LogicalView,System.String)">
			<summary>Creates a new attribute.</summary>
			<param name="logicalView">An enumeration of the kinds of logical views available.</param>
			<param name="physicalView">The GUID of the physical view. This can be null to indicate the default physical view.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute">
			<summary>Registers the VSPackage as an extender that is automatically loaded in response to a particular context GUID. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.#ctor(System.String)">
			<summary>Creates a new RegisterAutoLoadAttribute object and saves the GUID of the package that initiated package loading.</summary>
			<param name="cmdUiContextGuid">Context GUID that triggers the loading of the VSPackage</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute">
			<summary>See <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute"></see>. Registers a file extension with a given editor factory. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute"></see> object when the type of the editor factory is known.</summary>
			<param name="factoryType">One of following types:The type of the editor factory expressed as a string.The GUID of the editor factory.The type of the editor factory.</param>
			<param name="priority">The priority of this editor factory. Editors with higher priority numbers are given a chance to read a file first. Upon failure, the next editor in priority order is used.</param>
			<param name="extension">The file extension to associate with the editor factory. This extension should include the prefix “.”.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to register this attribute with the given context. The context contains the location where the registration information should be placed. It also contains the type being registered and path information.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to unregister this attribute with the given context. The context contains the location where the registration information should be placed. It also contains the type being registered and path information.</summary>
			<param name="Context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being unregistered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Extension">
			<summary>Gets the file extension of the file.</summary>
			<returns>The file extension for this editor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Factory">
			<summary>Gets the editor factory GUID.</summary>
			<returns>The GUID of the editor factory.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.NameResourceID">
			<summary>Gets or sets a value that represents the name resource ID.</summary>
			<returns>Name resource ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Priority">
			<summary>Gets the priority of this extension registration.</summary>
			<returns>The priority for this editor for its file extension.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.ProjectGuid">
			<summary>Gets or sets project GUID.</summary>
			<returns>The project GUID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.TemplateDir">
			<summary>Gets or sets the template directory.</summary>
			<returns>The template directory.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute">
			<summary>Adds a logical view to the editor created by an editor factory.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.#ctor(System.Object,System.String)">
			<param name="factoryType">The type of factory.  This may be a Type, a GUID or a string representation of a GUID</param>
			<param name="logicalViewGuid">The GUID of the logical view to register.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute">
			<summary>Registers an extender with Visual Studio.  This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.#ctor(System.String,System.String,System.String)">
			<summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute"></see> object.</summary>
			<param name="extendeeCatId">The CATID of the extendee.</param>
			<param name="extenderGuid">The GUID of the extender.</param>
			<param name="extenderName">The name of the extender.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute">
			<summary>Registers a file extension with a given language service by applying the attribute to a <see cref="T:Microsoft.VisualStudio.Shell.Package"></see>-derived class or class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"></see> when registered using a registration tool like regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.#ctor(System.String,System.String)">
			<summary>Returns a new RegisterLanguageExtensionAttribute. </summary>
			<param name="languageServiceGuid">The GUID of language service class that is derived from <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> as a string.</param>
			<param name="extension">The file extension associated with the language service. Include a "." in the value of extension.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.#ctor(System.Type,System.String)">
			<summary>Creates a new instance of RegisterLanguageExtensionAttribute and initializes the values of the language service and file extension that it associates. </summary>
			<param name="languageService">The GUID of language service class that is derived from <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> as a string.</param>
			<param name="extension">The file extension associated with the language service. Include a "." in the value of extension.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Called to register this attribute with the given context.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute">
			<summary>Registers a Package load key with the VSPackage. This class cannot be inherited.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int16)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute"></see>.</summary>
			<param name="minimumEdition">The minimum edition of Visual Studio .NET needed to load the VSPackage.</param>
			<param name="productName">The name of the VSPackage.</param>
			<param name="productVersion">The version number of the VSPackage.</param>
			<param name="companyName">The name of your company.</param>
			<param name="resourceId">The resource ID for the VSPackage load key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Retrieves the registry key name for the load key information of the VSPackage.</summary>
			<returns>The Registry Key name for the load key information of the VSPackage.</returns>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.CompanyName">
			<summary>The CompanyName property returns a string containing the name of your company.</summary>
			<returns>The name of your company.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.MinimumEdition">
			<summary>The MinimumEdition property returns a string containing the minimum edition of Visual Studio needed to load your VSPackage.</summary>
			<returns>The minimum edition of Visual Studio needed to load your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ProductName">
			<summary>The ProductName property returns a string containing the name of your VSPackage.</summary>
			<returns>The name of your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ProductVersion">
			<summary>The ProductVersion attribute returns a string containing the version number of your VSPackage.</summary>
			<returns>The version number of your VSPackage.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ResourceId">
			<summary>Gets resource ID for the Package Load Key.</summary>
			<returns>The resource ID for the Package Load Key.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute">
			<summary>Provides an abstract class for VSPackage registration. The RegistrationAttribute class allows new registration information to be added without changing the registration tools.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.#ctor">
			<summary>Creates a new instance of the class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages.</summary>
			<param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
			<summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see How to: Register Managed VSPackages. Any class deriving from the RegistrationAttribute class must implement this method.</summary>
			<param name="Context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key">
			<summary>Provides an abstract class that represents a registration key.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.#ctor">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.Close">
			<summary>Closes a key after writing is complete.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.CreateSubkey(System.String)">
			<summary>Creates a new registration key. The new key is a subkey of the current Key.</summary>
			<returns>The newly created Key.</returns>
			<param name="name">The name of the new key. This name is relative to the current key.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.SetValue(System.String,System.Object)">
			<summary>Adds a value to the current registration Key.</summary>
			<param name="valueName">The name of the value to set. If valueName is null or an empty string, SetValue sets the default value for the current Key.</param>
			<param name="value">An object to store in the value. The object cannot be null. If the object is a numeric type that can be converted to an integer, it is stored as a DWORD registry encoding. Otherwise it is stored as a string.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext">
			<summary>An abstract base class for objects providing context information from an external source to a registration attribute.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.#ctor">
			<summary>Creates a new RegistrationAttribute.RegistrationContext object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CreateKey(System.String)">
			<summary>Creates a new registration key by name.</summary>
			<returns>A new <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key"></see> object.</returns>
			<param name="name">The name of the key to create.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.EscapePath(System.String)">
			<summary>Reformats a string as needed by the registration tool.</summary>
			<returns>The reformatted path string.</returns>
			<param name="str">The path string to reformat.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKey(System.String)">
			<summary>Removes an existing registration key.</summary>
			<param name="name">The name of the key to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveKeyIfEmpty(System.String)">
			<param name="name"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RemoveValue(System.String,System.String)">
			<summary>Removes a value from a registration key.</summary>
			<param name="valuename">The name of the value to remove.</param>
			<param name="keyname">The name of the key that contains the value to be removed.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.CodeBase">
			<summary>Gets the path and filename of the object being registered.</summary>
			<returns>The path and filename of the object being registered.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentPath">
			<summary>Gets the path to the component that is being registered.</summary>
			<returns>The path to the component being registered.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.ComponentType">
			<summary>Gets the type of component being registered.</summary>
			<returns>The type of component being registered.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.InprocServerPath">
			<summary>Gets the path to the in-process server DLL.</summary>
			<returns>The path to the in-process server DLL.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.Log">
			<summary>Gets a <see cref="T:System.IO.TextWriter"></see> object that can be used to log events during registration.</summary>
			<returns>A <see cref="T:System.IO.TextWriter"></see> object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext.RegistrationMethod">
			<summary>Gets a value that specifies how the assembly should be registered/located.</summary>
			<returns>Specifies how the assembly should be registered/located.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.RegistrationMethod">
			<summary>Specifies how the assembly should be registered/located.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Assembly">
			<summary>Indicates that the assembly should be in the GAC or in PrivateAssemblies.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.CodeBase">
			<summary>Indicates that the path to the assembly should be stored in the registry and used to locate the assembly at runtime.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.RegistrationMethod.Default">
			<summary>Indicates that the registration method should only be used by tools.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.SelectionContainer">
			<summary>Provides a unified interface for accessing a set of selected objects.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.#ctor">
			<summary>Initializes a new <see cref="T:Microsoft.VisualStudio.Shell.SelectionContainer"></see> object.  The overload provides the ability to restrict user control over the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see> and <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see> collections.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.#ctor(System.Boolean,System.Boolean)">
			<summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.SelectionContainer"></see> object with the ability to restrict user control over the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see> and <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see> collections.</summary>
			<param name="selectableReadOnly">If true, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see> throws a <see cref="T:System.NotSupportedException"></see>. If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects"></see> is handled normally.</param>
			<param name="selectedReadOnly">If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see> throws a <see cref="T:System.NotSupportedException"></see>. If false, a request to change the <see cref="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects"></see> is handled normally.</param>
		</member>
		<member name="E:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjectsChanged">
			<summary>Raised when an external object calls the <see cref="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.SelectObjects(System.UInt32,System.Object[],System.UInt32)"></see> method with the F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED flag set. </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.ActivateObjects">
			<summary>Overriding this method enables an object to respond when selected.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.CountObjects(System.UInt32,System.UInt32@)">
			<summary>Determines the number of objects either those F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED or F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL items.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the operation is successful.</returns>
			<param name="dwFlags">Use F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL to indicate all members and F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED to indicate only those selected.</param>
			<param name="pc">A pointer to the number of items, this value is set by the method call.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.GetObjects(System.UInt32,System.UInt32,System.Object[])">
			<summary>Sets cObjects with the number of items F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED or F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL items and populates array apUnkObjects with pointers to those objects.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the operation is successful.</returns>
			<param name="cObjects">A pointer to the number of items, this value is set by the method call.</param>
			<param name="dwFlags">Use F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL to indicate all members and F:Microsoft.VisualStudio.Shell.SelectionContainer.<see cref="S"></see>ELECTED to indicate only those selected.</param>
			<param name="apUnkObjects">An array of size cObjects that contains pointers to the retrieved objects.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft.VisualStudio.Shell.Interop.ISelectionContainer.SelectObjects(System.UInt32,System.Object[],System.UInt32)">
			<summary>Sets the collection of selectable objects.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> if the operation is successful.</returns>
			<param name="apUnkSelect">The array of objects to be selected.</param>
			<param name="cSelect">The size of the array of selected objects.</param>
			<param name="dwFlags">If this value is true<see cref="M:Microsoft.VisualStudio.Shell.SelectionContainer.ActivateObjects"></see> will be performed on the array of objects.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects">
			<summary>Gets the collection of selectable objects.</summary>
			<returns>Returns a collection of selectable objects.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects">
			<summary>Gets or sets the collection of selected objects.</summary>
			<returns>Returns a collection of selected objects.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ServiceProvider">
			<summary>Provides a unified service provider for managed VSPackages.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>Initializes a instance with an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> interface.</summary>
			<param name="sp">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider"></see> class with an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object and optionally passes all requests to the underlying service provider.</summary>
			<param name="defaultServices">Determines if this service should respond to queries for <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite"></see>.</param>
			<param name="sp">An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> interface used to resolve services.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Dispose">
			<summary>Releases the resources used by the <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Guid)">
			<summary>Retrieves GUID-based services from the unmanaged service provider.</summary>
			<returns>An instance of the requested service, or null if the service could not be located.</returns>
			<param name="guid">The GUID of the service to retrieve.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Type)">
			<summary>Gets type-based services from the unmanaged service provider.</summary>
			<returns>An instance of the requested service, or null if the service could not be located.</returns>
			<param name="serviceType">The type of service to retrieve. The GUID of this type is used to obtain the service from the native service provider.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.GetSite(System.Guid@,System.IntPtr@)">
			<summary>Retrieves the current site object to resolve services.</summary>
			<param name="Ppv">The retrieved interface or null.</param>
			<param name="Riid">The GUID of the requested interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Microsoft.VisualStudio.OLE.Interop.IObjectWithSite.SetSite(System.Object)">
			<summary>Sets the site object to resolve services.</summary>
			<param name="pUnkSite">The site to be referenced.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.#ctor(System.Exception)">
			<param name="error"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.CanDelete(System.Int32@)">
			<param name="fdelete"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
			<param name="cat"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Column(System.Int32@)">
			<param name="col"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Document(System.String@)">
			<param name="doc"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Checked(System.Int32@)">
			<param name="f"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
			<param name="pri"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Text(System.String@)">
			<param name="text"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.HasHelp(System.Int32@)">
			<param name="fHelp"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.ImageListIndex(System.Int32@)">
			<param name="index"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.IsReadOnly(Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD,System.Int32@)">
			<param name="fReadOnly"> </param>
			<param name="field"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Line(System.Int32@)">
			<param name="line"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.OnFilterTask(System.Int32)">
			<param name="f"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Checked(System.Int32)">
			<param name="f"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY)">
			<param name="pri"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Text(System.String)">
			<param name="t"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.SubcategoryIndex(System.Int32@)">
			<param name="index"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.OnDeleted(System.EventArgs)">
			<param name="e"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.OnHelp(System.EventArgs)">
			<param name="e"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.OnNavigate(System.EventArgs)">
			<param name="e"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Task.OnRemoved(System.EventArgs)">
			<param name="e"> </param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.TaskErrorCategory">
			<summary>Represents a collection of values that identify types or severity of error messages that can appear in the Error List Options task window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Error">
			<summary>Represents an error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Message">
			<summary>Represents an informational note.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Warning">
			<summary>Represents a warning.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.#ctor(Microsoft.VisualStudio.Shell.TaskProvider)">
			<param name="owner"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Add(Microsoft.VisualStudio.Shell.Task)">
			<param name="task"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Contains(Microsoft.VisualStudio.Shell.Task)">
			<param name="task"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.IndexOf(Microsoft.VisualStudio.Shell.Task)">
			<param name="task"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Task)">
			<param name="task"> </param>
			<param name="index"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Remove(Microsoft.VisualStudio.Shell.Task)">
			<param name="task"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.RemoveAt(System.Int32)">
			<param name="index"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
			<param name="array"> </param>
			<param name="index"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Add(System.Object)">
			<param name="obj"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Contains(System.Object)">
			<param name="obj"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.IndexOf(System.Object)">
			<param name="obj"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Insert(System.Int32,System.Object)">
			<param name="obj"> </param>
			<param name="index"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.Remove(System.Object)">
			<param name="obj"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System.Collections.IList.RemoveAt(System.Int32)">
			<param name="index"> </param>
		</member>
		<member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Item(System.Int32)">
			<param name="index"> </param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ToolWindowOrientation">
			<summary>This enumeration provides a number of possible tool window orientations with respect to a docking window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Bottom">
			<summary>Tool window initially oriented against the bottom of the docking window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Left">
			<summary>Tool window initially oriented to the left of the docking window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.none">
			<summary>No tool window orientation indicated.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Right">
			<summary>Tool window initially oriented to the right of the docking window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.ToolWindowOrientation.Top">
			<summary>Tool window initially oriented against the top of the docking window.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.ToolWindowPane">
			<summary>Subclass this to implement your own tool window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.#ctor(System.IServiceProvider)">
			<summary>Initializes an instance of this class.</summary>
			<param name="provider">The single constructor argument is a service provider the created window can use to obtain services.  This parameter must not be null or else the tool window will not be able to add itself to the shell.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnToolWindowCreated">
			<summary>This method can be overridden by the derived class to execute any code that needs to run after the creation of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.#ctor(System.String)">
			<param name="path"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.#ctor(Microsoft.VisualStudio.Shell.Url,System.String)">
			<param name="baseUrl"> </param>
			<param name="relpath"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.GetPartial(System.Int32)">
			<param name="i"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.GetRemainder(System.Int32)">
			<param name="i"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.JoinSegments(System.Int32,System.Int32)">
			<param name="j"> </param>
			<param name="i"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.MakeRelative(Microsoft.VisualStudio.Shell.Url)">
			<param name="url"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.Move(Microsoft.VisualStudio.Shell.Url,Microsoft.VisualStudio.Shell.Url)">
			<param name="newBase"> </param>
			<param name="oldBase"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Url.Unescape(System.String,System.Boolean)">
			<param name="escaped"> </param>
			<param name="isFile"> </param>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.VsDockStyle">
			<summary>Defines constants for tool window orientation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.AlwaysFloat">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.AlwaysFloat"></see>, the tool window cannot be docked.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Float">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Float"></see>, the tool window will float initially, but when the title bar is double-clicked, Orientation and Window apply, and the window will default to Tabbed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Linked">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Linked"></see>, Orientation can be Left, Right, Top, or Bottom.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.MDI">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.MDI"></see>, the tool window will be linked to the MDI area, and Window is ignored.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.none">
			<summary>The registration attribute <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute"></see> initializes to this value of no style specified. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed">
			<summary>If the Style value is <see cref="F:Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed"></see>, Orientation can be Left or Right and specifies where the tab will be placed.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Shell.VsShellUtilities">
			<summary>Provides static helper methods for the managed package framework classes.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetMiscellaneousProject(System.IServiceProvider,System.Boolean)">
			<summary>Returns the miscellaneous project files in a solution.</summary>
			<returns>Returns the miscellaneous project hierarchy as an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3"></see> object.</returns>
			<param name="create"> </param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see> object used to retrieve the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetProject(System.IServiceProvider,System.String)">
			<summary>Returns a project that a document is part of.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> object of the project that contains the document.</returns>
			<param name="site"><see cref="T:System.IServiceProvider"></see> object used to retrieve the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolution"></see> object.</param>
			<param name="moniker">String form of the unique moniker identifier of the document in the project system. If the document is a file, you can simply specify the file extension for this parameter rather than the full path to the file (for example, .bmp or txt). In non-file cases, this identifier is often in the form of a URL.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTextView(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
			<summary>Returns the text view object from sited in a window frame.</summary>
			<returns>Returns the text view in a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object. Returns null if the window frame is a code window that is not implemented as a text view.</returns>
			<param name="windowFrame"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> where the text view is sited.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsDocumentOpen(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
			<summary>Determines if a document is open.</summary>
			<returns>Returns true and item hierarchy and window frame if the document is open with the given logical view. If logicalView is Guid.Empty, then this method returns true if any view is open, and false otherwise.</returns>
			<param name="logicalView">GUID specifying the logical view.</param>
			<param name="hierarchy"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy"></see> object.</param>
			<param name="windowFrame"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> object.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see> object.</param>
			<param name="fullPath">Full path to the document.</param>
			<param name="itemID">Item id. The values are <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see>, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see> or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenAsMiscellaneousFile(System.IServiceProvider,System.String,System.String,System.Guid,System.String,System.Guid)">
			<summary>Opens a specified miscellaneous file in a specified editor.</summary>
			<param name="path">File path of the requested document.</param>
			<param name="logicalView">Specifies the logical view of the editor. <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView"></see>, for example.</param>
			<param name="physicalView">Specifies the specific type of window in which to open the editor.</param>
			<param name="editor">GUID of the editor in which to open the file.</param>
			<param name="caption">Name of the file.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String)">
			<summary>Opens a document specified by a file path.</summary>
			<param name="path">File path of the document.</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
			<summary>Opens a specified document.</summary>
			<param name="logicalView">Logical view in which to open the document.</param>
			<param name="hierarchy"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> object that is returned.</param>
			<param name="windowFrame"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> object that is returned</param>
			<param name="provider"><see cref="T:System.IServiceProvider"></see> object.</param>
			<param name="fullPath">File path of the document.</param>
			<param name="itemID">Item ID. Allowed values are <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see>, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see> or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
			<summary>Opens a specified document.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.#ctor(System.IServiceProvider)">
			<param name="provider"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Dispose(System.Boolean)">
			<param name="disposing"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.GetService(System.Type)">
			<param name="serviceType"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<param name="nCmdId"> </param>
			<param name="guidGroup"> </param>
			<param name="pIn"> </param>
			<param name="nCmdExcept"> </param>
			<param name="vOut"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<param name="nCmdId"> </param>
			<param name="guidGroup"> </param>
			<param name="oleCmd"> </param>
			<param name="oleText"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)">
			<param name="lParam"> </param>
			<param name="msg"> </param>
			<param name="wParam"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
			<param name="y"> </param>
			<param name="hwndParent"> </param>
			<param name="pane"> </param>
			<param name="cy"> </param>
			<param name="cx"> </param>
			<param name="x"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.GetDefaultSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
			<param name="size"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.LoadViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
			<param name="pstream"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.SaveViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
			<param name="pstream"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<param name="p"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
			<param name="msg"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.PreProcessMessage(System.Windows.Forms.Message@)">
			<param name="m"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.WindowPane.System.IServiceProvider.GetService(System.Type)">
			<param name="serviceType"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)">
			<param name="eventSink"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<param name="pvaOut"> </param>
			<param name="itemid"> </param>
			<param name="pvaIn"> </param>
			<param name="nCmdID"> </param>
			<param name="pguidCmdGroup"> </param>
			<param name="nCmdexecopt"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetCanonicalName(System.UInt32,System.String@)">
			<param name="itemId"> </param>
			<param name="name"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetGuidProperty(System.UInt32,System.Int32)">
			<param name="itemId"> </param>
			<param name="propId"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
			<param name="itemIdNested"> </param>
			<param name="itemId"> </param>
			<param name="guidHierarchyNested"> </param>
			<param name="hierarchyNested"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetProperty(System.UInt32,System.Int32,System.Object@)">
			<param name="itemId"> </param>
			<param name="propId"> </param>
			<param name="property"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Boolean@)">
			<param name="fileName"> </param>
			<param name="name"> </param>
			<param name="flags"> </param>
			<param name="cancel"> </param>
			<param name="guidProject"> </param>
			<param name="location"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<param name="pvaOut"> </param>
			<param name="pvaIn"> </param>
			<param name="nCmdID"> </param>
			<param name="pguidCmdGroup"> </param>
			<param name="nCmdexecopt"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<param name="pCmdText"> </param>
			<param name="prgCmds"> </param>
			<param name="cCmds"> </param>
			<param name="pguidCmdGroup"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.GetAggregateProjectTypeGuids(System.String@)">
			<param name="projectTypeGuids"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
			<param name="fileName"> </param>
			<param name="canceled"> </param>
			<param name="name"> </param>
			<param name="flags"> </param>
			<param name="project"> </param>
			<param name="guidProject"> </param>
			<param name="location"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.SetAggregateProjectTypeGuids(System.String)">
			<param name="projectTypeGuids"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject.SetInnerProject(System.Object)">
			<param name="inner"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
			<param name="cookie"> </param>
			<param name="eventSink"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetCanonicalName(System.UInt32,System.String@)">
			<param name="itemId"> </param>
			<param name="name"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<param name="itemId"> </param>
			<param name="propId"> </param>
			<param name="guid"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
			<param name="itemIdNested"> </param>
			<param name="itemId"> </param>
			<param name="guidHierarchyNested"> </param>
			<param name="hierarchyNested"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)">
			<param name="itemId"> </param>
			<param name="propId"> </param>
			<param name="property"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
			<param name="serviceProvider"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.ParseCanonicalName(System.String,System.UInt32@)">
			<param name="itemId"> </param>
			<param name="name"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.QueryClose(System.Int32@)">
			<param name="canClose"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<param name="itemId"> </param>
			<param name="propId"> </param>
			<param name="guid"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetProperty(System.UInt32,System.Int32,System.Object)">
			<param name="itemId"> </param>
			<param name="propId"> </param>
			<param name="property"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<param name="serviceProvider"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.UnadviseHierarchyEvents(System.UInt32)">
			<param name="cookie"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])">
			<param name="cDirectories"> </param>
			<param name="cProjects"> </param>
			<param name="rgpszMkDocuments"> </param>
			<param name="rgFlags"> </param>
			<param name="rgpProjects"> </param>
			<param name="rgFirstIndices"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])">
			<param name="cProjects"> </param>
			<param name="cFiles"> </param>
			<param name="rgpszMkDocuments"> </param>
			<param name="rgFlags"> </param>
			<param name="rgpProjects"> </param>
			<param name="rgFirstIndices"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])">
			<param name="cDirectories"> </param>
			<param name="cProjects"> </param>
			<param name="rgpszMkDocuments"> </param>
			<param name="rgFlags"> </param>
			<param name="rgpProjects"> </param>
			<param name="rgFirstIndices"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])">
			<param name="cProjects"> </param>
			<param name="cFiles"> </param>
			<param name="rgpszMkDocuments"> </param>
			<param name="rgFlags"> </param>
			<param name="rgpProjects"> </param>
			<param name="rgFirstIndices"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])">
			<param name="rgszMkNewNames"> </param>
			<param name="cProjects"> </param>
			<param name="cDirs"> </param>
			<param name="rgFlags"> </param>
			<param name="rgszMkOldNames"> </param>
			<param name="rgpProjects"> </param>
			<param name="rgFirstIndices"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])">
			<param name="rgszMkNewNames"> </param>
			<param name="cProjects"> </param>
			<param name="cFiles"> </param>
			<param name="rgFlags"> </param>
			<param name="rgszMkOldNames"> </param>
			<param name="rgpProjects"> </param>
			<param name="rgFirstIndices"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])">
			<param name="rgdwSccStatus"> </param>
			<param name="cProjects"> </param>
			<param name="cFiles"> </param>
			<param name="rgpszMkDocuments"> </param>
			<param name="rgpProjects"> </param>
			<param name="rgFirstIndices"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])">
			<param name="cDirectories"> </param>
			<param name="rgResults"> </param>
			<param name="rgFlags"> </param>
			<param name="pSummaryResult"> </param>
			<param name="pProject"> </param>
			<param name="rgpszMkDocuments"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
			<param name="pSummaryResult"> </param>
			<param name="cFiles"> </param>
			<param name="rgResults"> </param>
			<param name="rgFlags"> </param>
			<param name="pProject"> </param>
			<param name="rgpszMkDocuments"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
			<param name="cDirectories"> </param>
			<param name="rgResults"> </param>
			<param name="rgFlags"> </param>
			<param name="pSummaryResult"> </param>
			<param name="pProject"> </param>
			<param name="rgpszMkDocuments"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
			<param name="pSummaryResult"> </param>
			<param name="cFiles"> </param>
			<param name="rgResults"> </param>
			<param name="rgFlags"> </param>
			<param name="pProject"> </param>
			<param name="rgpszMkDocuments"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])">
			<param name="rgszMkNewNames"> </param>
			<param name="pSummaryResult"> </param>
			<param name="cDirs"> </param>
			<param name="rgResults"> </param>
			<param name="rgFlags"> </param>
			<param name="rgszMkOldNames"> </param>
			<param name="pProject"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])">
			<param name="rgszMkNewNames"> </param>
			<param name="pSummaryResult"> </param>
			<param name="cFiles"> </param>
			<param name="rgResults"> </param>
			<param name="rgFlags"> </param>
			<param name="rgszMkOldNames"> </param>
			<param name="pProject"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
			<param name="pEventSink"> </param>
			<param name="pdwCookie"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<param name="pvaOut"> </param>
			<param name="itemid"> </param>
			<param name="pvaIn"> </param>
			<param name="nCmdID"> </param>
			<param name="pguidCmdGroup"> </param>
			<param name="nCmdexecopt"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetCanonicalName(System.UInt32,System.String@)">
			<param name="itemid"> </param>
			<param name="pbstrName"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<param name="itemid"> </param>
			<param name="pguid"> </param>
			<param name="propid"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
			<param name="itemid"> </param>
			<param name="ppHierarchyNested"> </param>
			<param name="iidHierarchyNested"> </param>
			<param name="pitemidNested"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)">
			<param name="itemid"> </param>
			<param name="propid"> </param>
			<param name="pvar"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
			<param name="ppSP"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.ParseCanonicalName(System.String,System.UInt32@)">
			<param name="pitemid"> </param>
			<param name="pszName"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.QueryClose(System.Int32@)">
			<param name="pfCanClose"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<param name="itemid"> </param>
			<param name="pCmdText"> </param>
			<param name="prgCmds"> </param>
			<param name="cCmds"> </param>
			<param name="pguidCmdGroup"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<param name="itemid"> </param>
			<param name="propid"> </param>
			<param name="rguid"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetProperty(System.UInt32,System.Int32,System.Object)">
			<param name="itemid"> </param>
			<param name="propid"> </param>
			<param name="var"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<param name="psp"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.UnadviseHierarchyEvents(System.UInt32)">
			<param name="dwCookie"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.ParseCanonicalName(System.String,System.UInt32@)">
			<param name="itemId"> </param>
			<param name="name"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<param name="itemid"> </param>
			<param name="pCmdText"> </param>
			<param name="prgCmds"> </param>
			<param name="cCmds"> </param>
			<param name="pguidCmdGroup"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
			<param name="itemId"> </param>
			<param name="propId"> </param>
			<param name="guid"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetInnerProject(System.Object)">
			<param name="inner"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetProperty(System.UInt32,System.Int32,System.Object)">
			<param name="itemId"> </param>
			<param name="propId"> </param>
			<param name="property"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.System.IServiceProvider.GetService(System.Type)">
			<param name="serviceType"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.UnadviseHierarchyEvents(System.UInt32)">
			<param name="cookie"> </param>
		</member>
	</members>
</doc>