<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>Microsoft.VisualStudio.Package.LanguageService</name>
	</assembly>
	<members>
		<member name="T:Microsoft.VisualStudio.Package.AuthoringScope">
			<summary>Encapsulates information about the source as obtained from a parsing operation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringScope.#ctor">
			<summary>Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope"></see> class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetDataTipText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
			<summary>Returns a string to be used for a tool tip based on the specified location.</summary>
			<returns>If successful, returns a string containing the text for the tool tip; otherwise, returns a null value.</returns>
			<param name="span">A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> that describes the area over which the cursor can hover before the tool tip is dismissed from view.</param>
			<param name="col">[in] An offset within the line to look at for a tool tip.</param>
			<param name="line">[in] The line in the source to look at for a tool tip.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetDeclarations(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason)">
			<summary>Returns a list of declarations based on the specified reason for parsing.</summary>
			<returns>If successful returns a <see cref="T:Microsoft.VisualStudio.Package.Declarations"></see> object; otherwise, returns a null value.</returns>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that can be used to access the source.</param>
			<param name="col">[in] The offset into the line where the parse operation started.</param>
			<param name="line">[in] The line number where the parse operation started.</param>
			<param name="reason">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseReason"></see> value describing what kind of parse operation was completed.</param>
			<param name="info">[in] A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> structure containing information about the token at the specified position. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringScope.GetMethods(System.Int32,System.Int32,System.String)">
			<summary>Returns a list of overloaded method signatures for a specified method name.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> object; otherwise, returns a null value.</returns>
			<param name="name">[in] The name of the method for which to get permutations.</param>
			<param name="col">[in] The offset into the line where the parse for method signatures started.</param>
			<param name="line">[in] The line number where the parse for method signatures started.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringScope.Goto(Microsoft.VisualStudio.VSConstants.VSStd97CmdID,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
			<summary>Returns a URI (Universal Resource Identifier) based on the current location in the source and the specified command.</summary>
			<returns>If successful, returns a string containing the URI; otherwise, returns a null value.</returns>
			<param name="span">[out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object marking the selected text area for which the URI is determined.</param>
			<param name="cmd">[in] A value from the <see cref="T:Microsoft.VisualStudio.VSConstants.VSStd97CmdID"></see> enumeration that determines what kind of destination URI must be returned. This is the command the user entered, typically from a context menu.</param>
			<param name="col">[in] The offset into the line containing the text under the cursor.</param>
			<param name="line">[in] The line number containing the text under the cursor.</param>
			<param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object containing the text under the cursor.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.AuthoringSink">
			<summary>This class is used by the parser to gather information about the source being parsed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.#ctor(Microsoft.VisualStudio.Package.ParseReason,System.Int32,System.Int32,System.Int32)">
			<summary>Initializes the <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink"></see> class.</summary>
			<param name="maxErrors">[in] The maximum number of errors that are to be returned from the parser.</param>
			<param name="line">[in] The line number the parse started on.</param>
			<param name="col">[in] The offset into the line the parse started on.</param>
			<param name="reason">[in] The reason for the parse given as a value from the <see cref="T:Microsoft.VisualStudio.Package.ParseReason"></see> enumeration.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddError(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.Package.Severity)">
			<summary>Adds an error in parsing message for later reporting.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> indicating what triggered the error (this is used to mark the bad code).</param>
			<param name="sev">[in] The severity of the error: a value from the <see cref="T:Microsoft.VisualStudio.Package.Severity"></see> enumeration.</param>
			<param name="path">[in] The source file's path.</param>
			<param name="message">[in] The error message to report.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddHiddenRegion(Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion)">
			<summary>Adds the specified <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion"></see> object to the internal hidden regions list.</summary>
			<param name="r">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion"></see> object to add to the list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AddHiddenRegion(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Adds a new hidden region to the internal list based on the given <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span of code to be hidden.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.AutoExpression(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Adds the span of an expression to an internal list.</summary>
			<param name="expr">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the expression to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.CodeSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>This adds a span of executable code to an internal list.</summary>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the section of code to add to the list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.EndParameters(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Called to indicate the end of a method's parameter list.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the span of character or characters that denote the end of the parameter list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchPair(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32)">
			<summary>Called to add the spans of the two paired elements in an internal list.</summary>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the starting paired element.</param>
			<param name="priority">[in] A priority value used to sort overlapping pairs.</param>
			<param name="endContext">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the ending paired element.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.MatchTriple(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32)">
			<summary>Called to add a matching set of three elements to an internal list.</summary>
			<param name="startSpan">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the starting element.</param>
			<param name="middleSpan">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the middle element.</param>
			<param name="endSpan">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> Span object indicating the ending element.</param>
			<param name="priority">[in] A priority value used to sort overlapping triples.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.NextParameter(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Called when parsing a method parameter list and the parameter separator character has just been parsed.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the parameter separator character.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.QualifyName(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
			<summary>Called to note the location of a member reference.</summary>
			<param name="nameContext">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the member name.</param>
			<param name="name">[in] The member name as indicated by nameContext.</param>
			<param name="selectorContext">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the selector (for example, "." or "-&gt;").</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.StartName(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
			<summary>Called when an identifier is parsed.</summary>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the location of the identifier.</param>
			<param name="name">[in] The name of the identifier.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.AuthoringSink.StartParameters(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Called at the start of a method's parameter list.</summary>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object indicating the character or characters that start the parameter list.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.BraceMatching">
			<summary>Indicates if brace matching should be done for  a parse operation.</summary>
			<returns>Returns true if brace matching is to be done; otherwise, returns false (no brace matching allowed).</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Column">
			<summary>Gets the column the parsing started on.</summary>
			<returns>Returns the offset into the line as passed to the <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink"></see> constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.FindNames">
			<summary>Indicates whether identifiers are to be looked for.</summary>
			<returns>Returns true if searching of names is to be done; otherwise, returns false (name searching is not allowed).</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.FoundMatchingBrace">
			<summary>Tracks if a matching pair of braces was added to the internal list.</summary>
			<returns>Returns true if at least one pair of matching braces was added to the internal list; otherwise, returns false, if no matching braces have been added.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.HiddenRegions">
			<summary>Indicates whether hidden regions should be processed during the parse operation.</summary>
			<returns>Returns true if hidden regions should be processed; otherwise, returns false (ignore hidden regions).</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Line">
			<summary>Returns the line the parsing operation started on.</summary>
			<returns>Returns the line the parse started on as passed to the <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink"></see> constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.MethodParameters">
			<summary>Indicates whether to process method parameters during the parse operation.</summary>
			<returns>Returns true if method parameters should be processed; otherwise, returns false (ignore method parameters).</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.ProcessHiddenRegions">
			<summary>Indicates whether to update hidden regions.</summary>
			<returns>Returns true if any hidden regions have been added to the list; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.AuthoringSink.Reason">
			<summary>Returns the reason the parse operation was started.</summary>
			<returns>Returns a value from the <see cref="T:Microsoft.VisualStudio.Package.ParseReason"></see> enumeration.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.CodeWindowManager">
			<summary>Wraps an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow"></see> object for use in a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.Package.Source)">
			<summary>Initializes the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> class.</summary>
			<param name="service">[in] The <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> object representing the language service.</param>
			<param name="source">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object associated with the source file to be shown in the code window.</param>
			<param name="codeWindow">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow"></see> object supplied by Visual Studio that is to be managed by the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> class.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.AddAdornments">
			<summary>Called to add adornments or additional user interface (UI) elements to the text view.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.Close">
			<summary>Close down the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.Finalize">
			<summary>The destructor for the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.GetFilter(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> object associated with the specified text view.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> object; otherwise, returns a null value (the specified text view does not have a view filter in this language service).</returns>
			<param name="view">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object for which to retrieve the associated <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnKillFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Called when the specified text view loses focus.</summary>
			<param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> representing the text view that is losing focus.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnNewView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Called when a new text view is created.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="newView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the new text view.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.OnSetFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Called when the specified text view receives the focus.</summary>
			<param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that received the focus.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CodeWindowManager.RemoveAdornments">
			<summary>Called to remove any adornments on a text view that is being closed.</summary>
			<returns>If successful, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, this method returns an error code.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.CodeWindow">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow"></see> this <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> is managing.</summary>
			<returns>Always returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow"></see> supplied to the constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.DropDownHelper">
			<summary>Returns the drop-down helper class.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars"></see> object or returns a null value if there are no drop-down bars.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.LanguageService">
			<summary>Returns the language service that owns this code window manager.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> object given to the constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.Properties">
			<summary>Allows retrieving and updating the document properties.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object obtained in the constructor through a call to the <see cref="M:Microsoft.VisualStudio.Package.LanguageService.CreateDocumentProperties(Microsoft.VisualStudio.Package.CodeWindowManager)"></see> method.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CodeWindowManager.Source">
			<summary>Returns the Source object associated with the view managed by this code window manager class.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object that was passed to the constructor.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.ColorableItem">
			<summary>Provides a default implementation of the VSIP interface <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ColorableItem.#ctor(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.COLORINDEX,Microsoft.VisualStudio.TextManager.Interop.COLORINDEX,System.Drawing.Color,System.Drawing.Color,Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS)">
			<summary>Initializes the <see cref="T:Microsoft.VisualStudio.Package.ColorableItem"></see> class and accepts all the information needed to describe a colorable item.</summary>
			<param name="foreColor">[in] The text's foreground color as specified by a value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX"></see> enumeration.</param>
			<param name="displayName">[in] The name of the colorable item that is displayed in the Fonts and Colors list of colors. This is the localized name.</param>
			<param name="backColor">[in] The text's background color as specified by a value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX"></see> enumeration.</param>
			<param name="hiBackColor">[in] A <see cref="T:System.Drawing.Color"></see> structure describing the background color in terms of red, green, blue components. This value can be Empty if high colors are not used.</param>
			<param name="name">[in] The name of the colorable item. This can be used in the properties listing if you support customizing your own custom colors.</param>
			<param name="hiForeColor">[in] A <see cref="T:System.Drawing.Color"></see> structure describing the foreground color in terms of red, green, blue components. This value can be Empty if high colors are not used. </param>
			<param name="fontFlags">[in] A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS"></see> enumeration describing how the text is to be rendered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetCanonicalName(System.String@)">
			<summary>Gets the canonical name of a colorable item.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="name">[out] A string containing the canonical name of this colorable item.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetColorData(System.Int32,System.UInt32@)">
			<summary>Get the specified high color foreground or background element.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="cdElement">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA"></see> enumeration specifying which color element to retrieve.</param>
			<param name="crColor">[out] Returns a COLORREF object that contains the RGB values for the specified color element.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
			<summary>Returns the foreground and background color for this colorable item.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="foreColor">[in, out] If not null, this is where the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX"></see> value for the text's foreground color is returned.</param>
			<param name="backColor">[in, out] If not null, this is where the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX"></see> value for the text's background color is returned.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDefaultFontFlags(System.UInt32@)">
			<summary>Returns the font attributes for this colorable item.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="fontFlags">[out] The set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS"></see> enumeration.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDescription(System.String@)">
			<summary>Returns a description for this colorable item.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="desc">[out] A string containing a description.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetDisplayName(System.String@)">
			<summary>Returns the name of this colorable item.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="name">[out] The name of the colorable item.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ColorableItem.GetMergingPriority(System.Int32@)">
			<summary>Returns the priority this colorable item has when compared to other colorable items of the same name.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="priority">[out] A priority value, the higher it is, the more preferred this colorable item.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.Colorizer">
			<summary>This class implements the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer"></see> interface and is used to support syntax highlighting in an editor.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.Package.IScanner)">
			<summary>Initializes the <see cref="T:Microsoft.VisualStudio.Package.Colorizer"></see> class.</summary>
			<param name="buffer"> </param>
			<param name="svc"> </param>
			<param name="scanner">[in] The <see cref="T:Microsoft.VisualStudio.Package.IScanner"></see> object that handles all parsing operations associated with syntax highlighting.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.CloseColorizer">
			<summary>Called when the colorizer is disposed off.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])">
			<summary>Obtains color and font attribute information for each character in the specified line of text.</summary>
			<returns>Returns the updated state value.</returns>
			<param name="attrs">[in, out] An array that is filled in with indices into the <see cref="M:Microsoft.VisualStudio.Package.LanguageService.GetColorableItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem@)"></see> list as maintained by the <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> class.</param>
			<param name="state">[in] The current state as maintained by the parser.</param>
			<param name="ptr">[in] An unmarshaled pointer to a line of text.</param>
			<param name="line">[in] The line number from which the line of text came from.</param>
			<param name="length">[in] The number of characters in the given text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.Finalize">
			<summary>Called when the object is about to be destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.GetColorInfo(System.String,System.Int32,System.Int32)">
			<summary>Returns the parsing state at the end of the line without returning any colorization information.</summary>
			<returns>Returns the parsing state at the end of the line.</returns>
			<param name="state">[in] The initial parsing state of the line.</param>
			<param name="line">[in] The text of the line.</param>
			<param name="length">[in] The length of the line.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.GetLineInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState)">
			<summary>Returns color information about the specified line.</summary>
			<returns>If successful, returns an array of <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> objects describing each token on the line; otherwise, returns a null value.</returns>
			<param name="colorState">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState"></see> object from which cached state information can be obtained for a line.</param>
			<param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object containing the entire source file.</param>
			<param name="line">[in] The index of the line for which to get color information.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStartState(System.Int32@)">
			<summary>Returns the initial parsing state.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="start">[out] Returns the initial parsing state.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStateAtEndOfLine(System.Int32,System.Int32,System.IntPtr,System.Int32)">
			<summary>Returns the parsing state at the end of the specified line.</summary>
			<returns>Returns the parsing state at the end of the line.</returns>
			<param name="state">[in] The parsing state at the beginning of the line.</param>
			<param name="ptr">[in] An unmarshaled pointer to the text. The example in <see cref="M:Microsoft.VisualStudio.Package.Colorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])"></see> shows how to marshal this pointer to a string.</param>
			<param name="line">[in] The line number from where the text came from.</param>
			<param name="length">[in] The length of the text to examine.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.GetStateMaintenanceFlag(System.Int32@)">
			<summary>Called to determine if the colorizer requires per line state management.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="flag">[out] Returns nonzero if the colorizer requires parsing state to be tracked per line; otherwise, returns zero.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.Resume">
			<summary>Called to resume use of the colorizer.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Colorizer.Suspend">
			<summary>Called to suspend use of the colorizer.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Colorizer.Scanner">
			<summary>Returns the scanner being used.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.Package.IScanner"></see> object.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.CommentInfo">
			<summary>Provides the characters that define comments for a language service.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CommentInfo.BlockEnd">
			<summary>Specifies the string of characters that define the end of a block comment.</summary>
			<returns>Returns the string of characters that define the end of a block comment.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CommentInfo.BlockStart">
			<summary>Specifies the string of characters that define the start of a block comment.</summary>
			<returns>Returns the string of characters that define the start of a block comment.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CommentInfo.LineStart">
			<summary>Specifies the string of characters that define the start of a line comment.</summary>
			<returns>Returns the string of characters that define the start of a line comment.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CommentInfo.UseLineComments">
			<summary>Specifies whether line comments are supported.</summary>
			<returns>Returns true if line comments are support; otherwise, returns false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.CompletionSet">
			<summary>Represents an IntelliSense completion list that is displayed in the current text view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.#ctor(System.Windows.Forms.ImageList,Microsoft.VisualStudio.Package.Source)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet"></see> class.</summary>
			<param name="imageList">[in] An <see cref="T:System.Windows.Forms.ImageList"></see> object containing the images to be used in the completion list display. This cannot be null. It can however, be an empty list..</param>
			<param name="source">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object representing the source file to be affected by the completion list. This cannot be null.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.Close">
			<summary>Closes the completion list display.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.Dismiss">
			<summary>Called when the completion list is no longer needed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.Dispose">
			<summary>Deallocates any resources just before the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetBestMatch(System.String,System.Int32,System.Int32@,System.UInt32@)">
			<summary>Determines which item in the list is the best match for the text typed so far by the user.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="flags">[out] Returns a set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags"></see> enumeration.</param>
			<param name="textSoFar">[in] A string containing the text that has been typed by the user.</param>
			<param name="length">[in] The length of the text typed by the user.</param>
			<param name="index">[out] Returns the index of the item in the <see cref="T:Microsoft.VisualStudio.Package.Declarations"></see> object that best matches the typed text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetCount">
			<summary>Returns the number of items that can be displayed in the completion list.</summary>
			<returns>Returns a number indicating the number of items to be displayed.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetDescriptionText(System.Int32,System.String@)">
			<summary>Returns a description for the specified item in the completion list.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error.</returns>
			<param name="description">[out] Returns a string containing the description or returns null if there is no description.</param>
			<param name="index">[in] The index of the item for which to get a description.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetDisplayText(System.Int32,System.String@,System.Int32[])">
			<summary>Returns the text and image index to display in the completion list for the specified item.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="glyph">[in, out] Returns the index of the image to display or returns -1 if no image is to be displayed. This parameter can be null, indicating the caller does not want the image index.</param>
			<param name="index">[in] The index of the item for which to get the display text and image.</param>
			<param name="text">[out] Returns a string containing the display text or returns null if there is no display text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetFlags">
			<summary>Returns a set of flags specifying the behavior of the completion list.</summary>
			<returns>Returns a set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags"></see> enumeration; specifically, from the CSF_* group.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetImageList(System.IntPtr@)">
			<summary>Returns the image list to use for the glyphs in the completion list.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="phImages">[out] Returns the handle to an image list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.GetInitialExtent(System.Int32@,System.Int32@,System.Int32@)">
			<summary>Determines the initial extent of the text to be completed.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="line">[out] Returns the line number the text is on.</param>
			<param name="startIdx">[out] Returns the character offset to the first character of the text.</param>
			<param name="endIdx">[out] Returns the character offset of the last character of the text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.Init(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Declarations,System.Boolean)">
			<summary>Initializes the completion set object.</summary>
			<param name="completeWord">[in] This is true if part of a word is to be completed; otherwise, this is false (the user selected Complete Word from the IntelliSense menu with the caret not positioned immediately after any text. This displays all possible completions available).</param>
			<param name="declarations">[in] A <see cref="T:Microsoft.VisualStudio.Package.Declarations"></see> object that manages the list of declarations to show in the completion list.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that displays the source file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnAutoComplete">
			<summary>Called after completion text has been committed to the source file.</summary>
			<returns>Returns a character to be inserted after the committed text. Returns 0 if no character is to be inserted.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompletionSet.OnCommit(System.String,System.Int32,System.Int32,System.UInt16,System.String@)">
			<summary>Retrieves the text to be inserted into the source file -- if the specified character is a commit character.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If the commitChar parameter is not a commit character, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> (do not commit the text to the source file); otherwise, returns an error code.</returns>
			<param name="commitChar">[in] The typed character that triggered the completion list.</param>
			<param name="completeWord">[out] Returns the string to insert in the source.</param>
			<param name="selected">[in] Nonzero if an item is selected in the completion list (the index of the selected item is in the index parameter). If this parameter is zero, the index parameter is to be ignored.</param>
			<param name="textSoFar">[in] A string containing the text that has been typed so far by the user.</param>
			<param name="index">[in] The index of the item in the completion list that is currently selected.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CompletionSet.Declarations">
			<summary>Determines the <see cref="T:Microsoft.VisualStudio.Package.Declarations"></see> object this completion set uses.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.Declarations"></see> object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CompletionSet.IsCommitted">
			<summary>Determines whether any text has been committed to the source file.</summary>
			<returns>If text has been committed to the source file, returns true; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CompletionSet.IsDisplayed">
			<summary>Determines whether the completion list is currently displayed.</summary>
			<returns>If the completion list is displayed, returns true; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.CompletionSet.OnCommitText">
			<summary>Determines the text that is to be committed to the source file.</summary>
			<returns>If there is text to commit, returns a string containing the text; otherwise, returns null.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.Completor">
			<summary>Wraps and applies multiple changes to a text view as a single operation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Completor"></see> class.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> representing the view currently being edited.</param>
			<param name="description">[in] A string used to describe the pending edit operation.</param>
			<param name="langsvc">[in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.Apply">
			<summary>Applies all changes made through the <see cref="T:Microsoft.VisualStudio.Package.Completor"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.Dispose">
			<summary>Cleans up any allocations made just before the object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.RefreshLine">
			<summary>Obtains the current line of text from the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.TypeBackspace(System.Int32)">
			<summary>Performs the specified number of backspaces on the line being edited and updates the internal caret position.</summary>
			<param name="len">[in] The number of backspaces to perform.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.TypeChar(System.Char)">
			<summary>Inserts the specified character and updates the internal caret position.</summary>
			<param name="ch">[in] The character to insert.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.TypeChars(System.String)">
			<summary>Inserts the specified string of characters and updates internal caret position.</summary>
			<param name="s">[in] A string containing the characters to insert.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.TypeDelete(System.Int32)">
			<summary>Performs the specified number of delete operations on the line being edited.</summary>
			<param name="len">[in] The number of delete operations to perform.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.TypeLeft(System.Int32)">
			<summary>Moves the internal caret position the specified number of positions to the left.</summary>
			<param name="len">[in] The number of positions to move to the left.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Completor.TypeRight(System.Int32)">
			<summary>Moves the internal caret position the specified number of positions to the right.</summary>
			<param name="len">[in] The number of positions to move to the right.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Completor.AtEndOfLine">
			<summary>Determines if the internal caret position is at the end of the current line.</summary>
			<returns>If the internal caret position is at the end of the line, returns true; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Completor.IsExpansionActive">
			<summary>Determines if a code snippet is being edited.</summary>
			<returns>If a code snippet is being edited, returns true; otherwise, returns false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.CompoundAction">
			<summary>Manages a group of edit operations that are treated as a single operation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundAction.#ctor(Microsoft.VisualStudio.Package.Source,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompoundAction"></see> class.</summary>
			<param name="src">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object that represents the source file to be edited.</param>
			<param name="description">[in] A string containing a description to label the undo action.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundAction.Abort">
			<summary>Terminates the current compound action, throwing away all edits.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundAction.Close">
			<summary>Closes the compound action and commits all edits to the source file.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundAction.Dispose">
			<summary>Deallocates any resources just before the <see cref="T:Microsoft.VisualStudio.Package.CompoundAction"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundAction.FlushEditActions">
			<summary>Flushes any pending edit actions from the current compound action.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.CompoundViewAction">
			<summary>Manages multiple edit actions that are treated as a single operation, optimized for a text view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.#ctor(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.CompoundViewAction"></see> class.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that is to receive the edit events.</param>
			<param name="description">[in] A string containing a description to label the undo action.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.Abort">
			<summary>Terminates the current compound action, throwing away all edits.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.Close">
			<summary>Closes the compound action and commits all edits to the source file.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.Dispose">
			<summary>Deallocates any resources just before the <see cref="T:Microsoft.VisualStudio.Package.CompoundViewAction"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.CompoundViewAction.FlushEditActions">
			<summary>Flushes any pending edit actions from the current compound action.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.Declarations">
			<summary>Manages a list of declarations to be shown in an IntelliSense drop-down list.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.#ctor">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Declarations"></see> class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.Dispose">
			<summary>Frees up any resources allocated by the class just before the class object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.GetBestMatch(System.String,System.Int32@,System.Boolean@)">
			<summary>Determines the best completion match for the specified value.</summary>
			<param name="value">[in] The text to match against. This typically represents the text typed by the user.</param>
			<param name="uniqueMatch">[out] Returns true if the best match is the only match and it matches the value exactly; otherwise, returns false.</param>
			<param name="index">[out] Returns the index of the item that best matches the value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.GetCount">
			<summary>Returns the number of items in the list of declarations.</summary>
			<returns>Returns a number indicating the count of items represented by this <see cref="T:Microsoft.VisualStudio.Package.Declarations"></see> class.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.GetDescription(System.Int32)">
			<summary>Returns a description of the specified item.</summary>
			<returns>If successful, returns a string containing the description; otherwise, returns null.</returns>
			<param name="index">[in] The index of the item for which to get the description.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.GetDisplayText(System.Int32)">
			<summary>Returns the text to be displayed in the completion list for the specified item.</summary>
			<returns>If successful, returns a string containing the text to be displayed; otherwise, returns null.</returns>
			<param name="index">[in] The index of the item for which to get the display text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.GetGlyph(System.Int32)">
			<summary>Determines which image to show next to the specified item.</summary>
			<returns>If successful, returns the index of the image from an image list; otherwise, returns -1.</returns>
			<param name="index">[in] The index of the item for which to get the image index.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.GetInitialExtent(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32@,System.Int32@,System.Int32@)">
			<summary>Returns the initial extent of the text to be completed.</summary>
			<returns>If the initial extent was determined, returns true; otherwise, returns false.</returns>
			<param name="line">[out] The line number the caret is currently on.</param>
			<param name="startIdx">[out] The character offset on the line to the first character of the text that is to trigger the commit.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that displays the source file.</param>
			<param name="endIdx">[out] The character offset to the last character of the text that is to trigger the commit.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.GetName(System.Int32)">
			<summary>Returns the name or text to be inserted for the specified item.</summary>
			<returns>If successful, returns the name of the item; otherwise, returns null.</returns>
			<param name="index">[in] The index of the item for which to get the name.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.IsCommitChar(System.String,System.Int32,System.Char)">
			<summary>Determines if the specified character can be used to complete the specified text.</summary>
			<returns>If the character is a commit character, returns true; otherwise, returns false.</returns>
			<param name="selected">[in] The number of characters that are currently selected or -1 if nothing is selected.</param>
			<param name="textSoFar">[in] A string containing the text typed by the user.</param>
			<param name="commitCharacter">[in] The character to determine is a completion character.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.IsMatch(System.String,System.Int32)">
			<summary>Determines if the specified text matches some or all of the specified item.</summary>
			<returns>Returns true if the specified text is at the beginning of the specified item; otherwise, returns false.</returns>
			<param name="textSoFar">[in] A string containing the text typed by the user and to be matched.</param>
			<param name="index">[in] The index of the item to compare against.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.OnAutoComplete(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.Char,System.Int32)">
			<summary>Called after the declaration has been committed to the source file.</summary>
			<returns>Returns a character to be inserted after the committed text. If nothing is to be inserted, returns 0.</returns>
			<param name="index">[in] The index of the item that was committed to the source file.</param>
			<param name="committedText">[in] A string containing the text that was inserted as part of the completion process.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that displays the source file.</param>
			<param name="commitCharacter">[in] The character that was used to commit the text to the source file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Declarations.OnCommit(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.Char,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
			<summary>Called to commit the specified item to the source file.</summary>
			<returns>If successful, returns a string containing the text to commit to the source file; otherwise, returns null.</returns>
			<param name="index">[in] The index of the item to commit to the source file.</param>
			<param name="initialExtent">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying the text typed so far. Returns the span of the committed text.</param>
			<param name="textSoFar">[in] A string containing the text that has been typed by the user.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that displays the source file.</param>
			<param name="commitCharacter">[in] The character used to commit the text.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Declarations.LastBestMatch">
			<summary>Specifies the name of the item that best matches what has been typed so far.</summary>
			<returns>If a best match has been set, returns a string containing the name of the item; otherwise, returns an empty string.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.DefaultFieldValue">
			<summary>Associates a default value with a field name as defined in a code snippet template for a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DefaultFieldValue.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.DefaultFieldValue"></see> class.</summary>
			<param name="value">[in] A string containing the value of the field.</param>
			<param name="field">[in] A string containing the name of the field.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DefaultFieldValue.Field">
			<summary>Returns the name of the field.</summary>
			<returns>Returns the name that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DefaultFieldValue"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DefaultFieldValue.Value">
			<summary>Returns the value of the field.</summary>
			<returns>Returns the value that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DefaultFieldValue"></see> class constructor.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.DocumentProperties">
			<summary>Provides support for document-specific properties associated with a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentProperties.#ctor(Microsoft.VisualStudio.Package.CodeWindowManager)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> class.</summary>
			<param name="mgr">[in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object that uses this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Close">
			<summary>Closes down the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object so that its properties are no longer visible in the Properties window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentProperties.CountObjects(System.UInt32,System.UInt32@)">
			<summary>Returns the number of objects managed by this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="flags">[in] This is either <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL"></see> to count all objects, or <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED"></see> to count only the selected objects.</param>
			<param name="pc">[out] Returns the number of objects.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetCodeWindowManager">
			<summary>Retrieves the code window manager associated with this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetObjects(System.UInt32,System.UInt32,System.Object[])">
			<summary>Returns a list of objects managed by this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="flags">[in] This is either <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_ALL"></see> to get all objects, or <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED"></see> to get only the selected objects.</param>
			<param name="count">[in] The maximum number of objects to return.</param>
			<param name="ppUnk">[in, out] An array that is filled in with the objects to return.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentProperties.GetSource">
			<summary>Returns a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object associated with this <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object that is obtained from the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> class constructor.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentProperties.Refresh">
			<summary>Updates the Properties window with the latest property values.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentProperties.SelectObjects(System.UInt32,System.Object[],System.UInt32)">
			<summary>Called to manage the selection of multiple objects in the Properties window.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="flags">[in] This is <see cref="F:Microsoft.VisualStudio.Shell.Interop.Constants.SELOBJS_ACTIVATE_WINDOW"></see> to select the objects in the array; otherwise, the objects are de-selected.</param>
			<param name="sel">[in] The number of objects in the selobj array.</param>
			<param name="selobj">[in] An array of objects returned from the <see cref="M:Microsoft.VisualStudio.Package.DocumentProperties.GetObjects(System.UInt32,System.UInt32,System.Object[])"></see> method.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DocumentProperties.Visible">
			<summary>Determines if the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object is visible in the Properties window.</summary>
			<returns>If the <see cref="T:Microsoft.VisualStudio.Package.DocumentProperties"></see> object is visible, returns true; otherwise, returns false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.DocumentTask">
			<summary>Represents an item for a language service in the Error List Options window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.#ctor(System.IServiceProvider,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
			<param name="buffer"> </param>
			<param name="site"> </param>
			<param name="span"> </param>
			<param name="fileName"> </param>
			<param name="markerType"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.Dispose">
			<summary>Recovers resources allocated just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.Dispose(System.Boolean)">
			<summary>Recovers resources allocated just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> object is destroyed.</summary>
			<param name="disposing">[in] This is true if disposing the object just before destruction; otherwise, false.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32)">
			<param name="item"> </param>
			<param name="marker"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.Finalize">
			<summary>Recovers resources allocated just before the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32,System.String[],System.UInt32[])">
			<param name="item"> </param>
			<param name="marker"> </param>
			<param name="commandFlags"> </param>
			<param name="text"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.String[])">
			<param name="marker"> </param>
			<param name="tipText"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnAfterMarkerChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
			<param name="marker"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnBufferSave(System.String)">
			<param name="fileName"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnNavigate(System.EventArgs)">
			<summary>Loads the document associated with the error and jumps to the location of the error.</summary>
			<param name="e">[in] An <see cref="T:System.EventArgs"></see> object (which in this case does not contain any information and used only as a placeholder in a delegate object).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DocumentTask.OnRemoved(System.EventArgs)">
			<summary>Called when this <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> object is removed from the Error List Options window.</summary>
			<param name="e">[in] An <see cref="T:System.EventArgs"></see> object (which in this case does not contain any information and used only as a placeholder in a delegate object).</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DocumentTask.Site">
			<summary>Returns the service provider.</summary>
			<returns>Returns the <see cref="T:System.IServiceProvider"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DocumentTask.Span">
			<summary>Returns the span where the error occurred.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object from either the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker"></see> object (that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> class constructor) or, if the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker"></see> object is null, returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DocumentTask.TextLineMarker">
			<summary>Returns the text line marker object describing the location of the error.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> class constructor.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.DropDownMember">
			<summary>Represents a single entry in a combo box on a drop-down bar.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DropDownMember.#ctor(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> class.</summary>
			<param name="glyph">[in] An index into a image list to a glyph that is shown with this entry in the combo box.</param>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that specifies the location in the source this entry represents.</param>
			<param name="fontAttribute">[in] A collection flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR"></see> enumeration describing how to render the label in the combo box.</param>
			<param name="label">[in] A string representing the text to be shown in the combo box.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DropDownMember.CompareTo(System.Object)">
			<summary>Compares this object to the specified object.</summary>
			<returns>Returns 1 if this object is greater than the specified object, returns 0 if this object equals the specified object, returns -1 if this object is less than the specified object.</returns>
			<param name="obj">[in] The <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare to.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DropDownMember.Equals(System.Object)">
			<summary>Determines whether this object equals the specified object.</summary>
			<returns>Returns true if this object equals the specified object; otherwise, returns false.</returns>
			<param name="obj">[in] The <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare to.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DropDownMember.GetHashCode">
			<summary>Returns a hash code value for this <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object.</summary>
			<returns>Returns a value that can be used as a hash code to represent this object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_Equality(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
			<summary>Determines if two <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> objects are equal.</summary>
			<returns>Returns true if the two <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> objects are equal; otherwise, returns false.</returns>
			<param name="m2">[in] The second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare.</param>
			<param name="m1">[in] The first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_GreaterThan(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
			<summary>Determines if the first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> is greater than the second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see>.</summary>
			<returns>Returns true if the first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object is greater than the second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object; otherwise, returns false.</returns>
			<param name="m2">[in] The second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare.</param>
			<param name="m1">[in] The first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_Inequality(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
			<summary>Determines if two <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> objects are not equal.</summary>
			<returns>Returns true if the two <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> objects are not equal; otherwise, returns false.</returns>
			<param name="m2">[in] The second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare.</param>
			<param name="m1">[in] The first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.DropDownMember.op_LessThan(Microsoft.VisualStudio.Package.DropDownMember,Microsoft.VisualStudio.Package.DropDownMember)">
			<summary>Determines if the first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object is less than the second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object.</summary>
			<returns>Returns true if the first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object is less than the second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object; otherwise, returns false.</returns>
			<param name="m2">[in] The second <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare.</param>
			<param name="m1">[in] The first <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object to compare.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DropDownMember.FontAttr">
			<summary>Specifies the font attributes to use for rendering the entry's text.</summary>
			<returns>Returns the collection of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR"></see> enumeration that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DropDownMember.Glyph">
			<summary>Returns the image index to associate with the entry's text.</summary>
			<returns>Returns the image index that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DropDownMember.Label">
			<summary>Returns the text to be displayed.</summary>
			<returns>Returns a string containing the text that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.DropDownMember.Span">
			<summary>Returns the span in the source file corresponding to the entry's text.</summary>
			<returns>Returns the TextSpan object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> class constructor.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.EditArray">
			<summary>Merges multiple edit operations to create a single operation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditArray.#ctor(Microsoft.VisualStudio.Package.Source,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Boolean,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.EditArray"></see> class using a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object and an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object.</summary>
			<param name="merge">[in] This is true if the edits are to be merged where possible; otherwise this is false.</param>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that displays the source.</param>
			<param name="description">[in] A string containing a brief description of the edit operations.</param>
			<param name="source">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object representing the source to be changed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditArray.Add(Microsoft.VisualStudio.Package.EditSpan)">
			<summary>Adds the specified <see cref="T:Microsoft.VisualStudio.Package.EditSpan"></see> object to the array of edit operations.</summary>
			<param name="editSpan">[in] An <see cref="T:Microsoft.VisualStudio.Package.EditSpan"></see> object describing an edit operation.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditArray.ApplyEdits">
			<summary>Applies all edit operations that have been accumulated.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.EditArray.Count">
			<summary>Returns the number of edit operations represented in the <see cref="T:Microsoft.VisualStudio.Package.EditArray"></see> object.</summary>
			<returns>Returns the number of edit operations that can be applied.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.EditArray.Source">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object associated with this <see cref="T:Microsoft.VisualStudio.Package.EditArray"></see> object.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.EditArray.TextView">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object associated with this <see cref="T:Microsoft.VisualStudio.Package.EditArray"></see> object.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.EditorFactory">
			<summary>This class provides a default editor factory implementation that hosts the Visual Studio core editor.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.#ctor(Microsoft.VisualStudio.Shell.Package)">
			<summary>Creates an instance of the <see cref="T:Microsoft.VisualStudio.Package.EditorFactory"></see> class.</summary>
			<param name="package"><see cref="T:Microsoft.VisualStudio.Shell.Package"></see> object.</param>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.EditorFactory.GuidVSBufferDetectLangSid">
			<summary>This field is the GUID_VsBufferDetectLangSID.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.Close">
			<summary>Releases all service provides and sets the VSPackage object to NULL.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)">
			<summary>Used by the EditorFactory class to create the Visual Studio core editor, an editor that supports data/view separation.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pHier">An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> object.</param>
			<param name="itemid">Item identifier of the core editor instance.</param>
			<param name="existingDocData">Must be the docData object that is registered in the Running Document Table (RDT). This parameter is used to determine if a document buffer (Document Data object) has already been created. When an editor factory is asked to create a secondary view, then this parameter will be non-NULL indicating that there is no document buffer.</param>
			<param name="createDocFlags">Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS"></see> enumeration that defines the conditions under which to create the core editor.</param>
			<param name="docData">Document Data object. Returns the buffer for the document.</param>
			<param name="editorCaption">Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets, such as "[Form]". This value is passed as an input parameter to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method. If the file is [ReadOnly] the caption will be set during load of the file.</param>
			<param name="moniker">String form of the moniker identifier of the document in the project system. In the case of documents that are files, this is always the path to the file. This parameter can also be used to specify documents that are not files. For example, in a database-oriented project, this parameter could contain a string that refers to records in a table.</param>
			<param name="physicalView">Name of the physical view.</param>
			<param name="cancelled">Enumeration of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN"></see>. These flags are passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> Method. This value is set to 0 in EditorFactory implementation.</param>
			<param name="docView">Document View object. Returns NULL if an external editor exists, otherwise returns the view of the document.</param>
			<param name="cmdUI">Returns the Command UI GUID. This GUID is active when this editor is activated. Any UI element that is visible in the editor has to use this GUID. This GUID is used in the .ctc file in the satellite DLL where it indicates which menus and toolbars should be displayed when the document is active.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorView(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.String,System.String@,System.Guid@)">
			<summary>Creates a code window with the Visual Studio core editor.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="buffer">The buffer used to set the text buffer for all views in the code window.</param>
			<param name="editorCaption">Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets, such as "[Form]". This value is passed as an input parameter to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)"></see> method. If the file is [ReadOnly] the caption will be set during load of the file.</param>
			<param name="moniker">String form of the moniker identifier of the document in the project system. In the case of documents that are files, this is always the path to the file.</param>
			<param name="physicalView">Name of the physical view.</param>
			<param name="cmdUI"><see cref="F:Microsoft.VisualStudio.VSConstants.GUID_TextEditorFactory"></see></param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.Finalize">
			<summary>Destructor for the EditorFactory class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetExtensions">
			<summary>GetExtensions returns list of file extensions registered for this editor factory.</summary>
			<returns>Returns an array of strings containing the editor extensions for this instance of EditorFactory class.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetLanguageServiceGuid">
			<summary>Returns the language service GUID.</summary>
			<returns>This method returns the language service GUID for this EditorFactory instance. The base method returns Guid.Empty.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetPackage">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> object for the EditorFactory class.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Shell.Package"></see> object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.GetSite">
			<summary>Gets the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> site.</summary>
			<returns>This method returns the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> site</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.IsRegisteredExtension(System.String)">
			<summary>Determines if a file extension is registered with this EditorFactory.</summary>
			<returns>Returns true if the file extension is registered with EditorFactory, false otherwise.</returns>
			<param name="ext">A string containing the file extension.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.MapLogicalView(System.Guid@,System.String@)">
			<summary>Maps a logical view GUID to a physical view string for this specific EditorFactory class instance.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="logicalView">Unique identifier of the logical view.</param>
			<param name="physicalView">The name of the physical view to which the logical view is to be mapped.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditorFactory.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
			<summary>SetSite is called to set or site the service provider for this EditorFactory.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="psp">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object of the editor being initialized.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.EditorFactory.CodePagePrompt">
			<summary>Gets and sets flags to prompt user for an encoding on an open with specified codepage.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS"></see> enumeration value.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.EditSpan">
			<summary>Describes an edit operation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.EditSpan.#ctor(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.EditSpan"></see> class.</summary>
			<param name="insertText">[in] The text to insert/replace.</param>
			<param name="toReplace">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span to affect.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.EditSpan.LengthOfLastLine">
			<summary>Returns the length of the last line in the replacement text.</summary>
			<returns>Returns the number of characters on the last line of the replacement text.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.EditSpan.LineCount">
			<summary>Returns the number of lines in the replacement text.</summary>
			<returns>Returns the number of lines in the replacement text.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.EditSpan.Span">
			<summary>Determines the span to be replaced.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span to be replaced.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.EditSpan.Text">
			<summary>Determines the replacement text.</summary>
			<returns>Returns a string containing the text to replace with.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.ExpansionFunction">
			<summary>Provides support for expansion functions in code snippets for a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.#ctor(Microsoft.VisualStudio.Package.ExpansionProvider)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction"></see> class.</summary>
			<param name="provider">[in] The <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> object </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.FieldChanged(System.String,System.Int32@)">
			<summary>Called when a field has changed its value.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="bstrField">[in] A string containing the name of the field that was changed.</param>
			<param name="fRequeryValue">[out] Returns nonzero if the expansion function depends on the value of the specified field and needs to be requeried; otherwise, returns zero.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetArgument(System.Int32)">
			<summary>Returns the value of the specified argument.</summary>
			<returns>If successful, returns a string containing the value of the specified argument; otherwise, returns a null value.</returns>
			<param name="index">[in] An index into the arguments list for this expansion function.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetCurrentValue">
			<summary>Returns the current value of the expansion function as a string.</summary>
			<returns>If successful, returns a string containing the current value of the expansion function; otherwise, returns a null value.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetDefaultValue">
			<summary>Returns the default value of the expansion function as a string.</summary>
			<returns>If successful, returns a string containing the default value; otherwise returns a null value.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetFieldValue(System.String,System.String@)">
			<summary>Returns the value of the specified field name.</summary>
			<returns>If the value was obtained, returns true; otherwise, returns false.</returns>
			<param name="name">[in] The name of the field for which to get a value.</param>
			<param name="value">[out] Returns a string containing the requested value or null if the value could not be obtained.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetFunctionType(System.UInt32@)">
			<summary>Returns the type of the function; that is, what type of value the function returns.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pFuncType">[out] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType"></see> enumeration specifying the type of the expansion function.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetIntellisenseList">
			<summary>Retrieves a list of all values the expansion function can return.</summary>
			<returns>If the type of the expansion function is a list, returns a list of values; otherwise, returns null.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetListCount(System.Int32@)">
			<summary>Returns the number of items in the list of values for the expansion function.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="iListCount">[out] Returns the number of items in the list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetListText(System.Int32,System.String@)">
			<summary>Returns the value of the specified list item.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppszText">[out] Returns a string containing the value of the requested list item.</param>
			<param name="iIndex">[in] The index of the item for which to get the value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.GetSelection">
			<summary>Returns the span of the selected text in the current view.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object containing the span of the selected text.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionFunction.ReleaseFunction">
			<summary>Frees up any allocations your <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction"></see> class may have made.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.Arguments">
			<summary>Specifies the list of arguments to the function.</summary>
			<returns>Returns an array of strings specifying each argument of the expansion function.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.ExpansionProvider">
			<summary>Returns the expansion provider that owns this expansion function.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ExpansionFunction.FieldName">
			<summary>Returns the name of the field with which this expansion function is associated.</summary>
			<returns>Returns the name of the field that was set after this <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction"></see> object was created.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.ExpansionProvider">
			<summary>Provides support for inserting code snippets in to source code.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> class.</summary>
			<param name="src">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object describing the source that this expansion provider supports.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.BeginTemplateEditing(System.Int32,System.Int32)">
			<summary>Inserts the previously prepared code snippet and starts the snippet editing mode.</summary>
			<param name="line">[in] The line number where the insertion is to take place.</param>
			<param name="col">[in] The character offset on the line where the insertion is to take place.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.DisplayExpansionBrowser(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String[],System.Boolean,System.String[],System.Boolean)">
			<summary>Displays a list of expansion templates of the specified type and kind.</summary>
			<returns>If successful, returns true; otherwise, returns false, the browser box was not displayed.</returns>
			<param name="types">[in] An array of strings containing the types of expansions to show. If this array is empty or a null value, then all types are shown in the browser box.</param>
			<param name="includeNullType">[in] This is true to allow "empty" types through the filter even if the types array is specified.</param>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that represents the view the source file is in and the view that is the parent of the browser box.</param>
			<param name="includeNullKind">[in] This is true to allow "empty" kinds through the filter even if the kinds array is specified.</param>
			<param name="prompt">[in] A string containing the prompt in the browser box.</param>
			<param name="kinds">[in] An array of strings containing the kinds of expansions to show. If this array is empty or a null value, then all kinds are shown in the browser box.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.Dispose">
			<summary>Cleans up allocated resource just before the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.EndExpansion">
			<summary>Called when an expansion session has ended.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.EndTemplateEditing(System.Boolean)">
			<summary>Ends the current snippet editing mode.</summary>
			<param name="leaveCaret">[in] This is true if the caret is to be left where it was before the snippet was inserted; otherwise, this is false if the caret is positioned where the snippet indicates.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.Finalize">
			<summary>Cleans up all resources just before the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.FindExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean,System.String@,System.String@)">
			<summary>Obtains the path and title of a code snippet given the snippet's shortcut name.</summary>
			<returns>If an expansion template was found, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns  an error code from the <see cref="T:Microsoft.VisualStudio.VSConstants"></see> enumeration.</returns>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view in which the snippet is to be inserted.</param>
			<param name="path">[out] Returns the path to the snippet template file.</param>
			<param name="showDisambiguationUI">[in] This is true if a user interface can be shown to resolve duplicate names; otherwise, false means to select the first expansion found that matches the shortcut name. </param>
			<param name="pos">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the position or selection in the current source.</param>
			<param name="shortcut">[in] A string containing the shortcut name of the snippet.</param>
			<param name="title">[out] Returns the title of the snippet found.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionFunction(System.Xml.XmlElement,System.String)">
			<summary>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction"></see> object representing the expansion function described in the given XML template node. </summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction"></see> object; otherwise, returns a null value indicating no expansion function was found in the specified XML node.</returns>
			<param name="xmlFunctionNode">[in] An <see cref="T:System.Xml.XmlElement"></see> object representing the expansion function definition.</param>
			<param name="fieldName">[in] The name of the variable or field this expansion function represents.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionFunction(MSXML.IXMLDOMNode,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction@)">
			<summary>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction"></see> object representing the expansion function described in the given XML template node (COM implementation).</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="xmlFunctionNode">[in] A <see cref="T:Microsoft.Office.Interop.InfoPath.Xml.IXMLDOMNode"></see> object representing the expansion function description.</param>
			<param name="fieldName">[in] The name of the variable or field this expansion function represents.</param>
			<param name="func">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction"></see> object representing the implementation of the expansion function.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetExpansionSpan">
			<summary>Returns the span occupied by the snippet currently being edited.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object representing the snippet's span in the source file.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.GetFieldValue(System.String,System.String@)">
			<summary>Returns the value of the specified field.</summary>
			<returns>If there is an expansion session in progress and the specified field exists and contains a value, returns true; otherwise, returns false.</returns>
			<param name="value">[out] A string containing the value of the field.</param>
			<param name="field">[in] A string containing the name of the field for which to get a value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandlePostExec(System.Guid@,System.UInt32,System.UInt32,System.Boolean,System.IntPtr,System.IntPtr)">
			<summary>Called after a command has been executed.</summary>
			<returns>If the command was handled, returns true; otherwise, returns false to let the caller handle the command.</returns>
			<param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> to hold the result of the command, if any.</param>
			<param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
			<param name="commit">[in] This is true if the code snippet has been committed to the source file.</param>
			<param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
			<param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandlePreExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Called before a command is executed.</summary>
			<returns>If the command was handled, returns true; otherwise, returns false to let the caller handle the command.</returns>
			<param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> to hold the result of the command, if any.</param>
			<param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
			<param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
			<param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.HandleQueryStatus(System.Guid@,System.UInt32,System.Int32@)">
			<summary>Determines if the specified command is handled by the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> class.</summary>
			<returns>If the command is supported by the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> class, returns true; otherwise, returns false.</returns>
			<param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
			<param name="hr">[out] Returns a combination of values from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD"></see> enumeration indicating support for the specified command.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertNamedExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean)">
			<summary>Inserts the specified snippet into the source at the given position.</summary>
			<returns>If a snippet was inserted, returns true; otherwise, returns false.</returns>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view showing the source.</param>
			<param name="path">[in] A string containing the path to the snippet template file.</param>
			<param name="showDisambiguationUI">[in] This is true if there is more than one snippet with the given title and a dialog box must be shown so the user can select which snippet to insert; otherwise, this is false (accept the first snippet with the given title).</param>
			<param name="pos">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying the position where the snippet is to be inserted.</param>
			<param name="title">[in] A string containing the name or title of the snippet.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertSpecificExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Xml.XmlElement,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
			<summary>Inserts the specific snippet into the source at the specified position.</summary>
			<returns>If the snippet was inserted, returns true; otherwise, returns false.</returns>
			<param name="snippet">[in] An <see cref="T:System.Xml.XmlElement"></see> object containing the snippet to insert.</param>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view showing the source.</param>
			<param name="relativePath">[in] A relative path to the snippet template file from which this snippet was taken.</param>
			<param name="pos">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying the position where the snippet is to be inserted.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnAfterInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
			<summary>Called after a snippet has been inserted into the source.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="session">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession"></see> object representing the expansion session that is currently active.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
			<summary>Called just before the snippet has been inserted into the source.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="session">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession"></see> object representing the expansion session that is currently active.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnItemChosen(System.String,System.String)">
			<summary>Called when an item is chosen in a snippet browser.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pszTitle">[in] A string containing the name of the snippet that was selected.</param>
			<param name="pszPath">[in] A string containing the path to the snippet template file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ExpansionProvider.PrepareTemplate(System.String,System.String)">
			<summary>Prepares for insertion of the specified snippet.</summary>
			<param name="path">[in] A string containing the path to the snippet template file.</param>
			<param name="title">[in] A string containing the name of the snippet to insert.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.Expansion">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion"></see> object used for inserting snippets into a buffer.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion"></see> object that was obtained from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object in the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> class constructor (<see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)"></see>).</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.ExpansionSession">
			<summary>Returns the expansion session created to manage editing the code snippet.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession"></see> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)"></see> method.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.InTemplateEditingMode">
			<summary>Indicates whether the code snippet is currently being edited.</summary>
			<returns>Returns true if the code snippet is currently being edited; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.Source">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object associated with this expansion provider.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> class constructor (<see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.#ctor(Microsoft.VisualStudio.Package.Source)"></see>).</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ExpansionProvider.TextView">
			<summary>Returns the text view containing the source file being manipulated by the expansion provider.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.DisplayExpansionBrowser(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String[],System.Boolean,System.String[],System.Boolean)"></see>, <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertSpecificExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Xml.XmlElement,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)"></see>, <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.InsertNamedExpansion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean)"></see>, and <see cref="M:Microsoft.VisualStudio.Package.ExpansionProvider.FindExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Boolean,System.String@,System.String@)"></see> methods.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.IndentingStyle">
			<summary>Represents the different indenting styles supported by language services.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.IndentingStyle.Block">
			<summary>Pressing Enter inserts a new line and causes the caret to move to the same position as the first non-whitespace character on the previous line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.IndentingStyle.None">
			<summary>Pressing Enter inserts a new line and causes the caret to always move to the beginning of the new line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.IndentingStyle.Smart">
			<summary>Pressing Enter inserts a new line and causes the caret to either move to the same position as the first non-whitespace character on the previous line or to indent or outdent automatically depending on the character at the end of the previous line. For example, in C#, pressing Enter after a "{" causes a new line to be inserted and cursor to be indented properly. In addition, the "{" may be moved to its own line. If Enter is pressed after a "}", however, a new line is entered and the caret is moved out one level of indentation.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.IScanner">
			<summary>Used as the base class for a language parser in a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.IScanner.ScanTokenAndProvideInfoAboutIt(Microsoft.VisualStudio.Package.TokenInfo,System.Int32@)">
			<summary>Parses the next language token from the current line and returns information about it.</summary>
			<returns>Returns true if a token was parsed from the current line and information returned; otherwise, returns false indicating no more tokens on the current line.</returns>
			<param name="state">[in, out] The scanner's current state value.</param>
			<param name="tokenInfo">[in, out] The <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> structure to be filled in.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.IScanner.SetSource(System.String,System.Int32)">
			<summary>Establishes the line to be parsed.</summary>
			<param name="offset">[in] The character offset into the line to start parsing. You must pay attention to this value.</param>
			<param name="source">[in] The line to be tokenized.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.LanguagePreferences">
			<summary>Provides support for language service-specific preferences.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.#ctor">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences"></see> class (default initialization only).</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.#ctor(System.IServiceProvider,System.Guid,System.String)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences"></see> class (this is the preferred method).</summary>
			<param name="name">[in] The name of the language service.</param>
			<param name="site">[in] An <see cref="T:System.IServiceProvider"></see> object supplying the service provider. This value cannot be null.</param>
			<param name="langSvc">[in] The GUID of the language service these preferences are associated with.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Apply">
			<summary>Applies all changes made to the preferences.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Dispose">
			<summary>Cleans up any allocated resources before the object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetBooleanValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
			<summary>Obtains a true/false value from the specified registry entry.</summary>
			<returns>Returns true if the registry entry exists and contains a non-zero value or the word "True" (case-insensitive comparison). Returns false if the registry entry exists and contains a zero value or the word "False" (case-insensitive comparison). Otherwise, returns the default value specified in def. Note: if the registry entry is a string, then any string other than "True" or "False" throws a <see cref="T:System.FormatException"></see>.</returns>
			<param name="def">[in] The default value to use if the registry entry is not found.</param>
			<param name="name">[in] The name of the registry entry for which to get the value.</param>
			<param name="key">[in] The <see cref="T:Microsoft.Win32.RegistryKey"></see> object representing the desired registry subkey.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetIntegerValue(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
			<summary>Obtains a numerical value from the specified registry entry.</summary>
			<returns>Returns the numerical value stored in the registry entry if the registry entry exists; otherwise, returns the value in def if the registry entry does not exist. If the registry entry is a string, then the string is evaluated as a number.</returns>
			<param name="def">[in] The default value to use if the registry entry is not found.</param>
			<param name="name">[in] The name of the registry entry for which to get the value.</param>
			<param name="key">[in] The <see cref="T:Microsoft.Win32.RegistryKey"></see> object representing the desired registry subkey.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetLanguagePreferences">
			<summary>Obtains the alterable user language settings from Visual Studio.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.GetSite">
			<summary>Returns the service provider.</summary>
			<returns>Returns the <see cref="T:System.IServiceProvider"></see> object that was passed to the constructor.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.Init">
			<summary>Initializes an instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences"></see> class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.InitMachinePreferences(Microsoft.Win32.RegistryKey,System.String)">
			<summary>Obtains language service-specific settings from the registry.</summary>
			<param name="name">[in] The name of the registry subkey containing the desired registry entries.</param>
			<param name="key">[in] The <see cref="T:Microsoft.Win32.RegistryKey"></see> object representing the desired base registry subkey.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.InitUserPreferences(Microsoft.Win32.RegistryKey,System.String)">
			<summary>Obtains user-alterable settings.</summary>
			<param name="name">[in] The name of the registry subkey containing the user settings.</param>
			<param name="key">[in] A <see cref="T:Microsoft.Win32.RegistryKey"></see> object representing the desired base registry subkey.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnRegisterMarkerType(System.Int32)">
			<summary>Handles event for when a new marker type is registered with Visual Studio.</summary>
			<param name="iMarkerType">[in] The ID of the marker type.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Handles event for when a view is registered.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that has been registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Handles event for when a view is closed.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that has been closed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguagePreferences.OnUserPreferencesChanged2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
			<summary>Handles event for whenever the user alters their preferences.</summary>
			<param name="viewPrefs">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2"></see> structure describing the user's view preferences.</param>
			<param name="framePrefs">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2"></see> structure describing the user's frame-oriented preferences.</param>
			<param name="fontColorPrefs">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2"></see> structure describing the user's font and color preferences.</param>
			<param name="langPrefs">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2"></see> structure describing the user's language service-specified preferences.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.AutoListMembers">
			<summary>Determines whether members are automatically listed as part of IntelliSense support.</summary>
			<returns>Returns true if a members list should be shown for auto-completion; otherwise, returns false (the list is not to be shown).</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.CodeSenseDelay">
			<summary>Determines the number of milliseconds the user must hold the cursor over an identifier before initiating any IntelliSense operation.</summary>
			<returns>Returns the number of milliseconds of delay.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.CutCopyBlankLines">
			<summary>Determines whether to include spaces on blank lines when cutting and copying.</summary>
			<returns>Returns true if blanks are to be preserved while cutting and copying; otherwise, return false; all spaces on a blank line are lost when cutting or copying.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableAsyncCompletion">
			<summary>Determines if background parsing is supported.</summary>
			<returns>Returns true if background parsing is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableCodeSense">
			<summary>Determines if IntelliSense is supported at all.</summary>
			<returns>Returns true if at least one IntelliSense operation is supported; otherwise, returns false: no IntelliSense operation is supported.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableCommenting">
			<summary>Determines if blocks of code can be commented and uncommented.</summary>
			<returns>Returns true if blocks of code can be commented and uncommented with a single operation; otherwise, returns false: commenting blocks in a single operation is not supported.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableFormatSelection">
			<summary>Determines if code can be formatted.</summary>
			<returns>Returns true if the code can be formatted; otherwise, returns false: no automatic formatting.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableLeftClickForURLs">
			<summary>Determines if URLs in the code can be followed by a simple click.</summary>
			<returns>Returns true if URLs can be clicked on; otherwise, returns false: either URLs cannot be clicked on or the control key must be held down while clicking.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableMatchBraces">
			<summary>Determines if matching braces are supported.</summary>
			<returns>Returns true if matching braces are supported; otherwise, returns false. .</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableMatchBracesAtCaret">
			<summary>Determines if matching braces can be shown while typing a matching brace.</summary>
			<returns>Returns true if matching braces can be shown; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableQuickInfo">
			<summary>Determines if the IntelliSense Quick Info operation is supported.</summary>
			<returns>Returns true if Quick Info is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.EnableShowMatchingBrace">
			<summary>Determines if the text included in the span of the matching pair is shown in the status bar.</summary>
			<returns>Returns true if the text included in the matching pair span can be shown; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.HideAdvancedMembers">
			<summary>Determines if advanced members are hidden in the IntelliSense members list.</summary>
			<returns>Returns true if advanced members are hidden; otherwise, returns false, show all members.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.IndentSize">
			<summary>Determines the number of spaces to indent when formatting source.</summary>
			<returns>Returns the number of spaces to use for tab positions while formatting.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.IndentStyle">
			<summary>Determines the style used for formatting sections of text.</summary>
			<returns>Returns a value from the <see cref="T:Microsoft.VisualStudio.Package.IndentingStyle"></see> enumeration.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.InsertTabs">
			<summary>Determines whether to insert tabs instead of spaces when formatting sections of text.</summary>
			<returns>Returns true if to insert tabs; otherwise, returns false to indicate spaces should be inserted.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.LanguageName">
			<summary>Returns the name the language service is registered under.</summary>
			<returns>Returns a string containing the name of the language or a null value if the name was not set.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.LineNumbers">
			<summary>Determines whether line numbers are to be shown.</summary>
			<returns>Returns true if line numbers are to be shown; otherwise, returns false..</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.MaxErrorMessages">
			<summary>Determines the maximum number of error messages that can be shown at any one time.</summary>
			<returns>Returns the maximum number of error messages that can be shown.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.ParameterInformation">
			<summary>Determines whether the IntelliSense method tip operation is supported.</summary>
			<returns>Returns true if the method tip operation is supported; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.ShowNavigationBar">
			<summary>Determines if drop-down bars are to be shown.</summary>
			<returns>Returns true if drop-down bars can be shown; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.Site">
			<summary>Returns the service provider.</summary>
			<returns>Returns an <see cref="T:System.IServiceProvider"></see> object or a null value if the service provider was not set.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.TabSize">
			<summary>Determines the number of spaces a single tab covers.</summary>
			<returns>Returns the number of spaces in a tab character.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.VirtualSpace">
			<summary>Determines whether the editor should assume spaces at the end of all lines.</summary>
			<returns>Returns true if each line is considered to have virtual spaces at the end; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.WordWrap">
			<summary>Determines if word wrapping is enabled.</summary>
			<returns>Returns true if word wrapping is enabled; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguagePreferences.WordWrapGlyphs">
			<summary>Determines if a glyph should be shown for a line that is word-wrapped.</summary>
			<returns>Returns true if the glyph should be shown; otherwise, returns false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.LanguageService">
			<summary>This is the base class for a language service that supplies language features including syntax highlighting, brace matching, auto-completion, IntelliSense support, and code snippet expansion.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.#ctor">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.AddCodeWindowManager(Microsoft.VisualStudio.Package.CodeWindowManager)">
			<summary>Adds a code window manager to the language service.</summary>
			<param name="m">[in] An instance of the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])">
			<summary>Invokes a method on another thread.</summary>
			<returns>If successful, returns an <see cref="T:System.IAsyncResult"></see> object; otherwise, returns a null value if the invoke operation failed.</returns>
			<param name="args">[in] The possible arguments to the method being invoked.</param>
			<param name="method">[in] The method to invoke.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.BeginParse(Microsoft.VisualStudio.Package.ParseRequest,Microsoft.VisualStudio.Package.ParseResultHandler)">
			<summary>Starts a parse operation on a background thread.</summary>
			<param name="request">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> object containing the parameters of the parse operation.</param>
			<param name="handler">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseResultHandler"></see> that is called when the parsing is complete.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateCodeWindowManager(Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.Package.Source)">
			<summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> class.</summary>
			<returns>If successful, returns an instance of a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> class; otherwise, returns a null value.</returns>
			<param name="source">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object, representing the source file.</param>
			<param name="codeWindow">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow"></see> object representing a code window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateDocumentProperties(Microsoft.VisualStudio.Package.CodeWindowManager)">
			<summary>Instantiates a <see cref="T:Microsoft.Office.Core.DocumentProperties"></see> class.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.Office.Core.DocumentProperties"></see> object; otherwise, returns a null value.</returns>
			<param name="mgr">[in] A <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object that the document properties can refer to.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateDropDownHelper(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars"></see> class.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars"></see> object; otherwise, returns a null value.</returns>
			<param name="forView">[in] an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> representing the text view receiving the Navigation bar.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateExpansionFunction(Microsoft.VisualStudio.Package.ExpansionProvider,System.String)">
			<summary>Instantiates an <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction"></see> class.</summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction"></see> object; otherwise, returns a null value.</returns>
			<param name="functionName">[in] The name of the function the <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction"></see> represents.</param>
			<param name="provider">[in] The <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> that is to use the <see cref="T:Microsoft.VisualStudio.Package.ExpansionFunction"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateExpansionProvider(Microsoft.VisualStudio.Package.Source)">
			<summary>Instantiates an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> class.</summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> object; otherwise, returns a null value.</returns>
			<param name="src">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source"></see> representing the source file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateParseRequest(Microsoft.VisualStudio.Package.Source,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo,System.String,System.String,Microsoft.VisualStudio.Package.ParseReason,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Creates a request to satisfy the given reason for parsing that is then passed on to the parser.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> object; otherwise, returns a null value.</returns>
			<param name="sourceText">[in] The text to be parsed. This contains the entire source file's text.</param>
			<param name="reason">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseReason"></see> describing why the parse operation is being invoked.</param>
			<param name="view">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object containing the text buffer from which the source was obtained.</param>
			<param name="s">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object containing the source file.</param>
			<param name="line">[in] The line number to start parsing on.</param>
			<param name="info">[in] A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> structure that is to be filled in by the parsing operation for each token.</param>
			<param name="idx">[in] The character index in the line where parsing starts.</param>
			<param name="fname">[in] The file name of the source file. Can be null or empty.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
			<summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> class.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object; otherwise, returns a null value.</returns>
			<param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> buffer that the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object represents.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CreateViewFilter(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> class.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> object; otherwise, returns a null value.</returns>
			<param name="mgr">[in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object to associate with this view filter.</param>
			<param name="newView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that is to receive the new view filter.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.CurFileExtensionFormat(System.String)">
			<summary>Returns the index into the file extension list that matches the extension of the specified file name.</summary>
			<returns>If successful, returns a zero-based index into the file extension list that is returned from <see cref="M:Microsoft.VisualStudio.Package.LanguageService.GetFormatFilterList"></see>; otherwise, returns -1 to indicate the extension is not in the file extension list.</returns>
			<param name="fileName">[in] The file name from which to get the extension to look for.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.DispatchCommand(System.Guid,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Called to execute the specified command.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pvaOut">[out] A pointer to a place to return the results of the command.</param>
			<param name="cmdId">[in] The ID of the command to execute.</param>
			<param name="cmdGuid">[in] The GUID of the command to execute.</param>
			<param name="pvaIn">[in] A pointer to possible parameters for the command.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.Dispose">
			<summary>Called when the language service object is being destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.EndInvoke(System.IAsyncResult)">
			<summary>Retrieves the result of an asynchronous call started by <see cref="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])"></see>.</summary>
			<returns>Returns an object representing the return value from the method called by <see cref="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])"></see>.</returns>
			<param name="result">[in] The <see cref="T:System.IAsyncResult"></see> object returned by <see cref="M:Microsoft.VisualStudio.Package.LanguageService.BeginInvoke(System.Delegate,System.Object[])"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManager(Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager@)">
			<summary>Instantiates a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> class.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="mgr">[out] The new <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object.</param>
			<param name="codeWindow">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow"></see> with which to associate a new <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManagerForSource(Microsoft.VisualStudio.Package.Source)">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object associated with the specified <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object; otherwise, returns a null value indicating the specified source is not associated with a particular <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object managed by this language service.</returns>
			<param name="src">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object for which to get the associated <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetCodeWindowManagerForView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> associated with the specified <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object; otherwise, returns a null value indicating there is no associated <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object for the given <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object.</returns>
			<param name="view">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object for which to get the associated <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorableItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem@)">
			<summary>Returns the requested <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem"></see> object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="item">[out] Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem"></see> object.</param>
			<param name="index">[in] A zero-based index into the list of colorable items maintained by the language service.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
			<summary>Iinstantiates a <see cref="T:Microsoft.VisualStudio.Package.Colorizer"></see> class.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Colorizer"></see> object; otherwise, returns a null value.</returns>
			<param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object representing the buffer of text to colorize.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsColorizer@)">
			<summary>Returns the colorizer associated with a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object that contains the given <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object representing the buffer of text to colorize.</param>
			<param name="result">[out] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer"></see> object representing the colorizer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetFileExtensions(System.String@)">
			<summary>Returns a string containing the file extensions associated with this language.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="extensions">[out] Returns the extensions for this language.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetFormatFilterList">
			<summary>Returns a list of file extension filters suitable for a Save As dialog box.</summary>
			<returns>If successful, returns a string containing the file extension filters; otherwise, returns an empty string.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetImageList">
			<summary>Returns an image list containing glyphs associated with the language service.</summary>
			<returns>If successful, returns an <see cref="T:System.Windows.Forms.ImageList"></see> object; otherwise, returns a null value.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetItemCount(System.Int32@)">
			<summary>Returns the number of custom colorable items supported by the language service.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="count">[out] The number of custom colorable items available.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetIVsDebugger">
			<summary>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugger"></see> object representing the currently available debugger in order to listen for debugger events.</summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDebugger"></see> object; otherwise, returns a null value.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetIVsTextMacroHelperIfRecordingOn">
			<summary>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper"></see> object if macro recording is turned on.</summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper"></see> object; otherwise, returns a null value.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageID(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Guid@)">
			<summary>Returns the language GUID of the language service.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> containing the source for which to get the language id.</param>
			<param name="langId">[out] Returns the GUID of the language for the associated source.</param>
			<param name="line">[in] The line index into the buffer to the source for which to get the language.</param>
			<param name="col">[in] The character position in the line.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageName(System.String@)">
			<summary>Returns the name of the language this language service handles.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="name">[out] Returns the name of the language.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguagePreferences">
			<summary>Returns a <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences"></see> object for this language service.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences"></see> object; otherwise, returns a null value.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLanguageServiceGuid">
			<summary>Returns the GUID of the language service.</summary>
			<returns>Always returns the GUID of the language service.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetLocationOfName(System.String,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Obsolete method that always returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</summary>
			<returns>Always returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
			<param name="name">OBSOLETE</param>
			<param name="pbstrMkDoc">OBSOLETE</param>
			<param name="spans">OBSOLETE</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetNameOfLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.String@,System.Int32@)">
			<summary>Returns the name of the enclosing element that contains the given position.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if the location is not within a named entity or returns an error code.</returns>
			<param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> holding the source file.</param>
			<param name="name">[out] The name of the enclosing element.</param>
			<param name="line">[in] The desired line in the buffer.</param>
			<param name="lineOffset">[out] The offset from the start of the enclosing element to the given line.</param>
			<param name="col">[in] The desired offset on the line in the buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetProximityExpressions(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR@)">
			<summary>Returns a list of expressions to be evaluated and shown in the Autos window, for a given span of lines.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if there are no expressions; otherwise, returns an error code.</returns>
			<param name="ppEnum">[out] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR"></see> object that contains the list of expressions to examine. Return a null value to indicate no expressions.</param>
			<param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> holding the source file.</param>
			<param name="line">[in] The first line of the span to examine for expressions.</param>
			<param name="cLines">[in] The number of lines to examine.</param>
			<param name="col">[in] The offset on the first line to start looking for expressions.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetScanner(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
			<summary>Returns a single instantiation of a parser.</summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.IScanner"></see> object; otherwise, returns a null value.</returns>
			<param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> representing the lines of source to parse.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetService(System.Type)">
			<summary>Returns a service object that can be cast to a specific interface.</summary>
			<returns>If successful, returns an object that can be cast to a desired interface; otherwise, returns a null value (the service does not exist or is not available).</returns>
			<param name="serviceType">[in] The GUID of the service to get.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSite(System.Guid@,System.IntPtr@)">
			<summary>Returns an unmarshaled pointer to a requested interface.</summary>
			<param name="ptr">[out] Returns an unmarshaled interface pointer or a null value if the interface is not available.</param>
			<param name="iid">[in] The GUID of the desired interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
			<summary>Returns an existing <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object that contains the specified buffer of source.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object; otherwise, returns a null value (there is no <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object in this language service that controls that set of source lines).</returns>
			<param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object containing the lines of source.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Returns an existing <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object that contains the source file shown in the specified text view.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object; otherwise, returns a null value (there is no <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object in this language service that controls the set of source lines shown in the specified view).</returns>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that displays the source file for which to get the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSource(System.String)">
			<summary>Returns an existing <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object given a file name.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object; otherwise, returns a null value (there is no <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object in this language service that represents the specified file name).</returns>
			<param name="fname">[in] The file name for which to find the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.GetSources">
			<summary>Returns a collection of <see cref="T:Microsoft.VisualStudio.Package.Source"></see> objects maintained by the language service.</summary>
			<returns>Always returns an <see cref="T:System.Collections.IEnumerable"></see> object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.Initialize">
			<summary>Called to initialize the language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.Invoke(System.Delegate,System.Object[])">
			<summary>Called to invoke a task specified by the given delegate.</summary>
			<returns>Returns an <see cref="T:System.IAsyncResult"></see> object or null if the invoke operation failed.</returns>
			<param name="args">[in] An array of possible arguments for the method.</param>
			<param name="method">[in] The method to invoke as represented by a <see cref="T:System.Delegate"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.IsMacroRecordingOn">
			<summary>Called to determine if macro recording is turned on.</summary>
			<returns>Returns true if macro recording is on; otherwise, returns false.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.IsMappedLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32)">
			<summary>Called to determine if the specified location in the given source file references code in another file.</summary>
			<returns>If the position in the source file is mapped to another file, return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see>.</returns>
			<param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> containing the source file.</param>
			<param name="line">[in] The line in the buffer to locate.</param>
			<param name="col">[in] The offset into the line to locate.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.IsSourceOpen(Microsoft.VisualStudio.Package.Source)">
			<param name="src"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.CurFileExtensionFormat(System.String,System.UInt32@)">
			<summary>Returns the index into the file extension list that matches the extension of the specified file name.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pdwExtnIndex">[out] Returns the index into the extension list that references the extension on the given file name. Returns 0 if the extension is not in the list (0 represents "All files").</param>
			<param name="bstrFileName">[in] The file name from which to get the extension to look for.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.GetFormatFilterList(System.String@)">
			<summary>Returns a list of file extension filters suitable for a Save As dialog box.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pbstrFilterList">[out] A string containing pairs of descriptions and extensions.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.QueryInvalidEncoding(System.UInt32,System.String@)">
			<summary>Determines if the specified source format is valid or not.</summary>
			<returns>If the format is not supported, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, return <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> (the format is supported).</returns>
			<param name="format">[in] The format to test. This is a value from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF"></see> enumeration.</param>
			<param name="pbstrMessage">[out] An error string describing why or how the format is invalid. Could be as simple as "The XX format is not supported."</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.Microsoft.VisualStudio.TextManager.Interop.IVsLanguageContextProvider.UpdateLanguageContext(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object)">
			<summary>Updates the current user help context given a selected region of the given source.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ptr">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext"></see> object that is to be updated.</param>
			<param name="dwHint">[in] A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint"></see> enumeration.</param>
			<param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object holding the source.</param>
			<param name="ptsSelection">[in] A single <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the selected range of text (or the current caret position).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.OnActiveViewChanged(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Called when the current view has changed to a different view.</summary>
			<param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the new current view.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.OnCaretMoved(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32)">
			<summary>Called when the caret has moved.</summary>
			<param name="line">[in] The new line the caret is on.</param>
			<param name="mgr">[in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object controlling the code window that the caret moved in.</param>
			<param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that holds the view of the source file.</param>
			<param name="col">[in] the new column the caret is on.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Called when changes generated by an auto-complete or code snippet expansion operation is committed to the buffer.</summary>
			<param name="ptsChanged">[in] A single <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> describing the range of lines that was changed.</param>
			<param name="flags">[in] A collection of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags"></see> enumeration describing the change.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.OnCloseSource(Microsoft.VisualStudio.Package.Source)">
			<summary>Called to close the specified <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</summary>
			<param name="source">[in] The <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object to be closed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.OnIdle(System.Boolean)">
			<summary>Called when no other events need to be handled.</summary>
			<param name="periodic">[in] true if this call is one of a periodic series of idle calls, typically triggered by a timer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.OnModeChange(Microsoft.VisualStudio.Shell.Interop.DBGMODE)">
			<summary>Called whenever the debug mode has changed while debugging.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="dbgmodeNew">[in] The new debug mode as specified by a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DBGMODE"></see> enumeration.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.OnParseComplete(Microsoft.VisualStudio.Package.ParseRequest)">
			<summary>Called when a background parse has been completed.</summary>
			<param name="req">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> containing the parse request information for the just completed parse operation.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.OpenDocument(System.String)">
			<summary>Opens the specified file.</summary>
			<param name="path">[in] The specified file to open.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.ParseSource(Microsoft.VisualStudio.Package.ParseRequest)">
			<summary>Parses the source based on the specified <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> object.</summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope"></see> object; otherwise, returns a null value.</returns>
			<param name="req">[in] The <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> describing how to parse the source file.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.QueryInvalidEncoding(Microsoft.VisualStudio.TextManager.Interop.__VSTFF,System.String@)">
			<summary>Determines if the specified source format is valid or not.</summary>
			<returns>Returns true if the format is not supported by the language service; otherwise, returns false (the format is supported).</returns>
			<param name="format">[in] The format to test. This is a value from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF"></see> enumeration.</param>
			<param name="errorMessage">[out] An error string describing why or how the format is invalid. Could be as simple as "The XX format is not supported."</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
			<summary>Returns the request interface from the specified service.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="obj">[out] An unmarshaled pointer to the interface.</param>
			<param name="iid">[in] The GUID of the desired interface.</param>
			<param name="guidService">[in] The GUID of the service to query.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.RemoveCodeWindowManager(Microsoft.VisualStudio.Package.CodeWindowManager)">
			<summary>Called when the view associated with the specified <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> is closed.</summary>
			<param name="m">[in] The <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object that is being closed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.ResolveName(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)">
			<summary>Returns a list of method names that match the given name modified by the specified flags.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="name">[in] The name to match.</param>
			<param name="flags">[in] A collection of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS"></see> enumeration.</param>
			<param name="ppNames">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName"></see> object containing the list of name or a null value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.ScrollToEnd(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Updates the specified view to show the end of the source file.</summary>
			<param name="view">[in] The view to update.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.ScrollToEnd(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
			<summary>Updates the view in the specified window frame to show the end of the source file.</summary>
			<param name="frame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"></see> containing the view to update.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.SetSite(System.Object)">
			<summary>Called to set or site the service provider for this language service.</summary>
			<param name="site">[in] The object that is to be the parent service provider for this language service. This cannot be a null value!</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.SetUserContextDirty(System.String)">
			<summary>Marks the user context as dirty in the specified source buffer.</summary>
			<param name="fileName">[in] The file name of the source buffer for which to mark the user context dirty.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.SynchronizeDropdowns">
			<summary>Called to update a drop-down bar based on the current caret position.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.UpdateLanguageContext(Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.Shell.Interop.IVsUserContext)">
			<summary>Updates the current user help context in a selected region of the given source.</summary>
			<param name="hint">[in] A set of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint"></see> enumeration.</param>
			<param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object holding the source.</param>
			<param name="context">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext"></see> object that is to be updated.</param>
			<param name="ptsSelection">[in] A single <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the selected range of text (or the current caret position).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.LanguageService.ValidateBreakpointLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Called to determine if the given location can have a breakpoint applied to it.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if there is no code at the given position or returns an error code (the validation is deferred until the debug engine is loaded).</returns>
			<param name="buffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> object containing the source file.</param>
			<param name="pCodeSpan">[out] Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> giving the extent of the code affected by the breakpoint if the breakpoint can be set.</param>
			<param name="line">[in] The line number where the breakpoint is to be set.</param>
			<param name="col">[in] The offset into the line where the breakpoint is to be set.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.InvokeRequired">
			<summary>Determines if a method must be invoked across a thread boundary.</summary>
			<returns>Returns true if a method must be invoked across thread boundaries; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.IsActive">
			<summary>Determines whether the language service is connected to the current view and therefore is active.</summary>
			<returns>Returns true if the currently active view belongs to this language service; otherwise, returns false, the language service is not currently active.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.IsDebugging">
			<summary>Determines if the debugger is active.</summary>
			<returns>This property returns true if the debugger is active; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.IsParsing">
			<summary>Determines if a background parse is in progress.</summary>
			<returns>Returns true if a background parsing operation is running; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.LastActiveTextView">
			<summary>Returns the last active text view associated with this language service.</summary>
			<returns>Returns the last active text view as represented by an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> interface; otherwise, returns a null value.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.MainThreadId">
			<summary>Returns the id of the thread this language service is running on.</summary>
			<returns>Returns a thread id.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.Name">
			<summary>Returns the name of the language (for example, "C++" or "HTML").</summary>
			<returns>Returns a string containing the name of the language. This must return the same name the language service was registered with in Visual Studio.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.Preferences">
			<summary>Provides access to the language service preferences.</summary>
			<returns>Always returns a <see cref="T:Microsoft.VisualStudio.Package.LanguagePreferences"></see> object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.LanguageService.Site">
			<summary>Returns the service provider given to this language service.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object or a null value if <see cref="M:Microsoft.VisualStudio.Package.LanguageService.SetSite(System.Object)"></see> was not called with a valid service provider.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.MethodData">
			<summary>Provides support for the IntelliSense method tip operation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.#ctor(System.IServiceProvider)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.MethodData"></see> class.</summary>
			<param name="site">[in] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object that is to be used as the service provider.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.AdjustCurrentParameter(System.Int32)">
			<summary>Update the current parameter, either forward or backward, by the specified amount.</summary>
			<param name="increment">[in] A value to add to the current parameter index. This is negative if the parameter index is to be decremented.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.Close">
			<summary>Closes the method tip and clears the <see cref="T:Microsoft.VisualStudio.Package.MethodData"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.Dismiss">
			<summary>Dismisses the method tip from view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.Dispose">
			<summary>Frees any allocations made just before the <see cref="T:Microsoft.VisualStudio.Package.MethodData"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.GetContextStream(System.Int32@,System.Int32@)">
			<summary>Converts the current context span to a file position and length.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pos">[out] Returns the position in the source file that corresponds to the start of the context span.</param>
			<param name="length">[out] Returns the length of the span.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.GetCurMethod">
			<summary>Returns the currently visible method signature.</summary>
			<returns>Returns a number representing the currently visible method signature in the <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.GetCurrentParameter(System.Int32)">
			<summary>Returns the current parameter being edited in the specified method signature.</summary>
			<returns>Returns the current index into the parameter list for the specified method signature.</returns>
			<param name="method">[in] An index in the <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> object to the specified method signature.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)">
			<summary>Returns the specified text for the specified method signature.</summary>
			<returns>If successful, returns a marshaled pointer to the requested string; otherwise, returns a null value.</returns>
			<param name="type">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MethodTextType"></see> enumeration specifying what type of text to return.</param>
			<param name="method">[in] An index in the <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> object to the specified method signature.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.GetOverloadCount">
			<summary>Returns the number of method signatures that can be shown.</summary>
			<returns>If there is at least one method signature, returns the number of method signatures available; otherwise, returns 0.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.GetParameterCount(System.Int32)">
			<summary>Returns the number of parameters available for the specified method signature.</summary>
			<returns>If successful, returns the number of parameters; otherwise, returns 0.</returns>
			<param name="method">[in] An index in the <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> object to the specified method signature.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.GetParameterText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.ParameterTextType)">
			<summary>Returns the specified parameter text for the specified method signature.</summary>
			<returns>If successful, returns a marshaled pointer to the requested string; otherwise, returns a null value.</returns>
			<param name="type">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType"></see> enumeration specifying what type of text to return.</param>
			<param name="parameter">[in] An index to the specified parameter.</param>
			<param name="method">[in] An index in the <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> object to the specified method signature.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.NextMethod">
			<summary>Moves to the next method signature and returns the index of the current method signature.</summary>
			<returns>Returns a number representing the current method signature.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.OnDismiss">
			<summary>Called after the method tip is removed from view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.PrevMethod">
			<summary>Moves to the previous method signature and returns the index of the current method signature.</summary>
			<returns>Returns a number representing the current method signature.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.Refresh(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Methods,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Displays the method tip with the given method signatures.</summary>
			<param name="currentParameter">[in] The parameter to be highlighted initially. Set this to -1 to start before the first parameter. This value is typically determined by parsing what the user has typed so far since the start of the parameter list.</param>
			<param name="methods">[in] A <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> object representing the method signatures to be displayed.</param>
			<param name="context">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying the initial span containing the method name that has already been typed.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that displays the method tip.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.MethodData.UpdateView">
			<summary>Updates the method tip display.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.MethodData.IsDisplayed">
			<summary>Determines if the method tip is visible.</summary>
			<returns>If the method tip is displayed, returns true; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.MethodData.Methods">
			<summary>Determines the list of method signatures that can be displayed in the method tip.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.MethodData.Refresh(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Methods,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan)"></see> method.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.MethodData.MethodTipWindow">
			<summary>Determines the method tip window as represented by an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow"></see> interface.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow"></see> object that was created in the <see cref="T:Microsoft.VisualStudio.Package.MethodData"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.MethodData.Provider">
			<summary>Determines the service provider.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.MethodData"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.MethodData.TextView">
			<summary>Determines the view the method tip is displayed on.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that was passed to the <see cref="M:Microsoft.VisualStudio.Package.MethodData.Refresh(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.Methods,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan)"></see> method.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.Methods">
			<summary>Represents a collection of method signatures as obtained from a parsing operation in a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Methods.#ctor">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Methods"></see> class.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Methods.GetCount">
			<summary>Returns the number of overloaded method signatures represented in this collection.</summary>
			<returns>Returns the number of signatures in the collection.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Methods.GetDescription(System.Int32)">
			<summary>Returns the description of the specified method signature.</summary>
			<returns>If successful, returns a string containing the description for the specified method signature; otherwise, returns null if the method signature does not exist.</returns>
			<param name="index">[in] An index into the internal list to the desired method signature.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Methods.GetName(System.Int32)">
			<summary>Returns the name of the specified method signature.</summary>
			<returns>If successful, returns a string containing the name of the specified method; otherwise, returns a null value signature.</returns>
			<param name="index">[in] Index of the method whose name is to be returned.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Methods.GetParameterCount(System.Int32)">
			<summary>Returns the number of parameters on the specified method signature.</summary>
			<returns>If successful, returns the number of parameters on the specified method signature; otherwise, returns -1.</returns>
			<param name="index">[in] An index into the internal list to the desired method signature.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Methods.GetParameterInfo(System.Int32,System.Int32,System.String@,System.String@,System.String@)">
			<summary>Returns information about the specified parameter on the specified method signature.</summary>
			<param name="description">[out] Returns a string containing a description of the parameter.</param>
			<param name="display">[out] Returns a string containing the parameter name and type formatted for display.</param>
			<param name="parameter">[in] An index into the parameter list of the desired method signature.</param>
			<param name="name">[out] Returns the name of the parameter.</param>
			<param name="index">[in] An index into the internal list to the desired method signature.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Methods.GetType(System.Int32)">
			<summary>Returns the return type of the specified method signature.</summary>
			<returns>If successful, returns a string containing the return type of the specified method signature; otherwise, returns null.</returns>
			<param name="index">[in] An index into the internal list to the desired method signature.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Methods.CloseBracket">
			<summary>Determines the character to use at the end of a method parameter list.</summary>
			<returns>Returns a string containing the character to use at the end of a parameter list.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Methods.DefaultMethod">
			<summary>Determines the index of the initial method signature to show.</summary>
			<returns>Returns an index of the method signature to show the user when the IntelliSense method tip is first displayed.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Methods.Delimiter">
			<summary>Determines the character that separates parameters in a method's parameter list.</summary>
			<returns>Returns a string containing the parameter list separator.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Methods.OpenBracket">
			<summary>Determines the character to use at the start of a method's parameter list.</summary>
			<returns>Returns a string containing the character to use at the start of a parameter list.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Methods.TypePostfix">
			<summary>Determines the string to place after the return type of a method.</summary>
			<returns>Returns the string to use after a method's type.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Methods.TypePrefix">
			<summary>Determines the string to place before the return type of a method.</summary>
			<returns>Returns the string to place before a method's return type.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Methods.TypePrefixed">
			<summary>Determines if a method's return type comes before or after the method signature.</summary>
			<returns>Returns true if the type precedes the method's signature; otherwise, returns false indicating the type follows the method's signature.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.ParseReason">
			<summary>Provides reasons for a parsing operation in a language service.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.Autos">
			<summary>Parse the code block at the given location to obtain any expressions that might be of interest in the Autos debugging window (an expression is the name of variable or parameter that can be evaluated to produce a value).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.Check">
			<summary>Parse the entire source file, checking for errors. This pass should also create lists of matching language pairs, triplets, members, and methods.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.CodeSpan">
			<summary>Parse the section of code containing the specified location to find the extent of the statement. Used in validating breakpoints.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.CompleteWord">
			<summary>Parse to get the partially completed word before the current position in order to show a list of possible completions (members, arguments, methods).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.DisplayMemberList">
			<summary>Parse the separator and the possible name before it, to obtain a list of members to be shown in a member completion list.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.Goto">
			<summary>Parse the identifier or expression at the specified location to obtain a possible URI of a file where the identifier is defined, declared, or referenced.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.HighlightBraces">
			<summary>Parse to find the matching language pairs (such as "{" and "}" or "&lt;" and "&gt;") that enclose the given location so they and their contents can be highlighted.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.MatchBraces">
			<summary>Parse the language pair at the given location to finds its match.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.MemberSelect">
			<summary>Parse the separator character before the current location to obtain a list of members for the class.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.MemberSelectAndHighlightBraces">
			<summary>Parse the character at the current location to complete a member selection and to highlight the matching pair to the parsed character (such as a ")" after a method name).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.MethodTip">
			<summary>Parse the method name before the current position to produce a list of all overloaded method signatures that match the method name.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.None">
			<summary>A placeholder value indicating that no parsing should be done.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.ParseReason.QuickInfo">
			<summary>Parse the identifier or selection at the given location to obtain type information to be shown in an IntelliSense quick info tool tip.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.ParseRequest">
			<summary>Provides information to execute a parsing operation in a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ParseRequest.#ctor(System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class in order to terminate the thread used for background parsing operations.</summary>
			<param name="terminate">[in] Set to true if the parsing operation is to be terminated. For this constructor, this argument is must always true.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Callback">
			<summary>Specifies the callback delegate to be called when the parsing operation has completed.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.ParseResultHandler"></see> delegate.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Col">
			<summary>Specifies the character offset on the first line to begin the parsing operation.</summary>
			<returns>Returns a number specifying the character offset that was passed as an argument to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.DirtySpan">
			<summary>Specifies a span of source that has changed.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying a span of source.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.FileName">
			<summary>Specifies the name of the source file being parsed.</summary>
			<returns>Returns the string containing the file name that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Line">
			<summary>Specifies the line on which to start the parsing operation.</summary>
			<returns>Returns a number specifying the line number that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Reason">
			<summary>Specifies the reason the parsing operation was started.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.ParseReason"></see> value passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Scope">
			<summary>Specifies the <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope"></see> object that is used to return extended information from the parsing operation.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringScope"></see> object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Sink">
			<summary>Specifies an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink"></see> object used to contain information from the parsing operation.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink"></see> object that was created in the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Terminate">
			<summary>Specifies whether the worker thread handling background parsing operations should exit.</summary>
			<returns>Returns true if the worker thread should exit.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Text">
			<summary>Specifies the source text to be parsed.</summary>
			<returns>Returns a string containing the source to be parsed as passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.Timestamp">
			<summary>Specifies a time stamp for the parse request.</summary>
			<returns>Returns a number that represents a point in time.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.TokenInfo">
			<summary>Specifies a <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> structure that is filled in with the results of the parsing operation.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ParseRequest.View">
			<summary>Specifies the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that contains the source that is being parsed.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.ParseRequest"></see> class constructor.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.ParseResultHandler">
			<summary>Used to define a delegate for a parsing operation completion handler in a language service.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.Severity">
			<summary>Specifies the severity of a parser error in a language service.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Severity.Error">
			<summary>Indicates an error in parsing, however, parsing may have been able to continue.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Severity.Fatal">
			<summary>Indicates a fatal error in parsing that prevented any further parsing.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Severity.Hint">
			<summary>Indicates a comment returned by the parser.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Severity.Warning">
			<summary>Indicates a warning returned by the parser. </summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.Source">
			<summary>Represents a source file in the language service and controls parsing operations on that source.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.#ctor(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.Package.Colorizer)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> class.</summary>
			<param name="service">[in] The <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> object representing language service that controls this instance. This is required and cannot be a null value.</param>
			<param name="textLines">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object representing the source file. This is required and cannot be a null value.</param>
			<param name="colorizer">[in] The <see cref="T:Microsoft.VisualStudio.Package.Colorizer"></see> object to use for syntax highlighting. This is required and cannot be a null value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.BeginParse">
			<summary>Begins a full parsing operation either in the foreground or the background.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.Close">
			<summary>Determines if the source file can be closed.</summary>
			<returns>Returns true if the source file can be closed; otherwise, returns false.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.ColumnToVisiblePosition(System.Int32,System.Int32)">
			<summary>Returns the screen column position corresponding to the specified character offset, taking into account tab size.</summary>
			<returns>Returns the screen column position that corresponds to the specified col parameter.</returns>
			<param name="line">[in] The line of source to look at.</param>
			<param name="col">[in] the offset into the line of source.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.CommentBlock(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String)">
			<summary>Comments out a span of source using block comments.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object encompassing the entire commented block, including the added comment start and end strings.</returns>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span of source to put into a block comment.</param>
			<param name="blockEnd">[in] A string that specifies the block comment end character or characters.</param>
			<param name="blockStart">[in] A string that specifies the block comment start character or characters.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.CommentLines(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
			<summary>Comments out a span of source using line comments.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object encompassing the entire commented block, including the added line comment start string.</returns>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span to put into line comments.</param>
			<param name="lineComment">[in] The string that specifies the line comment character or characters.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.CommentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Comments out the specified span of source.</summary>
			<returns>Returns a new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object encompassing the entire commented out span, including any comment start and end strings.</returns>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span of source to comment out.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.Completion(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.Package.TokenInfo,Microsoft.VisualStudio.Package.ParseReason)">
			<summary>Starts an IntelliSense member completion operation.</summary>
			<param name="reason">[in] A value from the <see cref="T:Microsoft.VisualStudio.Package.ParseReason"></see> enumeration specifying how this completion operation was triggered.</param>
			<param name="textView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view the completion list is shown in.</param>
			<param name="info">[in] The <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> object representing the token that triggered the completion operation.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.CreateAuthoringSink(Microsoft.VisualStudio.Package.ParseReason,System.Int32,System.Int32)">
			<summary>Creates an instance of an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink"></see> object for use in parsing operations.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.Package.AuthoringSink"></see> object.</returns>
			<param name="reason">[in] A value from the ParseReason enumeration describing the reason for the parse operation.</param>
			<param name="line">[in] the line index where the parsing is to start.</param>
			<param name="col">[in] the column index where the parsing is to start.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.CreateCompletionSet">
			<summary>Returns a new instance of a <see cref="T:Microsoft.VisualStudio.Package.CompletionSet"></see> class.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.CompletionSet"></see> object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.CreateErrorTaskItem(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,System.String)">
			<param name="span"> </param>
			<param name="markerType"> </param>
			<param name="filename"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.CreateErrorTaskItem(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String,Microsoft.VisualStudio.Shell.TaskPriority,Microsoft.VisualStudio.Shell.TaskCategory,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.Shell.TaskErrorCategory)">
			<param name="span"> </param>
			<param name="category"> </param>
			<param name="message"> </param>
			<param name="priority"> </param>
			<param name="errorCategory"> </param>
			<param name="markerType"> </param>
			<param name="filename"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.CreateMethodData">
			<summary>Returns a new instance of a <see cref="T:Microsoft.VisualStudio.Package.MethodData"></see> object that handles the IntelliSense method tip mode.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.MethodData"></see> object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.DismissCompletor">
			<summary>Removes the IntelliSense method tip or completion list from view, whichever was active.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.Dispose">
			<summary>Called in preparation of destroying this <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32)">
			<summary>Executes the specified command on the specified region.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code. If support for commands on a hidden region is not needed, return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
			<param name="region">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion"></see> object representing the hidden region to apply the command to.</param>
			<param name="cmd">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues"></see> enumeration specifying the command to execute.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.Finalize">
			<summary>The class destructor, called just before the object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetColorizer">
			<summary>Returns the colorizer associated with this <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.Colorizer"></see> object that was passed to the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> class constructor.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetCommentFormat">
			<summary>Returns information on what defines a comment in the language.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.CommentInfo"></see> structure containing the strings that define a comment.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetDocumentSpan">
			<summary>Returns the span occupied by the entire source file.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that encompasses the entire source file.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetExpansionProvider">
			<summary>Returns an expansion provider in support of code snippets.</summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> object; otherwise, returns a null value (code snippet expansion is not supported).</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetFilePath">
			<summary>Returns the file name of the source file.</summary>
			<returns>Returns the file name of the source file.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetHiddenTextSession">
			<summary>Returns the hidden region manager if available.</summary>
			<returns>If successful, returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession"></see> object representing the hidden region manager; otherwise, returns a null value.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetLine(System.Int32)">
			<summary>Returns the text on the specified line.</summary>
			<returns>Returns the text at the specified line number. This could be an empty string.</returns>
			<param name="line">[in] The line number for which to get the text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetLineCount">
			<summary>Returns the number of lines in the source file.</summary>
			<returns>Returns a number representing the number of lines in the source file. This value can be 0.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
			<summary>Returns the line and column for the specified position.</summary>
			<param name="position">[in] The position or character offset into the source file.</param>
			<param name="line">[out] Returns the line number corresponding to the position.</param>
			<param name="col">[out] Returns the column number (offset on the line) corresponding to the position.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetLineLength(System.Int32)">
			<summary>Returns the length of the specified line.</summary>
			<returns>Returns a number representing the number of characters on the line.</returns>
			<param name="line">[in] The line number for which to get the length.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32,System.String[],System.UInt32[])">
			<summary>Determines what marker commands can be shown on a context menu for the specified hidden region.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code. If support for commands on a hidden region is not needed, return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
			<param name="region">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion"></see> object describing the hidden region.</param>
			<param name="item">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues"></see> enumeration specifying the command to examine.</param>
			<param name="outText">[out] Returns the string to show on the context menu if the specified command is supported.</param>
			<param name="flags">[out] Returns a set of flags from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF"></see> enumeration indicating whether the command is supported.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetNewLine(System.Int32)">
			<summary>Returns the newline character used at the end of the specified line.</summary>
			<returns>Returns a string containing the newline character from the end of the line.</returns>
			<param name="line">[in] The line number from which to get the new line character.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetPairExtents(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
			<summary>Returns the span that encompasses a matching pair of language elements between which is the given location.</summary>
			<param name="line">[in] The line number in the source.</param>
			<param name="span">[out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object containing the span of the enclosing paired elements.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object that represents the view containing the source to examine.</param>
			<param name="col">[in] The offset on the line.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetPositionOfLineIndex(System.Int32,System.Int32)">
			<summary>Returns the position corresponding to the given line and character offset location.</summary>
			<returns>Returns a number representing the position or character offset from the start of the source file.</returns>
			<param name="line">[in] The line number of the location.</param>
			<param name="col">[in] The offset on the line of the location.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetTaskProvider">
			<summary>Returns the task provider that manages the error tasks.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider"></see> object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetText">
			<summary>Returns all of the text of the source file.</summary>
			<returns>Returns a string containing the entire source file.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<param name="span"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetText(System.Int32,System.Int32,System.Int32,System.Int32)">
			<summary>Returns the text encompassed by the specified locations.</summary>
			<returns>Returns a string containing the desired text. This can be an empty string.</returns>
			<param name="startLine">[in] The first line of text to obtain.</param>
			<param name="endLine">[in] The last line of text to obtain.</param>
			<param name="endCol">[in] The offset on the last line to the last character to obtain.</param>
			<param name="startCol">[in] The offset on the first line to the first character to obtain.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetTextLines">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object associated with this <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object passed to the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> class constructor.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetTextUpToLine(System.Int32)">
			<summary>Returns the text from the source up to and including the given line number.</summary>
			<returns>Returns a string containing all the text up to and including the given line.</returns>
			<param name="line">[in] The line number of the last line of text to obtain. Specify 0 to obtain all the text in the source.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.String[])">
			<summary>Returns the text in the given hidden region to be used in a tool tip.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="region">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion"></see> object from which to obtain the text to display.</param>
			<param name="result">[out] Returns the text from the hidden region.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetTokenInfo(System.Int32,System.Int32)">
			<summary>Returns information about the token at the specified position.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> object containing information about the current token.</returns>
			<param name="line">[in]The number of the line containing the token to examine.</param>
			<param name="col">[in] The character offset in the line to the token to examine.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetUserData(System.Guid@)">
			<summary>Returns the user data associated with the specified GUID.</summary>
			<returns>If successful, returns an object representing the requested data; otherwise, returns an error code.</returns>
			<param name="key">[in] The GUID specifying what user data to retrieve.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.GetWordExtent(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS,System.Int32@,System.Int32@)">
			<summary>Returns the span occupied by the word at the specified location.</summary>
			<returns>Returns true if the word was found; otherwise, returns false: there is no word at that position.</returns>
			<param name="startIdx">[out] Returns the offset of the first character of the word.</param>
			<param name="line">[in] The line on which the word to examine is located.</param>
			<param name="flags">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS"></see> enumeration.</param>
			<param name="idx">[in] the offset into the line to somewhere in the word (does not have to be at the beginning of the word).</param>
			<param name="endIdx">[out] Returns the offset of the character one past the last character of the word.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.MakeBaseSpanVisible(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Ensures the given span in the given hidden region is visible.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code. If this method is not implemented, return the <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see> field.</returns>
			<param name="region">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion"></see> object representing the hidden region to make visible.</param>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the region to be made visible.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.MatchBraces(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo)">
			<summary>Highlights the spans of a pair of language elements, given the position of one of the elements.</summary>
			<param name="line">[in] The line number of the language element for which to find a match.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view on the source file.</param>
			<param name="info">[in] A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> object containing the information about the token (that is, the language element for which to find a match) under the given location.</param>
			<param name="index">[in] The offset on the line of the location.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.MethodTip(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenInfo)">
			<summary>Displays an IntelliSense method tip showing a method's signature as it is entered.</summary>
			<param name="line">[in] The line number where the user is entering text.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view containing the source file.</param>
			<param name="info">[in] A <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> object representing the token that triggered the method tip (typically, this is the parameter list start character, end character, or parameter separator character).</param>
			<param name="index">[in] The offset into the line where the user is entering text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.NormalizeNewlines(System.String,System.String)">
			<summary>Converts the newlines in the specified text to the specified newline.</summary>
			<returns>Returns a string containing the converted text.</returns>
			<param name="newline">[in] The newline to which to convert.</param>
			<param name="input">[in] The text in which to convert the newlines.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.OnBeforeSessionEnd">
			<summary>Called just before a hidden region session is closed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.OnChangeLineAttributes(System.Int32,System.Int32)">
			<summary>Called when one or more lines' attributes (font, color) have changed.</summary>
			<param name="lastLine">[in] The last line that was changed.</param>
			<param name="firstLine">[in] The first line that was changed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.OnChangeLineText(Microsoft.VisualStudio.TextManager.Interop.TextLineChange[],System.Int32)">
			<summary>Called when a line's text has changed.</summary>
			<param name="lineChange">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextLineChange"></see> object that describes the line that was changed.</param>
			<param name="last">[in] Nonzero if the last line of the source is included in the change; otherwise, this is zero.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Called when a code snippet is committed to the source file.</summary>
			<param name="reason">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags"></see> enumeration describing why the change was committed.</param>
			<param name="changedArea">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the total area that was changed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.OnCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.VSConstants.VSStd2KCmdID,System.Char)">
			<summary>Handles IntelliSense-oriented commands.</summary>
			<param name="ch">[in] The character that was typed.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view containing the source where the command was entered.</param>
			<param name="command">[in] A value from the <see cref="T:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID"></see> enumeration specifying the command that was entered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.OnHiddenRegionChange(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT,System.Int32)">
			<summary>Called when a hidden region has changed.</summary>
			<param name="region">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion"></see> object representing the hidden region that has changed.</param>
			<param name="fBufferModifiable">[in] Nonzero if it is safe to change the source buffer as a result of the change; otherwise, the source buffer must remain untouched.</param>
			<param name="evt">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT"></see> enumeration describing how the region has changed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.OnIdle(System.Boolean)">
			<summary>Called when no other events are being handled.</summary>
			<param name="periodic">[in] true if this call is a result of a periodic timer; otherwise, this is a truly idle call.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.OnUserDataChange(System.Guid@,System.Object)">
			<summary>Called when user data has been changed in a text buffer.</summary>
			<param name="riidKey">[in] The GUID representing the value that was changed.</param>
			<param name="vtNewValue">[in] A <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> containing the new value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.Open">
			<summary>Marks the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object as being open.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.ProcessHiddenRegions(System.Collections.ArrayList)">
			<summary>Updates all hidden regions based on the given list of hidden regions.</summary>
			<param name="hiddenRegions">[in] An <see cref="T:System.Collections.ArrayList"></see> of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion"></see> objects describing new hidden regions to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.Recolorize(System.Int32,System.Int32)">
			<summary>Updates the syntax highlighting on the specified range of lines.</summary>
			<param name="startLine">[in] The first line to update.</param>
			<param name="endLine">[in] The last line to update.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.ReformatSpan(Microsoft.VisualStudio.Package.EditArray,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Format the specified span of source.</summary>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the range of lines to be reformatted.</param>
			<param name="mgr">[in] An <see cref="T:Microsoft.VisualStudio.Package.EditArray"></see> object that contains the source to be reformatted.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.RemoveHiddenRegions">
			<summary>Removes all hidden regions from the current view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.RemoveTask(Microsoft.VisualStudio.Package.DocumentTask)">
			<summary>Removes the specified error task from the error Task window.</summary>
			<param name="task">[in] A <see cref="T:Microsoft.VisualStudio.Package.DocumentTask"></see> object representing the error task to remove.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.ScanToNonWhitespaceChar(System.Int32)">
			<summary>Returns the offset of the first non-whitespace character on the given line.</summary>
			<returns>Returns a character offset to the first non-whitespace character.</returns>
			<param name="line">[in] The line number to examine.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.SetText(System.String)">
			<summary>Replaces the source contents with the given text.</summary>
			<param name="newText">[in] A string holding the new text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.SetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
			<summary>Replaces the specified span of source with the given text.</summary>
			<param name="newText">[in] A string holding the new text.</param>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span to replace.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.SetText(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
			<summary>Replaces the specified section of source with the given text.</summary>
			<param name="newText">[in] A string holding the new text.</param>
			<param name="startLine">[in] The first line of source to replace.</param>
			<param name="endLine">[in] The last line of source to replace.</param>
			<param name="endCol">[in] The last character offset on the last line to replace.</param>
			<param name="startCol">[in] The beginning offset of the first character on the first line to replace.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.SetUserData(System.Guid@,System.Object)">
			<summary>Sets the given user data property to the given value.</summary>
			<param name="data">[in] An object representing the value to set.</param>
			<param name="key">[in] The GUID of the user data property to set the value for.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.TrimSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
			<summary>Adjusts the given span to skip leading and trailing whitespace.</summary>
			<param name="span">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object representing the span to modify. Returns the adjusted span.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.UncommentBlock(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String,System.String)">
			<summary>Removes comment characters from around the specified span.</summary>
			<returns>Returns a new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span after the comment characters have been removed.</returns>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span to uncomment.</param>
			<param name="blockEnd">[in] A string holding the characters that end a block comment.</param>
			<param name="blockStart">[in] A string holding the characters that start a block comment.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.UncommentLines(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String)">
			<summary>Removes line comment characters from the beginning of each line in the given span.</summary>
			<returns>Returns a new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span after the line comment characters have been removed.</returns>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the range of lines to examine.</param>
			<param name="lineComment">[in] A string holding the characters that start a line comment.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.UncommentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Removes any comment characters from the beginning and end of the given span.</summary>
			<returns>Returns a new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span after the comment characters have been removed.</returns>
			<param name="span">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the range of lines to examine.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Source.VisiblePositionToColumn(System.Int32,System.Int32)">
			<summary>Returns the character offset on the given line corresponding to the specified screen column position.</summary>
			<returns>Returns a number representing the character offset into the line. If the visible position is off the end of the line, then return the length of the line.</returns>
			<param name="visiblePosition">[in] The screen column to convert.</param>
			<param name="line">[in] The number of the line to examine.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.ChangeCount">
			<summary>Returns the number of changes made to the source file since it was opened.</summary>
			<returns>Returns a value indicating the number of times the source file was changed.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.ColorState">
			<summary>Determines the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState"></see> object that is used in various parsing tasks.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState"></see> interface that is obtained from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object passed to the constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.CompletionSet">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet"></see> collection used for this instance of the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> class.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.CompletionSet"></see> object created in the constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.DirtySpan">
			<summary>Returns a range that identifies the changed lines in the source.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object containing the range of lines that have been changed in the source file.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.IsClosed">
			<summary>Returns the current state of the source file.</summary>
			<returns>Returns true if the source file is closed; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.IsCompletorActive">
			<summary>Determines if the IntelliSense member completion or method tip modes are active.</summary>
			<returns>Returns true if the completion or method tip modes are active; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.IsDirty">
			<summary>Determines if any of the lines of source have changed.</summary>
			<returns>Returns true if at least one line of source has changed; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.LanguageService">
			<summary>Returns the language service associated with the source file.</summary>
			<returns>Returns the <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> object passed to the constructor.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.LastParseTime">
			<summary>Determines a value that indicates the duration of the last parse operation.</summary>
			<returns>Returns a number indicating the duration of the last parse.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Source.OutliningEnabled">
			<summary>Determines if outlining is currently enabled.</summary>
			<returns>Returns true if outlining is enabled; otherwise, returns false.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.TextSpanHelper">
			<summary>A utility class that provides useful methods for manipulating and comparing instances of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> class as well as validating positions.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Clear(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
			<summary>Sets the members of the specified span to an empty state.</summary>
			<param name="s pan">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object to clear.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ContainsExclusive(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
			<summary>Determines if the given position is contained within the given span, not including the start and end points.</summary>
			<returns>Returns true if the given position is greater than the start of the span and less than the end of the span. Returns false if the position is exactly equal to the start or end of the span or the position is outside the span.</returns>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is being tested against.</param>
			<param name="line">[in] The line index of the position to test.</param>
			<param name="col">[in] The column index of the position to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ContainsInclusive(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
			<summary>Determines if the given position is inside the span, including the start and end points.</summary>
			<returns>Returns true if the given position is greater than or equal to the start of the span and less than or equal to the end of the span. Returns false if the given position is entirely outside the span.</returns>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is being tested against.</param>
			<param name="line">[in] The line index of the position to test.</param>
			<param name="col">[in] The column index of the position to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span ends after the end of the second span.</summary>
			<returns>Returns true if the end of span1 is greater than the end of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsAfterStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span ends after the start of the second span.</summary>
			<returns>Returns true if the end of span1 is greater than the start of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsBeforeEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span ends before the end of the second span.</summary>
			<returns>Returns true if the end of span1 is less than or equal to the end of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.EndsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span ends before the start of the second span.</summary>
			<returns>Returns true if the end of span1 is less than or equal to the start of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Intersects(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span intersects the second span.</summary>
			<returns>Returns true if the start of span1 is less than the end of span2 and the end of span1 is greater than the start of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
			<summary>Determines if the given position occurs after the end of the given span.</summary>
			<returns>Returns true if the given position is greater than the end of the given span; otherwise returns false.</returns>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is being tested against.</param>
			<param name="line">[in] The line index of the position to test.</param>
			<param name="col">[in] The column index of the position to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.Int32,System.Int32)">
			<summary>Determines if the given position occurs before the start of the given span.</summary>
			<returns>Returns true if the given position is less than the start of the given span; otherwise, returns false.</returns>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is being tested against.</param>
			<param name="line">[in] The line index of the position to test.</param>
			<param name="col">[in] The column index of the position to test.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsEmbedded(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span is wholly contained within the second span.</summary>
			<returns>Returns true if the start of span1 is equal to or greater than the start of span2 and the end of span1 is less than or equal to the end of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsEmpty(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the given span is empty.</summary>
			<returns>Returns true if the given span is empty; otherwise, returns false.</returns>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is being tested.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsPositive(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the start of the given span occurs before the end of the span.</summary>
			<returns>Returns true if the start of the span is less than or equal to the end of the span; otherwise, returns false.</returns>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is being tested.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.IsSameSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if two spans are the same.</summary>
			<returns>Returns true if the start of span1 equals the start of span2 and the end of span1 equals the end of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.MakePositive(Microsoft.VisualStudio.TextManager.Interop.TextSpan@)">
			<summary>Makes the given span positive.</summary>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object to be modified.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Merge(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Merges the two given spans to create a new span.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is the result of merging span1 and span2.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object to be merged.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object to be merged.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.Normalize(Microsoft.VisualStudio.TextManager.Interop.TextSpan@,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
			<summary>Pins the ends of the given span to the actual line lengths in the given text buffer.</summary>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object to be modified.</param>
			<param name="textLines">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object to normalize against.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsAfterEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span starts after the end of the second span.</summary>
			<returns>Returns true if the start of span1 is greater than or equal to the end of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsAfterStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span starts after the start of the second span.</summary>
			<returns>Returns true if the start of span1 is greater than or equal to the start of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsBeforeEndOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span starts before the end of the second span.</summary>
			<returns>Returns true if the start of span1 is less than the end of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.StartsBeforeStartOf(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the first span starts before the start of the second span.</summary>
			<returns>Returns true if the start of span1 is less than the start of span2; otherwise, returns false.</returns>
			<param name="span2">[in] The second <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
			<param name="span1">[in] The first <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ValidCoord(Microsoft.VisualStudio.Package.Source,System.Int32,System.Int32)">
			<summary>Determines if the given position is valid for the given source buffer.</summary>
			<returns>Returns true if the given position lies within the given source buffer; otherwise, returns false.</returns>
			<param name="pos">[in] The column index of the position to test.</param>
			<param name="line">[in] The line index of the position to test.</param>
			<param name="src">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object to validate against. This can be a null value. See Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextSpanHelper.ValidSpan(Microsoft.VisualStudio.Package.Source,Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Determines if the given span lies within the given source buffer.</summary>
			<returns>Returns true if the span lies entirely within the source buffer and is positive; otherwise, returns false.</returns>
			<param name="span">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object representing the span to test.</param>
			<param name="src">[in] A <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object to validate against.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.TextTipData">
			<summary>Provides a default implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData"></see> for use in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow"></see> for displaying tool tips.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.#ctor(System.IServiceProvider)">
			<summary>This constructor sets a service provider.</summary>
			<param name="site">A service provider.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.CheckCaretPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Dismisses the tool tip based on mouse proximity to something that has a tool tip.</summary>
			<param name="textView">The view the text tip floats over.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.Close(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Dismisses and releases the tool tip.</summary>
			<param name="textView">The view associated with the tool tip.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.GetContextStream(System.Int32@,System.Int32@)">
			<summary>Retrieves the position and length of the tool tip.</summary>
			<param name="piLen">The length of the tool tip.</param>
			<param name="piPos">The position of the tool tip.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.GetTipFontInfo(System.Int32,System.UInt32[])">
			<summary>Returns the font of the tool tip window.</summary>
			<returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL"></see>.</returns>
			<param name="iChars">Number of characters to consider.</param>
			<param name="pdwFontInfo">Pointer to a structure that describes font.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.GetTipText(System.String[],System.Int32@)">
			<summary>Populates pbstrText with the tip text.</summary>
			<returns>If pbstrText is NULL or has a length of zero, returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG"></see>, otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>.</returns>
			<param name="pfFontData">Font information about the provided data.</param>
			<param name="pbstrText">The populated text tip data.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.IsActive">
			<summary>Tests if the tool tip window is currently visible.</summary>
			<returns>Returns TRUE if the tool tip window is currently visible.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.OnDismiss">
			<summary>Sets the tool tip window to inactive.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.Update(System.String,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<param name="pos">The position of the tip.</param>
			<param name="textView">The <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)"></see> that should be updated.</param>
			<param name="len">The length of the tip.</param>
			<param name="textValue">The text of the tool tip.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TextTipData.UpdateView">
			<summary>A virtual method that your subclass of TextTipData can implement to provide extra functionality on update.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.TokenColor">
			<summary>Provides initial values for color indices as reported by an <see cref="T:Microsoft.VisualStudio.Package.IScanner"></see> scanner.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenColor.Comment">
			<summary>= 2. Represents the color for a comment.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenColor.Identifier">
			<summary>= 3. Represents the color for an identifier or name (for example, a class, method, or variable name).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenColor.Keyword">
			<summary>= 1. Represents the color for a language keyword (for example, "for", "if", or "else").</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenColor.Number">
			<summary>= 5. Represents the color for a number (a string of decimal or hexadecimal digits).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenColor.String">
			<summary>= 4. Represents the color for a string, typically bounded by single or double quotes.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenColor.Text">
			<summary>= 0. The default. This represents the color corresponding to the user's default text colors (the language service's <see cref="T:Microsoft.VisualStudio.Package.ColorableItem"></see> list is ignored in this one case).</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.TokenInfo">
			<summary>Provides information about a particular token encountered by a language service's language parser.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TokenInfo.#ctor">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> class to the default values.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TokenInfo.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Package.TokenType)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> class to the specified values.</summary>
			<param name="type">[in] A value from the <see cref="T:Microsoft.VisualStudio.Package.TokenType"></see> enumeration identifying the token's type.</param>
			<param name="endIndex">[in] The last character of the token.</param>
			<param name="startIndex">[in] The first character of the token.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.TokenInfo.Color">
			<summary>Determines the color index to use for the token.</summary>
			<returns>Returns a color index cast to a <see cref="T:Microsoft.VisualStudio.Package.TokenColor"></see> enumeration.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.TokenInfo.EndIndex">
			<summary>Determines the index of the last character of the token.</summary>
			<returns>Returns an integer specifying the last character of the token.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.TokenInfo.StartIndex">
			<summary>Determines the index of the first character of the token.</summary>
			<returns>Returns an integer specifying the first character of the token.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.TokenInfo.Token">
			<summary>Determines the token ID as represented by the <see cref="T:Microsoft.VisualStudio.Package.TokenInfo"></see> object.</summary>
			<returns>Returns an integer specifying the token ID.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.TokenInfo.Trigger">
			<summary>Determines the various triggers that can be set for the token.</summary>
			<returns>Returns a combination of flags from the <see cref="T:Microsoft.VisualStudio.Package.TokenTriggers"></see> enumeration.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.TokenInfo.Type">
			<summary>Determines the type of the token.</summary>
			<returns>Returns a value from the <see cref="T:Microsoft.VisualStudio.Package.TokenType"></see> enumeration.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.TokenTriggers">
			<summary>Specifies a set of triggers that can be fired from an <see cref="T:Microsoft.VisualStudio.Package.IScanner"></see> language parser.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MatchBraces">
			<summary>The opening or closing part of a language pair has been parsed. For example, in C#, a { or } has been parsed. In XML, a &lt; or &gt; has been parsed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MemberSelect">
			<summary>A character that indicates that the start of a member selection has been parsed. In C#, this could be a period following a class name. In XML, this could be a &lt; (the member select is a list of possible tags).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenTriggers.MethodTip">
			<summary>This is a mask for the flags used to govern the IntelliSense Method Tip operation. This mask is used to isolate the values <see cref="F:Microsoft.VisualStudio.Package.TokenTriggers.Parameter"></see>, <see cref="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterStart"></see>, <see cref="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterNext"></see>, and <see cref="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterEnd"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenTriggers.None">
			<summary>Used when no triggers are set. This is the default.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenTriggers.Parameter">
			<summary>A parameter in a method's parameter list has been parsed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterEnd">
			<summary>A character that marks the end of a parameter list has been parsed. For example, in C#, this could be a close parenthesis, ")".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterNext">
			<summary>A character that separates parameters in a list has been parsed. For example, in C#, this could be a comma, ",".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenTriggers.ParameterStart">
			<summary>A character that marks the start of a parameter list has been parsed. For example, in C#, this could be an open parenthesis, "(".</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.TokenType">
			<summary>Specifies the different types of tokens that can be identified and returned from a language service scanner.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.Comment">
			<summary>A block comment. For example, in C# or C++, a comment is bounded by /* and */. In XML, the comment is bounded by &lt;!-- and --&gt;.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.Delimiter">
			<summary>A token that operates as a separator between two language elements. For example, in C#, the period "." between class name and member name. In XML, the angle brackets surrounding a tag, &lt; and &gt;.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.Identifier">
			<summary>An identifier or name. For example, the name of a variable, method, or class. In XML, this could be the name of a tag or attribute.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.Keyword">
			<summary>A language keyword, an identifier that is reserved by the language. For example, in C#, do, while, foreach, if, and else, are all keywords.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.LineComment">
			<summary>A line comment (comment is terminated at the end of the line). For example, in C# or C++, a comment is preceded by a //. In Visual Basic, this is a single tick '.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.Literal">
			<summary>A literal value (a character or number). For example, in C# or C++, this is a character bounded by single quotes, or a decimal or hexadecimal number.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.Operator">
			<summary>A punctuation character that has a specific meaning in a language. For example, in C#, arithmetic operators +, -, *, and /. In C++, pointer dereference operator -&gt;, insertion operator &gt;&gt;, and extraction operation &lt;&lt;. In XML, assignment operator =.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.String">
			<summary>A string. Typically defined as zero or more characters bounded by double quotes.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.Text">
			<summary>General text; any text not identified as a specified token type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.Unknown">
			<summary>The token is an unknown type. This is typically used for any token not recognized by the parser and should be considered an error in the code being parsed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.TokenType.WhiteSpace">
			<summary>A space, tab, or newline. Typically, a contiguous run of any whitespace is considered a single whitespace token. For example, the three spaces in "name   this" would be treated as one whitespace token.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars">
			<summary>Provides support for the combo boxes showing type and member information as offered by a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.#ctor(Microsoft.VisualStudio.Package.LanguageService)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars"></see> class.</summary>
			<param name="languageService">[in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> object representing the language service that uses the combo boxes.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.Done">
			<summary>Cleans up any allocated resources just before the <see cref="T:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetComboAttributes(System.Int32,System.UInt32@,System.UInt32@,System.IntPtr@)">
			<summary>Returns information about the specified combo box.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="entryType">[out] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE"></see> enumeration describing the type of entries to appear on the combo box.</param>
			<param name="iList">[out] An unmarshaled handle to an <see cref="T:Microsoft.CLRAdmin.IImageList"></see> object used for glyphs.</param>
			<param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
			<param name="entries">[out] The number of entries to be shown on the combo box.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetComboTipText(System.Int32,System.String@)">
			<summary>Returns text to be shown in a tool tip when the cursor is held over the combo box.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="combo">[in] The ID of the combo box to get the tool tip text for (0 for the types combo box, 1 for the members combo box).</param>
			<param name="text">[out] The text to be shown in a tool tip.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryAttributes(System.Int32,System.Int32,System.UInt32@)">
			<summary>Returns the font attributes for the specified entry on the specified combo box.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="entry">[in] The index of the entry for which to get the attributes.</param>
			<param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
			<param name="fontAttrs">[out] Returns the collection of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR"></see> enumeration for the requested entry.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryImage(System.Int32,System.Int32,System.Int32@)">
			<summary>Returns the glyph index for the specified entry on the specified combo box.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="entry">[in] The index of the entry for which to get the image index.</param>
			<param name="imgIndex">[out] Returns the index in the image list to the glyph for the specified entry. Returns -1 if there is no glyph or the entry does not exist.</param>
			<param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetEntryText(System.Int32,System.Int32,System.String@)">
			<summary>Returns the text to be displayed for the specified entry in the specified combo box.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="entry">[in] The index of the entry for which to get the text.</param>
			<param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
			<param name="text">[out] Returns a string containing the text to be displayed in the combo box for the specified entry. Returns null if the entry does not exist.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.GetMember(System.Int32,System.Int32)">
			<summary>Returns the specified entry for the specified combo box.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see> object describing the request entry; otherwise, returns null.</returns>
			<param name="entry">[in] The index of the entry to get.</param>
			<param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnComboGetFocus(System.Int32)">
			<summary>Called when a combo box gets the focus.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnItemChosen(System.Int32,System.Int32)">
			<summary>Called when an item is chosen from the specified combo box.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="entry">[in] The index of the entry that was chosen.</param>
			<param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnItemSelected(System.Int32,System.Int32)">
			<summary>Called when an entry is highlighted in one of the combo boxes.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="combo">[in] The ID of the combo box (0 for the types combo box, 1 for the members combo box).</param>
			<param name="index">[in] The index of the entry that was highlighted.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.OnSynchronizeDropdowns(Microsoft.VisualStudio.Package.LanguageService,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList,System.Int32@,System.Int32@)">
			<summary>Called to fill and synchronize all combo boxes.</summary>
			<returns>If successful, returns true if the combo boxes have been changed; otherwise returns false.</returns>
			<param name="line">[in] The line number the caret is currently on.</param>
			<param name="dropDownMembers">[in, out] An <see cref="T:System.Collections.ArrayList"></see> of <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see>s representing the members combo box.</param>
			<param name="dropDownTypes">[in, out] An <see cref="T:System.Collections.ArrayList"></see> of <see cref="T:Microsoft.VisualStudio.Package.DropDownMember"></see>s representing the types combo box.</param>
			<param name="languageService">[in] A <see cref="T:Microsoft.VisualStudio.Package.LanguageService"></see> object representing the language service that uses the combo boxes.</param>
			<param name="textView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view the combo boxes are placed in and the view that shows the source file.</param>
			<param name="selectedType">[in, out] The index of the entry to be selected in the types combo box. This can also be set if the current selection is invalid.</param>
			<param name="selectedMember">[in, out] The index of the entry to be selected in the members combo box. This can also be set if the current selection is invalid.</param>
			<param name="col">[in] The character offset the caret is currently on.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.TypeAndMemberDropdownBars.SetDropdownBar(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar)">
			<summary>Called to specify the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar"></see> object that controls the two combo boxes.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="bar">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar"></see> object that controls the two combo boxes.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.Variant">
			<summary>Represents an object that can be interpreted as more than one type.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Variant.ToChar">
			<summary>Interprets the <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object's value as a Unicode character if the variant type is <see cref="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2"></see>.</summary>
			<returns>If the variant type is <see cref="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2"></see>, returns the value interpreted as a character; otherwise, returns 0.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.Variant.ToVariant(System.IntPtr)">
			<summary>Converts the given variant object to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> class object.</summary>
			<returns>If successful, returns a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object containing the value of the marshaled variant object; otherwise, returns an empty <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object.</returns>
			<param name="ptr">[in] An <see cref="T:System.IntPtr"></see> to be marshaled as a variant object.</param>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Variant.Value">
			<summary>Determines the value of this <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object.</summary>
			<returns>Returns a number that is a literal interpretation of the object's pointer.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.Variant.Vt">
			<summary>Determines the type of the <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object.</summary>
			<returns>Returns a value from the <see cref="T:Microsoft.VisualStudio.Package.Variant.VariantType"></see> enumeration, specifying the type of the variant.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.Variant.VariantType">
			<summary>Specifies the type of a variant object as used by a managed package framework (MPF) language service class.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ARRAY">
			<summary>An array of variants.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BLOB">
			<summary>An arbitrary block of memory.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BLOB_OBJECT">
			<summary>An arbitrary block of memory representing an object.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BOOL">
			<summary>A value representing true (-1) or false (0).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BSTR">
			<summary>A string.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_BYREF">
			<summary>A reference to an object.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CARRAY">
			<summary>A C-style array (an array of pointers).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CF">
			<summary>A value specifying a clipboard format.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CLSID">
			<summary>A GUID for a class (a CLSID).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_CY">
			<summary>A Currency value (fixed decimal point value stored in 64-bits).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DATE">
			<summary>A DATE object.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DECIMAL">
			<summary>A decimal number stored as a string.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_DISPATCH">
			<summary>An object that implements the <see cref="F:System.Runtime.InteropServices.UnmanagedType.IDispatch"></see> interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_EMPTY">
			<summary>An empty variant.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ERROR">
			<summary>An error code (typically returned from a Win32 function).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_FILETIME">
			<summary>A <see cref="T:System.Runtime.InteropServices.FILETIME"></see> value.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_HRESULT">
			<summary>An HRESULT or COM return value.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I1">
			<summary>A 1 byte (8-bit) signed integer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I2">
			<summary>A 2 byte (16-bit) signed integer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I4">
			<summary>A 4 byte (32-bit) signed integer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_I8">
			<summary>An 8 byte (64-bit) signed integer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ILLEGAL">
			<summary>Represents an illegal variant type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_ILLEGALMASKED">
			<summary>A bit mask to isolate valid variant types.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_INT">
			<summary>A generic integer (typically a 32-bit value).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_LPSTR">
			<summary>A pointer to a null-terminated ANSI string.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_LPWSTR">
			<summary>A pointer to a null-terminated wide character (Unicode) string.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_NULL">
			<summary>A null value.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_PTR">
			<summary>A generic pointer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_R4">
			<summary>A 4 byte real number, also known as a float.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_R8">
			<summary>An 8 byte real number, also known as a double.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_RESERVED">
			<summary>Reserved for future use.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_SAFEARRAY">
			<summary>An array that is guaranteed to be at least empty (that is, it is never a null value).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STORAGE">
			<summary>Name of the storage.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STORED_OBJECT">
			<summary>A storage object.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STREAM">
			<summary>A stream of bytes.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_STREAMED_OBJECT">
			<summary>A stream that contains an object.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_TYPEMASK">
			<summary>A bit mask to isolate valid variant types.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI1">
			<summary>A 1 byte (8-bit) unsigned integer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI2">
			<summary>A 2 byte (16-bit) unsigned integer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI4">
			<summary>A 4 byte (32-bit) unsigned integer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UI8">
			<summary>An 8 byte (64-bit) unsigned integer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UINT">
			<summary>A generic unsigned integer (typically 32-bits).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_UNKNOWN">
			<summary>An object implementing the <see cref="T:IUnknown"></see> interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_USERDEFINED">
			<summary>A user-defined blob.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VARIANT">
			<summary>A reference to a variant object.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VECTOR">
			<summary>An array with a leading count value.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.Package.Variant.VariantType.VT_VOID">
			<summary>A C-style void type.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.Package.ViewFilter">
			<summary>This class handles various editing and IntelliSense commands for a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.#ctor(Microsoft.VisualStudio.Package.CodeWindowManager,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> class.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object this class is to work with. This is required and cannot be a null value.</param>
			<param name="mgr">[in] A <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object that owns this view. This is required and cannot be a null value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.CanReformat">
			<summary>Returns whether the source can be reformatted by the language service.</summary>
			<returns>Returns true if the source can be reformatted; otherwise, returns false: either the debugger is active or the language service does not support reformatting.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.Close">
			<summary>Closes down the view filter, releasing any allocated resources.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.CommentSelection">
			<summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMENT_BLOCK"></see> command to comment out the current selection in the view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.CreateTextTipData">
			<summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Package.TextTipData"></see> class.</summary>
			<returns>Returns a new <see cref="T:Microsoft.VisualStudio.Package.TextTipData"></see> object.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.Dispose">
			<summary>Frees up any resources allocated when the <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> class was created.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.ExecCommand(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Executes the specified command.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object to hold the result of the command, if any.</param>
			<param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
			<param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
			<param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.Finalize">
			<summary>Performs final clean up just before the <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> object is destroyed.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetDataTipText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
			<summary>Returns text about the given span that can be shown in a tool tip.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code. Since this method can begin a background parse operation, a typical error code that can be returned is <see cref="F:Microsoft.VisualStudio.VSConstants.E_PENDING"></see> if the background parse has not yet finished.</returns>
			<param name="textValue">[out] Returns a string to be displayed in a tool tip. This string is valid only if a success code is returned.</param>
			<param name="aspan">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying the location in the code to get information about and returns the span indicating the extent of the identifier or expression the text represents. This returned span indicates the area a mouse cursor can be in before the tool tip is dismissed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetExpansionProvider">
			<summary>Returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> object.</summary>
			<returns>If there is an expansion provider, returns an <see cref="T:Microsoft.VisualStudio.Package.ExpansionProvider"></see> object; otherwise, returns null.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetFullDataTipText(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,System.String@)">
			<summary>Returns a string that can be used in a tool tip, taking into account additional sources of text such as a debugger.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code. Other possible success codes are <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses2.TIP_S_NODEFAULTTIP"></see> (only the value returned from the debugger is used) and <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses.TIP_S_ONLYIFNOMARKER"></see> (show the tool tip only if no parsing errors have occurred in the same location).</returns>
			<param name="ts">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying the span of source to examine.</param>
			<param name="fullTipText">[out] Returns a string to be used as a tool tip.</param>
			<param name="textValue">[in] The string to use as the default.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetPairExtents(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Returns the extent of the innermost matching pair of language elements that contains the given location.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="span">[out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying the extent of the enclosing matching pair of language elements.</param>
			<param name="line">[in] The line number of the location to examine.</param>
			<param name="index">[in] The character offset on the line to examine.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetSelection">
			<summary>Returns the extent of the currently selected text.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object specifying the selected span of text.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Returns the extent of the word or expression that contains the given location.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if there is no identifier or expression at the specified location; otherwise, returns an error code.</returns>
			<param name="span">[out] Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that contains the requested span.</param>
			<param name="line">[in] The line number to examine.</param>
			<param name="flags">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS"></see> enumeration.</param>
			<param name="index">[in] The character offset on the line to examine.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleGoto(Microsoft.VisualStudio.VSConstants.VSStd97CmdID)">
			<summary>Processes the specified "go to" command.</summary>
			<param name="cmd">[in] A value from the <see cref="T:Microsoft.VisualStudio.VSConstants.VSStd97CmdID"></see> enumeration specifying the type of "go to" command to execute. Expected values are <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoDefn"></see>, <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoDecl"></see>, and <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd97CmdID.GotoRef"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandlePreExec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Handles pre-processing before a command is executed.</summary>
			<returns>Returns true if the command was actually handled in the pre-processing; otherwise, returns false.</returns>
			<param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object to hold the result of the command, if any.</param>
			<param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
			<param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
			<param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleQuickInfo">
			<summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.QUICKINFO"></see> command to show tool tip information about the selected identifier or expression.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.HandleSmartIndent">
			<summary>Handles smart indentation.</summary>
			<returns>Returns true if the caret position has changed as a result of smart indentation. Returns false if no changes have been made to the source.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Handles execution of a supported command.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code. If a particular command is not supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED"></see>.</returns>
			<param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object to hold the result of the command, if any.</param>
			<param name="nCmdId">[in] The specific ID of the command from the command group. This identifies the command to execute.</param>
			<param name="pvaIn">[in] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object holding any parameters required by the command. This can be a null value indicating there are no additional parameters.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
			<param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
			<summary>Determines if the specified commands in the given command group are supported.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code. A typical error code that can be returned is <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP)"></see>, indicating the command group is not supported.   </returns>
			<param name="pCmdText">[in, out] An umarshaled pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT"></see> structure that receives the name for each command that is supported.</param>
			<param name="prgCmds">[in, out] An array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD"></see> structures that specify the command IDs being queried about. On return, the enable status of each command is stored in each structure.</param>
			<param name="cCmds">[in] The number of command IDs listed in the prgCmds array.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnAfterSnippetsKeyBindingChange(System.UInt32,System.UInt32,System.Int32)">
			<param name="dwCmdGuid"> </param>
			<param name="fBound"> </param>
			<param name="dwCmdId"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnAutoComplete">
			<summary>Called when the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOCOMPLETE"></see> command is received.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnChangeCaretLine(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32)">
			<summary>Called when the caret moves to another line.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view in which the caret was moved.</param>
			<param name="line">[in] The line number to which the caret was moved.</param>
			<param name="col">[in] The character offset on the line to which the caret was moved.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnChangeScrollInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
			<summary>Called when the scroll information for the specified scroll bar has changed.</summary>
			<param name="iMinUnit">[in] The new minimum value for the scroll bar (typically in lines).</param>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that owns the scroll bar.</param>
			<param name="iFirstVisibleUnit">[in] The new value for the first visible line in the scroll bar (affects the position of the scroll thumb).</param>
			<param name="iMaxUnits">[in] The new maximum value for the scroll bar (typically in lines).</param>
			<param name="iVisibleUnits">[in] The new value representing the number of visible lines in the scroll bar (affects the size of the scroll thumb).</param>
			<param name="iBar">[in] The scroll bar ID: SB_VERT for the vertical bar and SB_HORZ for the horizontal bar.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnKillFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Called when the specified view loses focus.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that is losing focus.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnSetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
			<summary>Called when the buffer of lines is being set or changed in the given view.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view whose buffer is being changed.</param>
			<param name="buffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object representing the new buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.OnSetFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Called when the specified view gains focus.</summary>
			<param name="view">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view that has received the focus.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.QueryCommandStatus(System.Guid@,System.UInt32)">
			<summary>Determines if the specified command is supported.</summary>
			<returns>If the command is supported, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDF.OLECMDF_SUPPORTED"></see> (typically with the <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDF.OLECMDF_ENABLED"></see> flag added to indicate the command should be shown enabled); otherwise, returns <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED"></see> if the command is not supported or <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_UNKNOWNGROUP"></see> if the entire command group is not supported.</returns>
			<param name="nCmdId">[in] The ID of the command to examine.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.QueryParameterList(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
			<summary>Called to obtain the parameter for the specified command.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code. A typical error code is <see cref="F:Microsoft.VisualStudio.OLE.Interop.Constants.OLECMDERR_E_NOTSUPPORTED"></see> if parameters on methods are not supported.</returns>
			<param name="pvaOut">[in, out] An unmarshaled pointer to a <see cref="T:Microsoft.VisualStudio.Package.Variant"></see> object to hold the parameter of the command expressed as a string.</param>
			<param name="nCmdId">[in] The ID of the command for which to get the parameter.</param>
			<param name="pvaIn">[in] Always null.</param>
			<param name="guidCmdGroup">[in] The GUID of the command group.</param>
			<param name="nCmdexecopt">[in] Additional parameters for the command (packed into a 32-bit value).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.ReformatDocument">
			<summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATDOCUMENT"></see> command to reformat the entire document.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.ReformatSelection">
			<summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATSELECTION"></see> command to reformat a selection.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
			<summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWCONTEXTMENU"></see> command to show a context menu.</summary>
			<param name="target">[in] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see> object that is to handle the commands in the context menu.</param>
			<param name="groupGuid">[in] The GUID of the menu group from which the menu ID is taken.</param>
			<param name="menuId">[in] The ID of the menu to show.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.TypeChar(System.Char)">
			<summary>Executes a <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TYPECHAR"></see> on the current command target chain.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ch">[in] The character command that is to be executed. This can only be a character that can be typed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.Package.ViewFilter.UncommentSelection">
			<summary>Handles the <see cref="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOMMENTBLOCK"></see> command to uncomment the current selection in the current view.</summary>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ViewFilter.CodeWindowManager">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object that owns this <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> object.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.CodeWindowManager"></see> object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ViewFilter.IsExpansionUIActive">
			<summary>Determines if the code snippet expansion user interface (UI) is active.</summary>
			<returns>If the expansion UI is active, returns true; otherwise, returns false.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ViewFilter.Source">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object associated with this <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> object.</summary>
			<returns>Returns a <see cref="T:Microsoft.VisualStudio.Package.Source"></see> object.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ViewFilter.TextTipData">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.Package.TextTipData"></see> object associated with this view.</summary>
			<returns>Returns the existing <see cref="T:Microsoft.VisualStudio.Package.TextTipData"></see> object or creates a new <see cref="T:Microsoft.VisualStudio.Package.TextTipData"></see> object, makes it the existing one, and returns it.</returns>
		</member>
		<member name="P:Microsoft.VisualStudio.Package.ViewFilter.TextView">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object associated with this <see cref="T:Microsoft.VisualStudio.Package.ViewFilter"></see> object.</summary>
			<returns>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object.</returns>
		</member>
	</members>
</doc>